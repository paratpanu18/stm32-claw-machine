
ProjectCoin.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000516c  08000200  08000200  00001200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000188  0800536c  0800536c  0000636c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080054f4  080054f4  00007070  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080054f4  080054f4  000064f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080054fc  080054fc  00007070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080054fc  080054fc  000064fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005500  08005500  00006500  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000070  20000000  08005504  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002d4  20000070  08005574  00007070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000344  08005574  00007344  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00007070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014b01  00000000  00000000  0000709e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002bc1  00000000  00000000  0001bb9f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001120  00000000  00000000  0001e760  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000d74  00000000  00000000  0001f880  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000033b0  00000000  00000000  000205f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016905  00000000  00000000  000239a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fef53  00000000  00000000  0003a2a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001391fc  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004bfc  00000000  00000000  00139240  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000053  00000000  00000000  0013de3c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	@ (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	@ (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	@ (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000070 	.word	0x20000070
 800021c:	00000000 	.word	0x00000000
 8000220:	08005354 	.word	0x08005354

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	@ (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	@ (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	@ (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000074 	.word	0x20000074
 800023c:	08005354 	.word	0x08005354

08000240 <strlen>:
 8000240:	4603      	mov	r3, r0
 8000242:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000246:	2a00      	cmp	r2, #0
 8000248:	d1fb      	bne.n	8000242 <strlen+0x2>
 800024a:	1a18      	subs	r0, r3, r0
 800024c:	3801      	subs	r0, #1
 800024e:	4770      	bx	lr

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000300:	f04f 30ff 	movne.w	r0, #4294967295
 8000304:	f000 b988 	b.w	8000618 <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9d08      	ldr	r5, [sp, #32]
 8000326:	468e      	mov	lr, r1
 8000328:	4604      	mov	r4, r0
 800032a:	4688      	mov	r8, r1
 800032c:	2b00      	cmp	r3, #0
 800032e:	d14a      	bne.n	80003c6 <__udivmoddi4+0xa6>
 8000330:	428a      	cmp	r2, r1
 8000332:	4617      	mov	r7, r2
 8000334:	d962      	bls.n	80003fc <__udivmoddi4+0xdc>
 8000336:	fab2 f682 	clz	r6, r2
 800033a:	b14e      	cbz	r6, 8000350 <__udivmoddi4+0x30>
 800033c:	f1c6 0320 	rsb	r3, r6, #32
 8000340:	fa01 f806 	lsl.w	r8, r1, r6
 8000344:	fa20 f303 	lsr.w	r3, r0, r3
 8000348:	40b7      	lsls	r7, r6
 800034a:	ea43 0808 	orr.w	r8, r3, r8
 800034e:	40b4      	lsls	r4, r6
 8000350:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000354:	fa1f fc87 	uxth.w	ip, r7
 8000358:	fbb8 f1fe 	udiv	r1, r8, lr
 800035c:	0c23      	lsrs	r3, r4, #16
 800035e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000362:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000366:	fb01 f20c 	mul.w	r2, r1, ip
 800036a:	429a      	cmp	r2, r3
 800036c:	d909      	bls.n	8000382 <__udivmoddi4+0x62>
 800036e:	18fb      	adds	r3, r7, r3
 8000370:	f101 30ff 	add.w	r0, r1, #4294967295
 8000374:	f080 80ea 	bcs.w	800054c <__udivmoddi4+0x22c>
 8000378:	429a      	cmp	r2, r3
 800037a:	f240 80e7 	bls.w	800054c <__udivmoddi4+0x22c>
 800037e:	3902      	subs	r1, #2
 8000380:	443b      	add	r3, r7
 8000382:	1a9a      	subs	r2, r3, r2
 8000384:	b2a3      	uxth	r3, r4
 8000386:	fbb2 f0fe 	udiv	r0, r2, lr
 800038a:	fb0e 2210 	mls	r2, lr, r0, r2
 800038e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000392:	fb00 fc0c 	mul.w	ip, r0, ip
 8000396:	459c      	cmp	ip, r3
 8000398:	d909      	bls.n	80003ae <__udivmoddi4+0x8e>
 800039a:	18fb      	adds	r3, r7, r3
 800039c:	f100 32ff 	add.w	r2, r0, #4294967295
 80003a0:	f080 80d6 	bcs.w	8000550 <__udivmoddi4+0x230>
 80003a4:	459c      	cmp	ip, r3
 80003a6:	f240 80d3 	bls.w	8000550 <__udivmoddi4+0x230>
 80003aa:	443b      	add	r3, r7
 80003ac:	3802      	subs	r0, #2
 80003ae:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80003b2:	eba3 030c 	sub.w	r3, r3, ip
 80003b6:	2100      	movs	r1, #0
 80003b8:	b11d      	cbz	r5, 80003c2 <__udivmoddi4+0xa2>
 80003ba:	40f3      	lsrs	r3, r6
 80003bc:	2200      	movs	r2, #0
 80003be:	e9c5 3200 	strd	r3, r2, [r5]
 80003c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d905      	bls.n	80003d6 <__udivmoddi4+0xb6>
 80003ca:	b10d      	cbz	r5, 80003d0 <__udivmoddi4+0xb0>
 80003cc:	e9c5 0100 	strd	r0, r1, [r5]
 80003d0:	2100      	movs	r1, #0
 80003d2:	4608      	mov	r0, r1
 80003d4:	e7f5      	b.n	80003c2 <__udivmoddi4+0xa2>
 80003d6:	fab3 f183 	clz	r1, r3
 80003da:	2900      	cmp	r1, #0
 80003dc:	d146      	bne.n	800046c <__udivmoddi4+0x14c>
 80003de:	4573      	cmp	r3, lr
 80003e0:	d302      	bcc.n	80003e8 <__udivmoddi4+0xc8>
 80003e2:	4282      	cmp	r2, r0
 80003e4:	f200 8105 	bhi.w	80005f2 <__udivmoddi4+0x2d2>
 80003e8:	1a84      	subs	r4, r0, r2
 80003ea:	eb6e 0203 	sbc.w	r2, lr, r3
 80003ee:	2001      	movs	r0, #1
 80003f0:	4690      	mov	r8, r2
 80003f2:	2d00      	cmp	r5, #0
 80003f4:	d0e5      	beq.n	80003c2 <__udivmoddi4+0xa2>
 80003f6:	e9c5 4800 	strd	r4, r8, [r5]
 80003fa:	e7e2      	b.n	80003c2 <__udivmoddi4+0xa2>
 80003fc:	2a00      	cmp	r2, #0
 80003fe:	f000 8090 	beq.w	8000522 <__udivmoddi4+0x202>
 8000402:	fab2 f682 	clz	r6, r2
 8000406:	2e00      	cmp	r6, #0
 8000408:	f040 80a4 	bne.w	8000554 <__udivmoddi4+0x234>
 800040c:	1a8a      	subs	r2, r1, r2
 800040e:	0c03      	lsrs	r3, r0, #16
 8000410:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000414:	b280      	uxth	r0, r0
 8000416:	b2bc      	uxth	r4, r7
 8000418:	2101      	movs	r1, #1
 800041a:	fbb2 fcfe 	udiv	ip, r2, lr
 800041e:	fb0e 221c 	mls	r2, lr, ip, r2
 8000422:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000426:	fb04 f20c 	mul.w	r2, r4, ip
 800042a:	429a      	cmp	r2, r3
 800042c:	d907      	bls.n	800043e <__udivmoddi4+0x11e>
 800042e:	18fb      	adds	r3, r7, r3
 8000430:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000434:	d202      	bcs.n	800043c <__udivmoddi4+0x11c>
 8000436:	429a      	cmp	r2, r3
 8000438:	f200 80e0 	bhi.w	80005fc <__udivmoddi4+0x2dc>
 800043c:	46c4      	mov	ip, r8
 800043e:	1a9b      	subs	r3, r3, r2
 8000440:	fbb3 f2fe 	udiv	r2, r3, lr
 8000444:	fb0e 3312 	mls	r3, lr, r2, r3
 8000448:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800044c:	fb02 f404 	mul.w	r4, r2, r4
 8000450:	429c      	cmp	r4, r3
 8000452:	d907      	bls.n	8000464 <__udivmoddi4+0x144>
 8000454:	18fb      	adds	r3, r7, r3
 8000456:	f102 30ff 	add.w	r0, r2, #4294967295
 800045a:	d202      	bcs.n	8000462 <__udivmoddi4+0x142>
 800045c:	429c      	cmp	r4, r3
 800045e:	f200 80ca 	bhi.w	80005f6 <__udivmoddi4+0x2d6>
 8000462:	4602      	mov	r2, r0
 8000464:	1b1b      	subs	r3, r3, r4
 8000466:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800046a:	e7a5      	b.n	80003b8 <__udivmoddi4+0x98>
 800046c:	f1c1 0620 	rsb	r6, r1, #32
 8000470:	408b      	lsls	r3, r1
 8000472:	fa22 f706 	lsr.w	r7, r2, r6
 8000476:	431f      	orrs	r7, r3
 8000478:	fa0e f401 	lsl.w	r4, lr, r1
 800047c:	fa20 f306 	lsr.w	r3, r0, r6
 8000480:	fa2e fe06 	lsr.w	lr, lr, r6
 8000484:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000488:	4323      	orrs	r3, r4
 800048a:	fa00 f801 	lsl.w	r8, r0, r1
 800048e:	fa1f fc87 	uxth.w	ip, r7
 8000492:	fbbe f0f9 	udiv	r0, lr, r9
 8000496:	0c1c      	lsrs	r4, r3, #16
 8000498:	fb09 ee10 	mls	lr, r9, r0, lr
 800049c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 80004a0:	fb00 fe0c 	mul.w	lr, r0, ip
 80004a4:	45a6      	cmp	lr, r4
 80004a6:	fa02 f201 	lsl.w	r2, r2, r1
 80004aa:	d909      	bls.n	80004c0 <__udivmoddi4+0x1a0>
 80004ac:	193c      	adds	r4, r7, r4
 80004ae:	f100 3aff 	add.w	sl, r0, #4294967295
 80004b2:	f080 809c 	bcs.w	80005ee <__udivmoddi4+0x2ce>
 80004b6:	45a6      	cmp	lr, r4
 80004b8:	f240 8099 	bls.w	80005ee <__udivmoddi4+0x2ce>
 80004bc:	3802      	subs	r0, #2
 80004be:	443c      	add	r4, r7
 80004c0:	eba4 040e 	sub.w	r4, r4, lr
 80004c4:	fa1f fe83 	uxth.w	lr, r3
 80004c8:	fbb4 f3f9 	udiv	r3, r4, r9
 80004cc:	fb09 4413 	mls	r4, r9, r3, r4
 80004d0:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80004d4:	fb03 fc0c 	mul.w	ip, r3, ip
 80004d8:	45a4      	cmp	ip, r4
 80004da:	d908      	bls.n	80004ee <__udivmoddi4+0x1ce>
 80004dc:	193c      	adds	r4, r7, r4
 80004de:	f103 3eff 	add.w	lr, r3, #4294967295
 80004e2:	f080 8082 	bcs.w	80005ea <__udivmoddi4+0x2ca>
 80004e6:	45a4      	cmp	ip, r4
 80004e8:	d97f      	bls.n	80005ea <__udivmoddi4+0x2ca>
 80004ea:	3b02      	subs	r3, #2
 80004ec:	443c      	add	r4, r7
 80004ee:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004f2:	eba4 040c 	sub.w	r4, r4, ip
 80004f6:	fba0 ec02 	umull	lr, ip, r0, r2
 80004fa:	4564      	cmp	r4, ip
 80004fc:	4673      	mov	r3, lr
 80004fe:	46e1      	mov	r9, ip
 8000500:	d362      	bcc.n	80005c8 <__udivmoddi4+0x2a8>
 8000502:	d05f      	beq.n	80005c4 <__udivmoddi4+0x2a4>
 8000504:	b15d      	cbz	r5, 800051e <__udivmoddi4+0x1fe>
 8000506:	ebb8 0203 	subs.w	r2, r8, r3
 800050a:	eb64 0409 	sbc.w	r4, r4, r9
 800050e:	fa04 f606 	lsl.w	r6, r4, r6
 8000512:	fa22 f301 	lsr.w	r3, r2, r1
 8000516:	431e      	orrs	r6, r3
 8000518:	40cc      	lsrs	r4, r1
 800051a:	e9c5 6400 	strd	r6, r4, [r5]
 800051e:	2100      	movs	r1, #0
 8000520:	e74f      	b.n	80003c2 <__udivmoddi4+0xa2>
 8000522:	fbb1 fcf2 	udiv	ip, r1, r2
 8000526:	0c01      	lsrs	r1, r0, #16
 8000528:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 800052c:	b280      	uxth	r0, r0
 800052e:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000532:	463b      	mov	r3, r7
 8000534:	4638      	mov	r0, r7
 8000536:	463c      	mov	r4, r7
 8000538:	46b8      	mov	r8, r7
 800053a:	46be      	mov	lr, r7
 800053c:	2620      	movs	r6, #32
 800053e:	fbb1 f1f7 	udiv	r1, r1, r7
 8000542:	eba2 0208 	sub.w	r2, r2, r8
 8000546:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800054a:	e766      	b.n	800041a <__udivmoddi4+0xfa>
 800054c:	4601      	mov	r1, r0
 800054e:	e718      	b.n	8000382 <__udivmoddi4+0x62>
 8000550:	4610      	mov	r0, r2
 8000552:	e72c      	b.n	80003ae <__udivmoddi4+0x8e>
 8000554:	f1c6 0220 	rsb	r2, r6, #32
 8000558:	fa2e f302 	lsr.w	r3, lr, r2
 800055c:	40b7      	lsls	r7, r6
 800055e:	40b1      	lsls	r1, r6
 8000560:	fa20 f202 	lsr.w	r2, r0, r2
 8000564:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000568:	430a      	orrs	r2, r1
 800056a:	fbb3 f8fe 	udiv	r8, r3, lr
 800056e:	b2bc      	uxth	r4, r7
 8000570:	fb0e 3318 	mls	r3, lr, r8, r3
 8000574:	0c11      	lsrs	r1, r2, #16
 8000576:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800057a:	fb08 f904 	mul.w	r9, r8, r4
 800057e:	40b0      	lsls	r0, r6
 8000580:	4589      	cmp	r9, r1
 8000582:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000586:	b280      	uxth	r0, r0
 8000588:	d93e      	bls.n	8000608 <__udivmoddi4+0x2e8>
 800058a:	1879      	adds	r1, r7, r1
 800058c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000590:	d201      	bcs.n	8000596 <__udivmoddi4+0x276>
 8000592:	4589      	cmp	r9, r1
 8000594:	d81f      	bhi.n	80005d6 <__udivmoddi4+0x2b6>
 8000596:	eba1 0109 	sub.w	r1, r1, r9
 800059a:	fbb1 f9fe 	udiv	r9, r1, lr
 800059e:	fb09 f804 	mul.w	r8, r9, r4
 80005a2:	fb0e 1119 	mls	r1, lr, r9, r1
 80005a6:	b292      	uxth	r2, r2
 80005a8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80005ac:	4542      	cmp	r2, r8
 80005ae:	d229      	bcs.n	8000604 <__udivmoddi4+0x2e4>
 80005b0:	18ba      	adds	r2, r7, r2
 80005b2:	f109 31ff 	add.w	r1, r9, #4294967295
 80005b6:	d2c4      	bcs.n	8000542 <__udivmoddi4+0x222>
 80005b8:	4542      	cmp	r2, r8
 80005ba:	d2c2      	bcs.n	8000542 <__udivmoddi4+0x222>
 80005bc:	f1a9 0102 	sub.w	r1, r9, #2
 80005c0:	443a      	add	r2, r7
 80005c2:	e7be      	b.n	8000542 <__udivmoddi4+0x222>
 80005c4:	45f0      	cmp	r8, lr
 80005c6:	d29d      	bcs.n	8000504 <__udivmoddi4+0x1e4>
 80005c8:	ebbe 0302 	subs.w	r3, lr, r2
 80005cc:	eb6c 0c07 	sbc.w	ip, ip, r7
 80005d0:	3801      	subs	r0, #1
 80005d2:	46e1      	mov	r9, ip
 80005d4:	e796      	b.n	8000504 <__udivmoddi4+0x1e4>
 80005d6:	eba7 0909 	sub.w	r9, r7, r9
 80005da:	4449      	add	r1, r9
 80005dc:	f1a8 0c02 	sub.w	ip, r8, #2
 80005e0:	fbb1 f9fe 	udiv	r9, r1, lr
 80005e4:	fb09 f804 	mul.w	r8, r9, r4
 80005e8:	e7db      	b.n	80005a2 <__udivmoddi4+0x282>
 80005ea:	4673      	mov	r3, lr
 80005ec:	e77f      	b.n	80004ee <__udivmoddi4+0x1ce>
 80005ee:	4650      	mov	r0, sl
 80005f0:	e766      	b.n	80004c0 <__udivmoddi4+0x1a0>
 80005f2:	4608      	mov	r0, r1
 80005f4:	e6fd      	b.n	80003f2 <__udivmoddi4+0xd2>
 80005f6:	443b      	add	r3, r7
 80005f8:	3a02      	subs	r2, #2
 80005fa:	e733      	b.n	8000464 <__udivmoddi4+0x144>
 80005fc:	f1ac 0c02 	sub.w	ip, ip, #2
 8000600:	443b      	add	r3, r7
 8000602:	e71c      	b.n	800043e <__udivmoddi4+0x11e>
 8000604:	4649      	mov	r1, r9
 8000606:	e79c      	b.n	8000542 <__udivmoddi4+0x222>
 8000608:	eba1 0109 	sub.w	r1, r1, r9
 800060c:	46c4      	mov	ip, r8
 800060e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000612:	fb09 f804 	mul.w	r8, r9, r4
 8000616:	e7c4      	b.n	80005a2 <__udivmoddi4+0x282>

08000618 <__aeabi_idiv0>:
 8000618:	4770      	bx	lr
 800061a:	bf00      	nop

0800061c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	b08c      	sub	sp, #48	@ 0x30
 8000620:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000622:	f107 031c 	add.w	r3, r7, #28
 8000626:	2200      	movs	r2, #0
 8000628:	601a      	str	r2, [r3, #0]
 800062a:	605a      	str	r2, [r3, #4]
 800062c:	609a      	str	r2, [r3, #8]
 800062e:	60da      	str	r2, [r3, #12]
 8000630:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000632:	4b86      	ldr	r3, [pc, #536]	@ (800084c <MX_GPIO_Init+0x230>)
 8000634:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000636:	4a85      	ldr	r2, [pc, #532]	@ (800084c <MX_GPIO_Init+0x230>)
 8000638:	f043 0304 	orr.w	r3, r3, #4
 800063c:	6313      	str	r3, [r2, #48]	@ 0x30
 800063e:	4b83      	ldr	r3, [pc, #524]	@ (800084c <MX_GPIO_Init+0x230>)
 8000640:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000642:	f003 0304 	and.w	r3, r3, #4
 8000646:	61bb      	str	r3, [r7, #24]
 8000648:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800064a:	4b80      	ldr	r3, [pc, #512]	@ (800084c <MX_GPIO_Init+0x230>)
 800064c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800064e:	4a7f      	ldr	r2, [pc, #508]	@ (800084c <MX_GPIO_Init+0x230>)
 8000650:	f043 0320 	orr.w	r3, r3, #32
 8000654:	6313      	str	r3, [r2, #48]	@ 0x30
 8000656:	4b7d      	ldr	r3, [pc, #500]	@ (800084c <MX_GPIO_Init+0x230>)
 8000658:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800065a:	f003 0320 	and.w	r3, r3, #32
 800065e:	617b      	str	r3, [r7, #20]
 8000660:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000662:	4b7a      	ldr	r3, [pc, #488]	@ (800084c <MX_GPIO_Init+0x230>)
 8000664:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000666:	4a79      	ldr	r2, [pc, #484]	@ (800084c <MX_GPIO_Init+0x230>)
 8000668:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800066c:	6313      	str	r3, [r2, #48]	@ 0x30
 800066e:	4b77      	ldr	r3, [pc, #476]	@ (800084c <MX_GPIO_Init+0x230>)
 8000670:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000672:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000676:	613b      	str	r3, [r7, #16]
 8000678:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800067a:	4b74      	ldr	r3, [pc, #464]	@ (800084c <MX_GPIO_Init+0x230>)
 800067c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800067e:	4a73      	ldr	r2, [pc, #460]	@ (800084c <MX_GPIO_Init+0x230>)
 8000680:	f043 0302 	orr.w	r3, r3, #2
 8000684:	6313      	str	r3, [r2, #48]	@ 0x30
 8000686:	4b71      	ldr	r3, [pc, #452]	@ (800084c <MX_GPIO_Init+0x230>)
 8000688:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800068a:	f003 0302 	and.w	r3, r3, #2
 800068e:	60fb      	str	r3, [r7, #12]
 8000690:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000692:	4b6e      	ldr	r3, [pc, #440]	@ (800084c <MX_GPIO_Init+0x230>)
 8000694:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000696:	4a6d      	ldr	r2, [pc, #436]	@ (800084c <MX_GPIO_Init+0x230>)
 8000698:	f043 0310 	orr.w	r3, r3, #16
 800069c:	6313      	str	r3, [r2, #48]	@ 0x30
 800069e:	4b6b      	ldr	r3, [pc, #428]	@ (800084c <MX_GPIO_Init+0x230>)
 80006a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006a2:	f003 0310 	and.w	r3, r3, #16
 80006a6:	60bb      	str	r3, [r7, #8]
 80006a8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80006aa:	4b68      	ldr	r3, [pc, #416]	@ (800084c <MX_GPIO_Init+0x230>)
 80006ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006ae:	4a67      	ldr	r2, [pc, #412]	@ (800084c <MX_GPIO_Init+0x230>)
 80006b0:	f043 0308 	orr.w	r3, r3, #8
 80006b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80006b6:	4b65      	ldr	r3, [pc, #404]	@ (800084c <MX_GPIO_Init+0x230>)
 80006b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006ba:	f003 0308 	and.w	r3, r3, #8
 80006be:	607b      	str	r3, [r7, #4]
 80006c0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80006c2:	4b62      	ldr	r3, [pc, #392]	@ (800084c <MX_GPIO_Init+0x230>)
 80006c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006c6:	4a61      	ldr	r2, [pc, #388]	@ (800084c <MX_GPIO_Init+0x230>)
 80006c8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80006cc:	6313      	str	r3, [r2, #48]	@ 0x30
 80006ce:	4b5f      	ldr	r3, [pc, #380]	@ (800084c <MX_GPIO_Init+0x230>)
 80006d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006d2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80006d6:	603b      	str	r3, [r7, #0]
 80006d8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80006da:	2200      	movs	r2, #0
 80006dc:	f244 0181 	movw	r1, #16513	@ 0x4081
 80006e0:	485b      	ldr	r0, [pc, #364]	@ (8000850 <MX_GPIO_Init+0x234>)
 80006e2:	f001 fb13 	bl	8001d0c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_15, GPIO_PIN_RESET);
 80006e6:	2200      	movs	r2, #0
 80006e8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80006ec:	4859      	ldr	r0, [pc, #356]	@ (8000854 <MX_GPIO_Init+0x238>)
 80006ee:	f001 fb0d 	bl	8001d0c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_13, GPIO_PIN_RESET);
 80006f2:	2200      	movs	r2, #0
 80006f4:	f44f 5106 	mov.w	r1, #8576	@ 0x2180
 80006f8:	4857      	ldr	r0, [pc, #348]	@ (8000858 <MX_GPIO_Init+0x23c>)
 80006fa:	f001 fb07 	bl	8001d0c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, CS_Pin|DC_Pin|RESET_Pin, GPIO_PIN_RESET);
 80006fe:	2200      	movs	r2, #0
 8000700:	f44f 61e0 	mov.w	r1, #1792	@ 0x700
 8000704:	4855      	ldr	r0, [pc, #340]	@ (800085c <MX_GPIO_Init+0x240>)
 8000706:	f001 fb01 	bl	8001d0c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_9|GPIO_PIN_14, GPIO_PIN_RESET);
 800070a:	2200      	movs	r2, #0
 800070c:	f44f 4184 	mov.w	r1, #16896	@ 0x4200
 8000710:	4853      	ldr	r0, [pc, #332]	@ (8000860 <MX_GPIO_Init+0x244>)
 8000712:	f001 fafb 	bl	8001d0c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000716:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800071a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800071c:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000720:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000722:	2300      	movs	r3, #0
 8000724:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000726:	f107 031c 	add.w	r3, r7, #28
 800072a:	4619      	mov	r1, r3
 800072c:	484b      	ldr	r0, [pc, #300]	@ (800085c <MX_GPIO_Init+0x240>)
 800072e:	f001 f929 	bl	8001984 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000732:	f244 0381 	movw	r3, #16513	@ 0x4081
 8000736:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000738:	2301      	movs	r3, #1
 800073a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800073c:	2300      	movs	r3, #0
 800073e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000740:	2300      	movs	r3, #0
 8000742:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000744:	f107 031c 	add.w	r3, r7, #28
 8000748:	4619      	mov	r1, r3
 800074a:	4841      	ldr	r0, [pc, #260]	@ (8000850 <MX_GPIO_Init+0x234>)
 800074c:	f001 f91a 	bl	8001984 <HAL_GPIO_Init>

  /*Configure GPIO pins : PF13 PF14 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 8000750:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 8000754:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000756:	2300      	movs	r3, #0
 8000758:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800075a:	2301      	movs	r3, #1
 800075c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800075e:	f107 031c 	add.w	r3, r7, #28
 8000762:	4619      	mov	r1, r3
 8000764:	483b      	ldr	r0, [pc, #236]	@ (8000854 <MX_GPIO_Init+0x238>)
 8000766:	f001 f90d 	bl	8001984 <HAL_GPIO_Init>

  /*Configure GPIO pin : PF15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 800076a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800076e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000770:	2301      	movs	r3, #1
 8000772:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000774:	2300      	movs	r3, #0
 8000776:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000778:	2300      	movs	r3, #0
 800077a:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800077c:	f107 031c 	add.w	r3, r7, #28
 8000780:	4619      	mov	r1, r3
 8000782:	4834      	ldr	r0, [pc, #208]	@ (8000854 <MX_GPIO_Init+0x238>)
 8000784:	f001 f8fe 	bl	8001984 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE7 PE8 PE13 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_13;
 8000788:	f44f 5306 	mov.w	r3, #8576	@ 0x2180
 800078c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800078e:	2301      	movs	r3, #1
 8000790:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000792:	2300      	movs	r3, #0
 8000794:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000796:	2300      	movs	r3, #0
 8000798:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800079a:	f107 031c 	add.w	r3, r7, #28
 800079e:	4619      	mov	r1, r3
 80007a0:	482d      	ldr	r0, [pc, #180]	@ (8000858 <MX_GPIO_Init+0x23c>)
 80007a2:	f001 f8ef 	bl	8001984 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE9 PE11 */
  GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11;
 80007a6:	f44f 6320 	mov.w	r3, #2560	@ 0xa00
 80007aa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007ac:	2300      	movs	r3, #0
 80007ae:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80007b0:	2301      	movs	r3, #1
 80007b2:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80007b4:	f107 031c 	add.w	r3, r7, #28
 80007b8:	4619      	mov	r1, r3
 80007ba:	4827      	ldr	r0, [pc, #156]	@ (8000858 <MX_GPIO_Init+0x23c>)
 80007bc:	f001 f8e2 	bl	8001984 <HAL_GPIO_Init>

  /*Configure GPIO pins : CS_Pin DC_Pin RESET_Pin */
  GPIO_InitStruct.Pin = CS_Pin|DC_Pin|RESET_Pin;
 80007c0:	f44f 63e0 	mov.w	r3, #1792	@ 0x700
 80007c4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007c6:	2301      	movs	r3, #1
 80007c8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ca:	2300      	movs	r3, #0
 80007cc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007ce:	2300      	movs	r3, #0
 80007d0:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80007d2:	f107 031c 	add.w	r3, r7, #28
 80007d6:	4619      	mov	r1, r3
 80007d8:	4820      	ldr	r0, [pc, #128]	@ (800085c <MX_GPIO_Init+0x240>)
 80007da:	f001 f8d3 	bl	8001984 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG9 PG14 */
  GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_14;
 80007de:	f44f 4384 	mov.w	r3, #16896	@ 0x4200
 80007e2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007e4:	2301      	movs	r3, #1
 80007e6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007e8:	2300      	movs	r3, #0
 80007ea:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007ec:	2300      	movs	r3, #0
 80007ee:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80007f0:	f107 031c 	add.w	r3, r7, #28
 80007f4:	4619      	mov	r1, r3
 80007f6:	481a      	ldr	r0, [pc, #104]	@ (8000860 <MX_GPIO_Init+0x244>)
 80007f8:	f001 f8c4 	bl	8001984 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 80007fc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000800:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000802:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000806:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000808:	2300      	movs	r3, #0
 800080a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800080c:	f107 031c 	add.w	r3, r7, #28
 8000810:	4619      	mov	r1, r3
 8000812:	480f      	ldr	r0, [pc, #60]	@ (8000850 <MX_GPIO_Init+0x234>)
 8000814:	f001 f8b6 	bl	8001984 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000818:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800081c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800081e:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000822:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000824:	2300      	movs	r3, #0
 8000826:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000828:	f107 031c 	add.w	r3, r7, #28
 800082c:	4619      	mov	r1, r3
 800082e:	4808      	ldr	r0, [pc, #32]	@ (8000850 <MX_GPIO_Init+0x234>)
 8000830:	f001 f8a8 	bl	8001984 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 1, 0);
 8000834:	2200      	movs	r2, #0
 8000836:	2101      	movs	r1, #1
 8000838:	2017      	movs	r0, #23
 800083a:	f001 f86c 	bl	8001916 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800083e:	2017      	movs	r0, #23
 8000840:	f001 f885 	bl	800194e <HAL_NVIC_EnableIRQ>

}
 8000844:	bf00      	nop
 8000846:	3730      	adds	r7, #48	@ 0x30
 8000848:	46bd      	mov	sp, r7
 800084a:	bd80      	pop	{r7, pc}
 800084c:	40023800 	.word	0x40023800
 8000850:	40020400 	.word	0x40020400
 8000854:	40021400 	.word	0x40021400
 8000858:	40021000 	.word	0x40021000
 800085c:	40020800 	.word	0x40020800
 8000860:	40021800 	.word	0x40021800

08000864 <ILI9341_Select>:

/**
 * @brief Select the ILI9341 display
 * @param ili9341 Pointer to ILI9341 handle structure
 */
static void ILI9341_Select(const ILI9341_HandleTypeDef* ili9341) {
 8000864:	b580      	push	{r7, lr}
 8000866:	b082      	sub	sp, #8
 8000868:	af00      	add	r7, sp, #0
 800086a:	6078      	str	r0, [r7, #4]
    HAL_GPIO_WritePin(ili9341->cs_port, ili9341->cs_pin, GPIO_PIN_RESET);
 800086c:	687b      	ldr	r3, [r7, #4]
 800086e:	6858      	ldr	r0, [r3, #4]
 8000870:	687b      	ldr	r3, [r7, #4]
 8000872:	891b      	ldrh	r3, [r3, #8]
 8000874:	2200      	movs	r2, #0
 8000876:	4619      	mov	r1, r3
 8000878:	f001 fa48 	bl	8001d0c <HAL_GPIO_WritePin>
}
 800087c:	bf00      	nop
 800087e:	3708      	adds	r7, #8
 8000880:	46bd      	mov	sp, r7
 8000882:	bd80      	pop	{r7, pc}

08000884 <ILI9341_Deselect>:

void ILI9341_Deselect(const ILI9341_HandleTypeDef* ili9341) {
 8000884:	b580      	push	{r7, lr}
 8000886:	b082      	sub	sp, #8
 8000888:	af00      	add	r7, sp, #0
 800088a:	6078      	str	r0, [r7, #4]
    HAL_GPIO_WritePin(ili9341->cs_port, ili9341->cs_pin, GPIO_PIN_SET);
 800088c:	687b      	ldr	r3, [r7, #4]
 800088e:	6858      	ldr	r0, [r3, #4]
 8000890:	687b      	ldr	r3, [r7, #4]
 8000892:	891b      	ldrh	r3, [r3, #8]
 8000894:	2201      	movs	r2, #1
 8000896:	4619      	mov	r1, r3
 8000898:	f001 fa38 	bl	8001d0c <HAL_GPIO_WritePin>
}
 800089c:	bf00      	nop
 800089e:	3708      	adds	r7, #8
 80008a0:	46bd      	mov	sp, r7
 80008a2:	bd80      	pop	{r7, pc}

080008a4 <ILI9341_Reset>:

/**
 * @brief Reset the ILI9341 display
 * @param ili9341 Pointer to ILI9341 handle structure
 */
static void ILI9341_Reset(const ILI9341_HandleTypeDef* ili9341) {
 80008a4:	b580      	push	{r7, lr}
 80008a6:	b082      	sub	sp, #8
 80008a8:	af00      	add	r7, sp, #0
 80008aa:	6078      	str	r0, [r7, #4]
    HAL_GPIO_WritePin(ili9341->rst_port, ili9341->rst_pin, GPIO_PIN_RESET);
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	6958      	ldr	r0, [r3, #20]
 80008b0:	687b      	ldr	r3, [r7, #4]
 80008b2:	8b1b      	ldrh	r3, [r3, #24]
 80008b4:	2200      	movs	r2, #0
 80008b6:	4619      	mov	r1, r3
 80008b8:	f001 fa28 	bl	8001d0c <HAL_GPIO_WritePin>
    HAL_Delay(5);
 80008bc:	2005      	movs	r0, #5
 80008be:	f000 ff2b 	bl	8001718 <HAL_Delay>
    HAL_GPIO_WritePin(ili9341->rst_port, ili9341->rst_pin, GPIO_PIN_SET);
 80008c2:	687b      	ldr	r3, [r7, #4]
 80008c4:	6958      	ldr	r0, [r3, #20]
 80008c6:	687b      	ldr	r3, [r7, #4]
 80008c8:	8b1b      	ldrh	r3, [r3, #24]
 80008ca:	2201      	movs	r2, #1
 80008cc:	4619      	mov	r1, r3
 80008ce:	f001 fa1d 	bl	8001d0c <HAL_GPIO_WritePin>
}
 80008d2:	bf00      	nop
 80008d4:	3708      	adds	r7, #8
 80008d6:	46bd      	mov	sp, r7
 80008d8:	bd80      	pop	{r7, pc}

080008da <ILI9341_WriteCommand>:
/**
 * @brief Write a command to the ILI9341 display
 * @param ili9341 Pointer to ILI9341 handle structure
 * @param cmd Command byte to write
 */
static void ILI9341_WriteCommand(const ILI9341_HandleTypeDef* ili9341, uint8_t cmd) {
 80008da:	b580      	push	{r7, lr}
 80008dc:	b082      	sub	sp, #8
 80008de:	af00      	add	r7, sp, #0
 80008e0:	6078      	str	r0, [r7, #4]
 80008e2:	460b      	mov	r3, r1
 80008e4:	70fb      	strb	r3, [r7, #3]
    HAL_GPIO_WritePin(ili9341->dc_port, ili9341->dc_pin, GPIO_PIN_RESET);
 80008e6:	687b      	ldr	r3, [r7, #4]
 80008e8:	68d8      	ldr	r0, [r3, #12]
 80008ea:	687b      	ldr	r3, [r7, #4]
 80008ec:	8a1b      	ldrh	r3, [r3, #16]
 80008ee:	2200      	movs	r2, #0
 80008f0:	4619      	mov	r1, r3
 80008f2:	f001 fa0b 	bl	8001d0c <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(ili9341->spi_handle, &cmd, sizeof(cmd), HAL_MAX_DELAY);
 80008f6:	687b      	ldr	r3, [r7, #4]
 80008f8:	6818      	ldr	r0, [r3, #0]
 80008fa:	1cf9      	adds	r1, r7, #3
 80008fc:	f04f 33ff 	mov.w	r3, #4294967295
 8000900:	2201      	movs	r2, #1
 8000902:	f002 fc3c 	bl	800317e <HAL_SPI_Transmit>
}
 8000906:	bf00      	nop
 8000908:	3708      	adds	r7, #8
 800090a:	46bd      	mov	sp, r7
 800090c:	bd80      	pop	{r7, pc}

0800090e <ILI9341_WriteData>:
 * @brief Write data to the ILI9341 display
 * @param ili9341 Pointer to ILI9341 handle structure
 * @param buff Pointer to the data buffer
 * @param bufferSize Size of the data buffer
 */
static void ILI9341_WriteData(const ILI9341_HandleTypeDef* ili9341, uint8_t* buff, size_t bufferSize) {
 800090e:	b580      	push	{r7, lr}
 8000910:	b086      	sub	sp, #24
 8000912:	af00      	add	r7, sp, #0
 8000914:	60f8      	str	r0, [r7, #12]
 8000916:	60b9      	str	r1, [r7, #8]
 8000918:	607a      	str	r2, [r7, #4]
    HAL_GPIO_WritePin(ili9341->dc_port, ili9341->dc_pin, GPIO_PIN_SET);
 800091a:	68fb      	ldr	r3, [r7, #12]
 800091c:	68d8      	ldr	r0, [r3, #12]
 800091e:	68fb      	ldr	r3, [r7, #12]
 8000920:	8a1b      	ldrh	r3, [r3, #16]
 8000922:	2201      	movs	r2, #1
 8000924:	4619      	mov	r1, r3
 8000926:	f001 f9f1 	bl	8001d0c <HAL_GPIO_WritePin>

    // split data in small chunks because HAL can't send more then 64K at once
    while (bufferSize > 0) {
 800092a:	e016      	b.n	800095a <ILI9341_WriteData+0x4c>
        uint16_t chunkSize = bufferSize > 32768 ? 32768 : bufferSize;
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8000932:	bf28      	it	cs
 8000934:	f44f 4300 	movcs.w	r3, #32768	@ 0x8000
 8000938:	82fb      	strh	r3, [r7, #22]
        HAL_SPI_Transmit(ili9341->spi_handle, buff, chunkSize, HAL_MAX_DELAY);
 800093a:	68fb      	ldr	r3, [r7, #12]
 800093c:	6818      	ldr	r0, [r3, #0]
 800093e:	8afa      	ldrh	r2, [r7, #22]
 8000940:	f04f 33ff 	mov.w	r3, #4294967295
 8000944:	68b9      	ldr	r1, [r7, #8]
 8000946:	f002 fc1a 	bl	800317e <HAL_SPI_Transmit>
        buff += chunkSize;
 800094a:	8afb      	ldrh	r3, [r7, #22]
 800094c:	68ba      	ldr	r2, [r7, #8]
 800094e:	4413      	add	r3, r2
 8000950:	60bb      	str	r3, [r7, #8]
        bufferSize -= chunkSize;
 8000952:	8afb      	ldrh	r3, [r7, #22]
 8000954:	687a      	ldr	r2, [r7, #4]
 8000956:	1ad3      	subs	r3, r2, r3
 8000958:	607b      	str	r3, [r7, #4]
    while (bufferSize > 0) {
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	2b00      	cmp	r3, #0
 800095e:	d1e5      	bne.n	800092c <ILI9341_WriteData+0x1e>
    }
}
 8000960:	bf00      	nop
 8000962:	bf00      	nop
 8000964:	3718      	adds	r7, #24
 8000966:	46bd      	mov	sp, r7
 8000968:	bd80      	pop	{r7, pc}
	...

0800096c <ILI9341_Init>:
    GPIO_TypeDef* rst_port,
    uint16_t rst_pin,
    int_fast8_t rotation,
    int_fast16_t width,
    int_fast16_t height
) {
 800096c:	b5b0      	push	{r4, r5, r7, lr}
 800096e:	b0ae      	sub	sp, #184	@ 0xb8
 8000970:	af00      	add	r7, sp, #0
 8000972:	60f8      	str	r0, [r7, #12]
 8000974:	60b9      	str	r1, [r7, #8]
 8000976:	607a      	str	r2, [r7, #4]
 8000978:	807b      	strh	r3, [r7, #2]
    width = abs(width);
 800097a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800097e:	2b00      	cmp	r3, #0
 8000980:	bfb8      	it	lt
 8000982:	425b      	neglt	r3, r3
 8000984:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    height = abs(height);
 8000988:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800098c:	2b00      	cmp	r3, #0
 800098e:	bfb8      	it	lt
 8000990:	425b      	neglt	r3, r3
 8000992:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0

    const ILI9341_HandleTypeDef ili9341_instance = {
 8000996:	68bb      	ldr	r3, [r7, #8]
 8000998:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80009a2:	887b      	ldrh	r3, [r7, #2]
 80009a4:	f8a7 3090 	strh.w	r3, [r7, #144]	@ 0x90
 80009a8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80009ac:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80009b0:	f8b7 30cc 	ldrh.w	r3, [r7, #204]	@ 0xcc
 80009b4:	f8a7 3098 	strh.w	r3, [r7, #152]	@ 0x98
 80009b8:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 80009bc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80009c0:	f8b7 30d4 	ldrh.w	r3, [r7, #212]	@ 0xd4
 80009c4:	f8a7 30a0 	strh.w	r3, [r7, #160]	@ 0xa0
 80009c8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80009cc:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80009d0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80009d4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80009d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80009dc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
        .rotation = rotation,
        .width = width,
        .height = height
    };

    const ILI9341_HandleTypeDef* ili9341 = &ili9341_instance;
 80009e0:	f107 0388 	add.w	r3, r7, #136	@ 0x88
 80009e4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

    ILI9341_Select(ili9341);
 80009e8:	f8d7 00b4 	ldr.w	r0, [r7, #180]	@ 0xb4
 80009ec:	f7ff ff3a 	bl	8000864 <ILI9341_Select>
    ILI9341_Reset(ili9341);
 80009f0:	f8d7 00b4 	ldr.w	r0, [r7, #180]	@ 0xb4
 80009f4:	f7ff ff56 	bl	80008a4 <ILI9341_Reset>
        OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
        SOFTWARE.
    */

    // SOFTWARE RESET
    ILI9341_WriteCommand(ili9341, 0x01);
 80009f8:	2101      	movs	r1, #1
 80009fa:	f8d7 00b4 	ldr.w	r0, [r7, #180]	@ 0xb4
 80009fe:	f7ff ff6c 	bl	80008da <ILI9341_WriteCommand>
    HAL_Delay(1000);
 8000a02:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000a06:	f000 fe87 	bl	8001718 <HAL_Delay>

    // POWER CONTROL A
    ILI9341_WriteCommand(ili9341, 0xCB);
 8000a0a:	21cb      	movs	r1, #203	@ 0xcb
 8000a0c:	f8d7 00b4 	ldr.w	r0, [r7, #180]	@ 0xb4
 8000a10:	f7ff ff63 	bl	80008da <ILI9341_WriteCommand>
    {
        uint8_t data[] = {0x39, 0x2C, 0x00, 0x34, 0x02};
 8000a14:	4ad9      	ldr	r2, [pc, #868]	@ (8000d7c <ILI9341_Init+0x410>)
 8000a16:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 8000a1a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000a1e:	6018      	str	r0, [r3, #0]
 8000a20:	3304      	adds	r3, #4
 8000a22:	7019      	strb	r1, [r3, #0]
        ILI9341_WriteData(ili9341, data, sizeof(data));
 8000a24:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 8000a28:	2205      	movs	r2, #5
 8000a2a:	4619      	mov	r1, r3
 8000a2c:	f8d7 00b4 	ldr.w	r0, [r7, #180]	@ 0xb4
 8000a30:	f7ff ff6d 	bl	800090e <ILI9341_WriteData>
    }

    // POWER CONTROL B
    ILI9341_WriteCommand(ili9341, 0xCF);
 8000a34:	21cf      	movs	r1, #207	@ 0xcf
 8000a36:	f8d7 00b4 	ldr.w	r0, [r7, #180]	@ 0xb4
 8000a3a:	f7ff ff4e 	bl	80008da <ILI9341_WriteCommand>
    {
        uint8_t data[] = {0x00, 0xC1, 0x30};
 8000a3e:	4ad0      	ldr	r2, [pc, #832]	@ (8000d80 <ILI9341_Init+0x414>)
 8000a40:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8000a44:	6812      	ldr	r2, [r2, #0]
 8000a46:	4611      	mov	r1, r2
 8000a48:	8019      	strh	r1, [r3, #0]
 8000a4a:	3302      	adds	r3, #2
 8000a4c:	0c12      	lsrs	r2, r2, #16
 8000a4e:	701a      	strb	r2, [r3, #0]
        ILI9341_WriteData(ili9341, data, sizeof(data));
 8000a50:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8000a54:	2203      	movs	r2, #3
 8000a56:	4619      	mov	r1, r3
 8000a58:	f8d7 00b4 	ldr.w	r0, [r7, #180]	@ 0xb4
 8000a5c:	f7ff ff57 	bl	800090e <ILI9341_WriteData>
    }

    // DRIVER TIMING CONTROL A
    ILI9341_WriteCommand(ili9341, 0xE8);
 8000a60:	21e8      	movs	r1, #232	@ 0xe8
 8000a62:	f8d7 00b4 	ldr.w	r0, [r7, #180]	@ 0xb4
 8000a66:	f7ff ff38 	bl	80008da <ILI9341_WriteCommand>
    {
        uint8_t data[] = {0x85, 0x00, 0x78};
 8000a6a:	4ac6      	ldr	r2, [pc, #792]	@ (8000d84 <ILI9341_Init+0x418>)
 8000a6c:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 8000a70:	6812      	ldr	r2, [r2, #0]
 8000a72:	4611      	mov	r1, r2
 8000a74:	8019      	strh	r1, [r3, #0]
 8000a76:	3302      	adds	r3, #2
 8000a78:	0c12      	lsrs	r2, r2, #16
 8000a7a:	701a      	strb	r2, [r3, #0]
        ILI9341_WriteData(ili9341, data, sizeof(data));
 8000a7c:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 8000a80:	2203      	movs	r2, #3
 8000a82:	4619      	mov	r1, r3
 8000a84:	f8d7 00b4 	ldr.w	r0, [r7, #180]	@ 0xb4
 8000a88:	f7ff ff41 	bl	800090e <ILI9341_WriteData>
    }

    // DRIVER TIMING CONTROL B
    ILI9341_WriteCommand(ili9341, 0xEA);
 8000a8c:	21ea      	movs	r1, #234	@ 0xea
 8000a8e:	f8d7 00b4 	ldr.w	r0, [r7, #180]	@ 0xb4
 8000a92:	f7ff ff22 	bl	80008da <ILI9341_WriteCommand>
    {
        uint8_t data[] = {0x00, 0x00};
 8000a96:	2300      	movs	r3, #0
 8000a98:	f8a7 3074 	strh.w	r3, [r7, #116]	@ 0x74
        ILI9341_WriteData(ili9341, data, sizeof(data));
 8000a9c:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8000aa0:	2202      	movs	r2, #2
 8000aa2:	4619      	mov	r1, r3
 8000aa4:	f8d7 00b4 	ldr.w	r0, [r7, #180]	@ 0xb4
 8000aa8:	f7ff ff31 	bl	800090e <ILI9341_WriteData>
    }

    // POWER ON SEQUENCE CONTROL
    ILI9341_WriteCommand(ili9341, 0xED);
 8000aac:	21ed      	movs	r1, #237	@ 0xed
 8000aae:	f8d7 00b4 	ldr.w	r0, [r7, #180]	@ 0xb4
 8000ab2:	f7ff ff12 	bl	80008da <ILI9341_WriteCommand>
    {
        uint8_t data[] = {0x64, 0x03, 0x12, 0x81};
 8000ab6:	4bb4      	ldr	r3, [pc, #720]	@ (8000d88 <ILI9341_Init+0x41c>)
 8000ab8:	673b      	str	r3, [r7, #112]	@ 0x70
        ILI9341_WriteData(ili9341, data, sizeof(data));
 8000aba:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8000abe:	2204      	movs	r2, #4
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	f8d7 00b4 	ldr.w	r0, [r7, #180]	@ 0xb4
 8000ac6:	f7ff ff22 	bl	800090e <ILI9341_WriteData>
    }

    // PUMP RATIO CONTROL
    ILI9341_WriteCommand(ili9341, 0xF7);
 8000aca:	21f7      	movs	r1, #247	@ 0xf7
 8000acc:	f8d7 00b4 	ldr.w	r0, [r7, #180]	@ 0xb4
 8000ad0:	f7ff ff03 	bl	80008da <ILI9341_WriteCommand>
    {
        uint8_t data[] = {0x20};
 8000ad4:	2320      	movs	r3, #32
 8000ad6:	f887 306c 	strb.w	r3, [r7, #108]	@ 0x6c
        ILI9341_WriteData(ili9341, data, sizeof(data));
 8000ada:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8000ade:	2201      	movs	r2, #1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	f8d7 00b4 	ldr.w	r0, [r7, #180]	@ 0xb4
 8000ae6:	f7ff ff12 	bl	800090e <ILI9341_WriteData>
    }

    // POWER CONTROL,VRH[5:0]
    ILI9341_WriteCommand(ili9341, 0xC0);
 8000aea:	21c0      	movs	r1, #192	@ 0xc0
 8000aec:	f8d7 00b4 	ldr.w	r0, [r7, #180]	@ 0xb4
 8000af0:	f7ff fef3 	bl	80008da <ILI9341_WriteCommand>
    {
        uint8_t data[] = {0x23};
 8000af4:	2323      	movs	r3, #35	@ 0x23
 8000af6:	f887 3068 	strb.w	r3, [r7, #104]	@ 0x68
        ILI9341_WriteData(ili9341, data, sizeof(data));
 8000afa:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8000afe:	2201      	movs	r2, #1
 8000b00:	4619      	mov	r1, r3
 8000b02:	f8d7 00b4 	ldr.w	r0, [r7, #180]	@ 0xb4
 8000b06:	f7ff ff02 	bl	800090e <ILI9341_WriteData>
    }

    // POWER CONTROL,SAP[2:0];BT[3:0]
    ILI9341_WriteCommand(ili9341, 0xC1);
 8000b0a:	21c1      	movs	r1, #193	@ 0xc1
 8000b0c:	f8d7 00b4 	ldr.w	r0, [r7, #180]	@ 0xb4
 8000b10:	f7ff fee3 	bl	80008da <ILI9341_WriteCommand>
    {
        uint8_t data[] = {0x10};
 8000b14:	2310      	movs	r3, #16
 8000b16:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
        ILI9341_WriteData(ili9341, data, sizeof(data));
 8000b1a:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000b1e:	2201      	movs	r2, #1
 8000b20:	4619      	mov	r1, r3
 8000b22:	f8d7 00b4 	ldr.w	r0, [r7, #180]	@ 0xb4
 8000b26:	f7ff fef2 	bl	800090e <ILI9341_WriteData>
    }

    // VCM CONTROL
    ILI9341_WriteCommand(ili9341, 0xC5);
 8000b2a:	21c5      	movs	r1, #197	@ 0xc5
 8000b2c:	f8d7 00b4 	ldr.w	r0, [r7, #180]	@ 0xb4
 8000b30:	f7ff fed3 	bl	80008da <ILI9341_WriteCommand>
    {
        uint8_t data[] = {0x3E, 0x28};
 8000b34:	f642 033e 	movw	r3, #10302	@ 0x283e
 8000b38:	f8a7 3060 	strh.w	r3, [r7, #96]	@ 0x60
        ILI9341_WriteData(ili9341, data, sizeof(data));
 8000b3c:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8000b40:	2202      	movs	r2, #2
 8000b42:	4619      	mov	r1, r3
 8000b44:	f8d7 00b4 	ldr.w	r0, [r7, #180]	@ 0xb4
 8000b48:	f7ff fee1 	bl	800090e <ILI9341_WriteData>
    }

    // VCM CONTROL 2
    ILI9341_WriteCommand(ili9341, 0xC7);
 8000b4c:	21c7      	movs	r1, #199	@ 0xc7
 8000b4e:	f8d7 00b4 	ldr.w	r0, [r7, #180]	@ 0xb4
 8000b52:	f7ff fec2 	bl	80008da <ILI9341_WriteCommand>
    {
        uint8_t data[] = {0x86};
 8000b56:	2386      	movs	r3, #134	@ 0x86
 8000b58:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
        ILI9341_WriteData(ili9341, data, sizeof(data));
 8000b5c:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8000b60:	2201      	movs	r2, #1
 8000b62:	4619      	mov	r1, r3
 8000b64:	f8d7 00b4 	ldr.w	r0, [r7, #180]	@ 0xb4
 8000b68:	f7ff fed1 	bl	800090e <ILI9341_WriteData>
    }

    // MEMORY ACCESS CONTROL
    ILI9341_WriteCommand(ili9341, 0x36);
 8000b6c:	2136      	movs	r1, #54	@ 0x36
 8000b6e:	f8d7 00b4 	ldr.w	r0, [r7, #180]	@ 0xb4
 8000b72:	f7ff feb2 	bl	80008da <ILI9341_WriteCommand>
    {
        uint8_t data[] = {0x48};
 8000b76:	2348      	movs	r3, #72	@ 0x48
 8000b78:	f887 3058 	strb.w	r3, [r7, #88]	@ 0x58
        ILI9341_WriteData(ili9341, data, sizeof(data));
 8000b7c:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8000b80:	2201      	movs	r2, #1
 8000b82:	4619      	mov	r1, r3
 8000b84:	f8d7 00b4 	ldr.w	r0, [r7, #180]	@ 0xb4
 8000b88:	f7ff fec1 	bl	800090e <ILI9341_WriteData>
    }

    // PIXEL FORMAT
    ILI9341_WriteCommand(ili9341, 0x3A);
 8000b8c:	213a      	movs	r1, #58	@ 0x3a
 8000b8e:	f8d7 00b4 	ldr.w	r0, [r7, #180]	@ 0xb4
 8000b92:	f7ff fea2 	bl	80008da <ILI9341_WriteCommand>
    {
        uint8_t data[] = {0x55};
 8000b96:	2355      	movs	r3, #85	@ 0x55
 8000b98:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
        ILI9341_WriteData(ili9341, data, sizeof(data));
 8000b9c:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000ba0:	2201      	movs	r2, #1
 8000ba2:	4619      	mov	r1, r3
 8000ba4:	f8d7 00b4 	ldr.w	r0, [r7, #180]	@ 0xb4
 8000ba8:	f7ff feb1 	bl	800090e <ILI9341_WriteData>
    }

    // FRAME RATIO CONTROL, STANDARD RGB COLOR
    ILI9341_WriteCommand(ili9341, 0xB1);
 8000bac:	21b1      	movs	r1, #177	@ 0xb1
 8000bae:	f8d7 00b4 	ldr.w	r0, [r7, #180]	@ 0xb4
 8000bb2:	f7ff fe92 	bl	80008da <ILI9341_WriteCommand>
    {
        uint8_t data[] = {0x00, 0x18};
 8000bb6:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8000bba:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50
        ILI9341_WriteData(ili9341, data, sizeof(data));
 8000bbe:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8000bc2:	2202      	movs	r2, #2
 8000bc4:	4619      	mov	r1, r3
 8000bc6:	f8d7 00b4 	ldr.w	r0, [r7, #180]	@ 0xb4
 8000bca:	f7ff fea0 	bl	800090e <ILI9341_WriteData>
    }

    // DISPLAY FUNCTION CONTROL
    ILI9341_WriteCommand(ili9341, 0xB6);
 8000bce:	21b6      	movs	r1, #182	@ 0xb6
 8000bd0:	f8d7 00b4 	ldr.w	r0, [r7, #180]	@ 0xb4
 8000bd4:	f7ff fe81 	bl	80008da <ILI9341_WriteCommand>
    {
        uint8_t data[] = {0x08, 0x82, 0x27};
 8000bd8:	4a6c      	ldr	r2, [pc, #432]	@ (8000d8c <ILI9341_Init+0x420>)
 8000bda:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8000bde:	6812      	ldr	r2, [r2, #0]
 8000be0:	4611      	mov	r1, r2
 8000be2:	8019      	strh	r1, [r3, #0]
 8000be4:	3302      	adds	r3, #2
 8000be6:	0c12      	lsrs	r2, r2, #16
 8000be8:	701a      	strb	r2, [r3, #0]
        ILI9341_WriteData(ili9341, data, sizeof(data));
 8000bea:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8000bee:	2203      	movs	r2, #3
 8000bf0:	4619      	mov	r1, r3
 8000bf2:	f8d7 00b4 	ldr.w	r0, [r7, #180]	@ 0xb4
 8000bf6:	f7ff fe8a 	bl	800090e <ILI9341_WriteData>
    }

    // 3GAMMA FUNCTION DISABLE
    ILI9341_WriteCommand(ili9341, 0xF2);
 8000bfa:	21f2      	movs	r1, #242	@ 0xf2
 8000bfc:	f8d7 00b4 	ldr.w	r0, [r7, #180]	@ 0xb4
 8000c00:	f7ff fe6b 	bl	80008da <ILI9341_WriteCommand>
    {
        uint8_t data[] = {0x00};
 8000c04:	2300      	movs	r3, #0
 8000c06:	f887 3048 	strb.w	r3, [r7, #72]	@ 0x48
        ILI9341_WriteData(ili9341, data, sizeof(data));
 8000c0a:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8000c0e:	2201      	movs	r2, #1
 8000c10:	4619      	mov	r1, r3
 8000c12:	f8d7 00b4 	ldr.w	r0, [r7, #180]	@ 0xb4
 8000c16:	f7ff fe7a 	bl	800090e <ILI9341_WriteData>
    }

    // GAMMA CURVE SELECTED
    ILI9341_WriteCommand(ili9341, 0x26);
 8000c1a:	2126      	movs	r1, #38	@ 0x26
 8000c1c:	f8d7 00b4 	ldr.w	r0, [r7, #180]	@ 0xb4
 8000c20:	f7ff fe5b 	bl	80008da <ILI9341_WriteCommand>
    {
        uint8_t data[] = {0x01};
 8000c24:	2301      	movs	r3, #1
 8000c26:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
        ILI9341_WriteData(ili9341, data, sizeof(data));
 8000c2a:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8000c2e:	2201      	movs	r2, #1
 8000c30:	4619      	mov	r1, r3
 8000c32:	f8d7 00b4 	ldr.w	r0, [r7, #180]	@ 0xb4
 8000c36:	f7ff fe6a 	bl	800090e <ILI9341_WriteData>
    }

    // POSITIVE GAMMA CORRECTION
    ILI9341_WriteCommand(ili9341, 0xE0);
 8000c3a:	21e0      	movs	r1, #224	@ 0xe0
 8000c3c:	f8d7 00b4 	ldr.w	r0, [r7, #180]	@ 0xb4
 8000c40:	f7ff fe4b 	bl	80008da <ILI9341_WriteCommand>
    {
        uint8_t data[] = {0x0F, 0x31, 0x2B, 0x0C, 0x0E, 0x08, 0x4E, 0xF1, 0x37, 0x07, 0x10, 0x03, 0x0E, 0x09, 0x00};
 8000c44:	4b52      	ldr	r3, [pc, #328]	@ (8000d90 <ILI9341_Init+0x424>)
 8000c46:	f107 0434 	add.w	r4, r7, #52	@ 0x34
 8000c4a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000c4c:	c407      	stmia	r4!, {r0, r1, r2}
 8000c4e:	8023      	strh	r3, [r4, #0]
 8000c50:	3402      	adds	r4, #2
 8000c52:	0c1b      	lsrs	r3, r3, #16
 8000c54:	7023      	strb	r3, [r4, #0]
        ILI9341_WriteData(ili9341, data, sizeof(data));
 8000c56:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8000c5a:	220f      	movs	r2, #15
 8000c5c:	4619      	mov	r1, r3
 8000c5e:	f8d7 00b4 	ldr.w	r0, [r7, #180]	@ 0xb4
 8000c62:	f7ff fe54 	bl	800090e <ILI9341_WriteData>
    }

    // NEGATIVE GAMMA CORRECTION
    ILI9341_WriteCommand(ili9341, 0xE1);
 8000c66:	21e1      	movs	r1, #225	@ 0xe1
 8000c68:	f8d7 00b4 	ldr.w	r0, [r7, #180]	@ 0xb4
 8000c6c:	f7ff fe35 	bl	80008da <ILI9341_WriteCommand>
    {
        uint8_t data[] = {0x00, 0x0E, 0x14, 0x03, 0x11, 0x07, 0x31, 0xC1, 0x48, 0x08, 0x0F, 0x0C, 0x31, 0x36, 0x0F};
 8000c70:	4b48      	ldr	r3, [pc, #288]	@ (8000d94 <ILI9341_Init+0x428>)
 8000c72:	f107 0424 	add.w	r4, r7, #36	@ 0x24
 8000c76:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000c78:	c407      	stmia	r4!, {r0, r1, r2}
 8000c7a:	8023      	strh	r3, [r4, #0]
 8000c7c:	3402      	adds	r4, #2
 8000c7e:	0c1b      	lsrs	r3, r3, #16
 8000c80:	7023      	strb	r3, [r4, #0]
        ILI9341_WriteData(ili9341, data, sizeof(data));
 8000c82:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c86:	220f      	movs	r2, #15
 8000c88:	4619      	mov	r1, r3
 8000c8a:	f8d7 00b4 	ldr.w	r0, [r7, #180]	@ 0xb4
 8000c8e:	f7ff fe3e 	bl	800090e <ILI9341_WriteData>
    }

    // EXIT SLEEP
    ILI9341_WriteCommand(ili9341, 0x11);
 8000c92:	2111      	movs	r1, #17
 8000c94:	f8d7 00b4 	ldr.w	r0, [r7, #180]	@ 0xb4
 8000c98:	f7ff fe1f 	bl	80008da <ILI9341_WriteCommand>
    HAL_Delay(120);
 8000c9c:	2078      	movs	r0, #120	@ 0x78
 8000c9e:	f000 fd3b 	bl	8001718 <HAL_Delay>

    // TURN ON DISPLAY
    ILI9341_WriteCommand(ili9341, 0x29);
 8000ca2:	2129      	movs	r1, #41	@ 0x29
 8000ca4:	f8d7 00b4 	ldr.w	r0, [r7, #180]	@ 0xb4
 8000ca8:	f7ff fe17 	bl	80008da <ILI9341_WriteCommand>

    // MADCTL
    ILI9341_WriteCommand(ili9341, 0x36);
 8000cac:	2136      	movs	r1, #54	@ 0x36
 8000cae:	f8d7 00b4 	ldr.w	r0, [r7, #180]	@ 0xb4
 8000cb2:	f7ff fe12 	bl	80008da <ILI9341_WriteCommand>
    switch (ili9341->rotation) {
 8000cb6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8000cba:	69db      	ldr	r3, [r3, #28]
 8000cbc:	2b03      	cmp	r3, #3
 8000cbe:	d848      	bhi.n	8000d52 <ILI9341_Init+0x3e6>
 8000cc0:	a201      	add	r2, pc, #4	@ (adr r2, 8000cc8 <ILI9341_Init+0x35c>)
 8000cc2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000cc6:	bf00      	nop
 8000cc8:	08000cd9 	.word	0x08000cd9
 8000ccc:	08000cf9 	.word	0x08000cf9
 8000cd0:	08000d17 	.word	0x08000d17
 8000cd4:	08000d35 	.word	0x08000d35
        case ILI9341_ROTATION_VERTICAL_1: {
            uint8_t rotation = ILI9341_MADCTL_MX | ILI9341_MADCTL_BGR;
 8000cd8:	2348      	movs	r3, #72	@ 0x48
 8000cda:	f887 30b0 	strb.w	r3, [r7, #176]	@ 0xb0
            uint8_t data[] = {rotation};
 8000cde:	f897 30b0 	ldrb.w	r3, [r7, #176]	@ 0xb0
 8000ce2:	f887 3020 	strb.w	r3, [r7, #32]
            ILI9341_WriteData(ili9341, data, sizeof(data));
 8000ce6:	f107 0320 	add.w	r3, r7, #32
 8000cea:	2201      	movs	r2, #1
 8000cec:	4619      	mov	r1, r3
 8000cee:	f8d7 00b4 	ldr.w	r0, [r7, #180]	@ 0xb4
 8000cf2:	f7ff fe0c 	bl	800090e <ILI9341_WriteData>
            break;
 8000cf6:	e02d      	b.n	8000d54 <ILI9341_Init+0x3e8>
        }
        case ILI9341_ROTATION_HORIZONTAL_1: {
            uint8_t rotation = ILI9341_MADCTL_MX | ILI9341_MADCTL_MY | ILI9341_MADCTL_MV | ILI9341_MADCTL_BGR;
 8000cf8:	23e8      	movs	r3, #232	@ 0xe8
 8000cfa:	f887 30b1 	strb.w	r3, [r7, #177]	@ 0xb1
            uint8_t data[] = {rotation};
 8000cfe:	f897 30b1 	ldrb.w	r3, [r7, #177]	@ 0xb1
 8000d02:	773b      	strb	r3, [r7, #28]
            ILI9341_WriteData(ili9341, data, sizeof(data));
 8000d04:	f107 031c 	add.w	r3, r7, #28
 8000d08:	2201      	movs	r2, #1
 8000d0a:	4619      	mov	r1, r3
 8000d0c:	f8d7 00b4 	ldr.w	r0, [r7, #180]	@ 0xb4
 8000d10:	f7ff fdfd 	bl	800090e <ILI9341_WriteData>
            break;
 8000d14:	e01e      	b.n	8000d54 <ILI9341_Init+0x3e8>
        }
        case ILI9341_ROTATION_HORIZONTAL_2: {
            uint8_t rotation = ILI9341_MADCTL_MV | ILI9341_MADCTL_BGR;
 8000d16:	2328      	movs	r3, #40	@ 0x28
 8000d18:	f887 30b2 	strb.w	r3, [r7, #178]	@ 0xb2
            uint8_t data[] = {rotation};
 8000d1c:	f897 30b2 	ldrb.w	r3, [r7, #178]	@ 0xb2
 8000d20:	763b      	strb	r3, [r7, #24]
            ILI9341_WriteData(ili9341, data, sizeof(data));
 8000d22:	f107 0318 	add.w	r3, r7, #24
 8000d26:	2201      	movs	r2, #1
 8000d28:	4619      	mov	r1, r3
 8000d2a:	f8d7 00b4 	ldr.w	r0, [r7, #180]	@ 0xb4
 8000d2e:	f7ff fdee 	bl	800090e <ILI9341_WriteData>
            break;
 8000d32:	e00f      	b.n	8000d54 <ILI9341_Init+0x3e8>
        }
        case ILI9341_ROTATION_VERTICAL_2: {
            uint8_t rotation = ILI9341_MADCTL_MY | ILI9341_MADCTL_BGR;
 8000d34:	2388      	movs	r3, #136	@ 0x88
 8000d36:	f887 30b3 	strb.w	r3, [r7, #179]	@ 0xb3
            uint8_t data[] = {rotation};
 8000d3a:	f897 30b3 	ldrb.w	r3, [r7, #179]	@ 0xb3
 8000d3e:	753b      	strb	r3, [r7, #20]
            ILI9341_WriteData(ili9341, data, sizeof(data));
 8000d40:	f107 0314 	add.w	r3, r7, #20
 8000d44:	2201      	movs	r2, #1
 8000d46:	4619      	mov	r1, r3
 8000d48:	f8d7 00b4 	ldr.w	r0, [r7, #180]	@ 0xb4
 8000d4c:	f7ff fddf 	bl	800090e <ILI9341_WriteData>
            break;
 8000d50:	e000      	b.n	8000d54 <ILI9341_Init+0x3e8>
        }

        default:
            break;
 8000d52:	bf00      	nop
    }

    ILI9341_Deselect(ili9341);
 8000d54:	f8d7 00b4 	ldr.w	r0, [r7, #180]	@ 0xb4
 8000d58:	f7ff fd94 	bl	8000884 <ILI9341_Deselect>

    return ili9341_instance;
 8000d5c:	68fb      	ldr	r3, [r7, #12]
 8000d5e:	461d      	mov	r5, r3
 8000d60:	f107 0488 	add.w	r4, r7, #136	@ 0x88
 8000d64:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000d66:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000d68:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000d6a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000d6c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000d70:	e885 0003 	stmia.w	r5, {r0, r1}
}
 8000d74:	68f8      	ldr	r0, [r7, #12]
 8000d76:	37b8      	adds	r7, #184	@ 0xb8
 8000d78:	46bd      	mov	sp, r7
 8000d7a:	bdb0      	pop	{r4, r5, r7, pc}
 8000d7c:	0800536c 	.word	0x0800536c
 8000d80:	08005374 	.word	0x08005374
 8000d84:	08005378 	.word	0x08005378
 8000d88:	81120364 	.word	0x81120364
 8000d8c:	0800537c 	.word	0x0800537c
 8000d90:	08005380 	.word	0x08005380
 8000d94:	08005390 	.word	0x08005390

08000d98 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d98:	b5b0      	push	{r4, r5, r7, lr}
 8000d9a:	b094      	sub	sp, #80	@ 0x50
 8000d9c:	af08      	add	r7, sp, #32
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d9e:	f000 fc5e 	bl	800165e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000da2:	f000 f8d5 	bl	8000f50 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000da6:	f7ff fc39 	bl	800061c <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000daa:	f000 fb9f 	bl	80014ec <MX_USART3_UART_Init>
  MX_TIM2_Init();
 8000dae:	f000 fb2b 	bl	8001408 <MX_TIM2_Init>
  MX_SPI5_Init();
 8000db2:	f000 f9f5 	bl	80011a0 <MX_SPI5_Init>
  /* USER CODE BEGIN 2 */
  ili9341 = ILI9341_Init(
 8000db6:	4c5c      	ldr	r4, [pc, #368]	@ (8000f28 <main+0x190>)
 8000db8:	4638      	mov	r0, r7
 8000dba:	23f0      	movs	r3, #240	@ 0xf0
 8000dbc:	9306      	str	r3, [sp, #24]
 8000dbe:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 8000dc2:	9305      	str	r3, [sp, #20]
 8000dc4:	2301      	movs	r3, #1
 8000dc6:	9304      	str	r3, [sp, #16]
 8000dc8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000dcc:	9303      	str	r3, [sp, #12]
 8000dce:	4b57      	ldr	r3, [pc, #348]	@ (8000f2c <main+0x194>)
 8000dd0:	9302      	str	r3, [sp, #8]
 8000dd2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000dd6:	9301      	str	r3, [sp, #4]
 8000dd8:	4b54      	ldr	r3, [pc, #336]	@ (8000f2c <main+0x194>)
 8000dda:	9300      	str	r3, [sp, #0]
 8000ddc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000de0:	4a52      	ldr	r2, [pc, #328]	@ (8000f2c <main+0x194>)
 8000de2:	4953      	ldr	r1, [pc, #332]	@ (8000f30 <main+0x198>)
 8000de4:	f7ff fdc2 	bl	800096c <ILI9341_Init>
 8000de8:	4625      	mov	r5, r4
 8000dea:	463c      	mov	r4, r7
 8000dec:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000dee:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000df0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000df2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000df4:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000df8:	e885 0003 	stmia.w	r5, {r0, r1}
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  transmitStringUART("Program started. Current State: %s\r\n", stateNames[STATE]);
 8000dfc:	4b4d      	ldr	r3, [pc, #308]	@ (8000f34 <main+0x19c>)
 8000dfe:	781b      	ldrb	r3, [r3, #0]
 8000e00:	461a      	mov	r2, r3
 8000e02:	4b4d      	ldr	r3, [pc, #308]	@ (8000f38 <main+0x1a0>)
 8000e04:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e08:	4619      	mov	r1, r3
 8000e0a:	484c      	ldr	r0, [pc, #304]	@ (8000f3c <main+0x1a4>)
 8000e0c:	f000 f910 	bl	8001030 <transmitStringUART>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
//	  ILI9341_FillScreen(&ili9341, ILI9341_COLOR_RED);

	  const uint8_t joystickUp = HAL_GPIO_ReadPin(GPIOF, GPIO_PIN_13);
 8000e10:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000e14:	484a      	ldr	r0, [pc, #296]	@ (8000f40 <main+0x1a8>)
 8000e16:	f000 ff61 	bl	8001cdc <HAL_GPIO_ReadPin>
 8000e1a:	4603      	mov	r3, r0
 8000e1c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	  const uint8_t joystickDown = HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_9);
 8000e20:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000e24:	4847      	ldr	r0, [pc, #284]	@ (8000f44 <main+0x1ac>)
 8000e26:	f000 ff59 	bl	8001cdc <HAL_GPIO_ReadPin>
 8000e2a:	4603      	mov	r3, r0
 8000e2c:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
	  const uint8_t joystickLeft = HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_11);
 8000e30:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000e34:	4843      	ldr	r0, [pc, #268]	@ (8000f44 <main+0x1ac>)
 8000e36:	f000 ff51 	bl	8001cdc <HAL_GPIO_ReadPin>
 8000e3a:	4603      	mov	r3, r0
 8000e3c:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
	  const uint8_t joystickRight = HAL_GPIO_ReadPin(GPIOF, GPIO_PIN_14);
 8000e40:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000e44:	483e      	ldr	r0, [pc, #248]	@ (8000f40 <main+0x1a8>)
 8000e46:	f000 ff49 	bl	8001cdc <HAL_GPIO_ReadPin>
 8000e4a:	4603      	mov	r3, r0
 8000e4c:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c

	  transmitStringUART("Up = %d | Down = %d | Left = %d | Right = %d \r\n", joystickUp, joystickDown, joystickLeft, joystickRight);
 8000e50:	f897 102f 	ldrb.w	r1, [r7, #47]	@ 0x2f
 8000e54:	f897 202e 	ldrb.w	r2, [r7, #46]	@ 0x2e
 8000e58:	f897 002d 	ldrb.w	r0, [r7, #45]	@ 0x2d
 8000e5c:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8000e60:	9300      	str	r3, [sp, #0]
 8000e62:	4603      	mov	r3, r0
 8000e64:	4838      	ldr	r0, [pc, #224]	@ (8000f48 <main+0x1b0>)
 8000e66:	f000 f8e3 	bl	8001030 <transmitStringUART>


	  if (!joystickLeft) {
 8000e6a:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	d10c      	bne.n	8000e8c <main+0xf4>
		  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_13, 0);
 8000e72:	2200      	movs	r2, #0
 8000e74:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000e78:	4832      	ldr	r0, [pc, #200]	@ (8000f44 <main+0x1ac>)
 8000e7a:	f000 ff47 	bl	8001d0c <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_15, 1);
 8000e7e:	2201      	movs	r2, #1
 8000e80:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000e84:	482e      	ldr	r0, [pc, #184]	@ (8000f40 <main+0x1a8>)
 8000e86:	f000 ff41 	bl	8001d0c <HAL_GPIO_WritePin>
 8000e8a:	e01c      	b.n	8000ec6 <main+0x12e>
	  }
	  else if (!joystickRight) {
 8000e8c:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	d10c      	bne.n	8000eae <main+0x116>
		  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_13, 1);
 8000e94:	2201      	movs	r2, #1
 8000e96:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000e9a:	482a      	ldr	r0, [pc, #168]	@ (8000f44 <main+0x1ac>)
 8000e9c:	f000 ff36 	bl	8001d0c <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_15, 0);
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000ea6:	4826      	ldr	r0, [pc, #152]	@ (8000f40 <main+0x1a8>)
 8000ea8:	f000 ff30 	bl	8001d0c <HAL_GPIO_WritePin>
 8000eac:	e00b      	b.n	8000ec6 <main+0x12e>
	  }
	  else {
		  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_13, 0);
 8000eae:	2200      	movs	r2, #0
 8000eb0:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000eb4:	4823      	ldr	r0, [pc, #140]	@ (8000f44 <main+0x1ac>)
 8000eb6:	f000 ff29 	bl	8001d0c <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_15, 0);
 8000eba:	2200      	movs	r2, #0
 8000ebc:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000ec0:	481f      	ldr	r0, [pc, #124]	@ (8000f40 <main+0x1a8>)
 8000ec2:	f000 ff23 	bl	8001d0c <HAL_GPIO_WritePin>
	  }

	  if (!joystickUp) {
 8000ec6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	d10c      	bne.n	8000ee8 <main+0x150>
		  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_14, 1);
 8000ece:	2201      	movs	r2, #1
 8000ed0:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000ed4:	481d      	ldr	r0, [pc, #116]	@ (8000f4c <main+0x1b4>)
 8000ed6:	f000 ff19 	bl	8001d0c <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_9, 0);
 8000eda:	2200      	movs	r2, #0
 8000edc:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000ee0:	481a      	ldr	r0, [pc, #104]	@ (8000f4c <main+0x1b4>)
 8000ee2:	f000 ff13 	bl	8001d0c <HAL_GPIO_WritePin>
	  }
	  else {
		  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_14, 0);
		  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_9, 0);
	  }
	  continue;
 8000ee6:	e01c      	b.n	8000f22 <main+0x18a>
	  else if (!joystickDown) {
 8000ee8:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	d10c      	bne.n	8000f0a <main+0x172>
		  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_14, 0);
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000ef6:	4815      	ldr	r0, [pc, #84]	@ (8000f4c <main+0x1b4>)
 8000ef8:	f000 ff08 	bl	8001d0c <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_9, 1);
 8000efc:	2201      	movs	r2, #1
 8000efe:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000f02:	4812      	ldr	r0, [pc, #72]	@ (8000f4c <main+0x1b4>)
 8000f04:	f000 ff02 	bl	8001d0c <HAL_GPIO_WritePin>
	  continue;
 8000f08:	e00b      	b.n	8000f22 <main+0x18a>
		  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_14, 0);
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000f10:	480e      	ldr	r0, [pc, #56]	@ (8000f4c <main+0x1b4>)
 8000f12:	f000 fefb 	bl	8001d0c <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_9, 0);
 8000f16:	2200      	movs	r2, #0
 8000f18:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000f1c:	480b      	ldr	r0, [pc, #44]	@ (8000f4c <main+0x1b4>)
 8000f1e:	f000 fef5 	bl	8001d0c <HAL_GPIO_WritePin>
	  continue;
 8000f22:	bf00      	nop
  {
 8000f24:	e774      	b.n	8000e10 <main+0x78>
 8000f26:	bf00      	nop
 8000f28:	20000090 	.word	0x20000090
 8000f2c:	40020800 	.word	0x40020800
 8000f30:	200000bc 	.word	0x200000bc
 8000f34:	2000008d 	.word	0x2000008d
 8000f38:	20000000 	.word	0x20000000
 8000f3c:	080053a0 	.word	0x080053a0
 8000f40:	40021400 	.word	0x40021400
 8000f44:	40021000 	.word	0x40021000
 8000f48:	080053c8 	.word	0x080053c8
 8000f4c:	40021800 	.word	0x40021800

08000f50 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	b094      	sub	sp, #80	@ 0x50
 8000f54:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f56:	f107 031c 	add.w	r3, r7, #28
 8000f5a:	2234      	movs	r2, #52	@ 0x34
 8000f5c:	2100      	movs	r1, #0
 8000f5e:	4618      	mov	r0, r3
 8000f60:	f003 fd7a 	bl	8004a58 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f64:	f107 0308 	add.w	r3, r7, #8
 8000f68:	2200      	movs	r2, #0
 8000f6a:	601a      	str	r2, [r3, #0]
 8000f6c:	605a      	str	r2, [r3, #4]
 8000f6e:	609a      	str	r2, [r3, #8]
 8000f70:	60da      	str	r2, [r3, #12]
 8000f72:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000f74:	f000 fefc 	bl	8001d70 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f78:	4b2b      	ldr	r3, [pc, #172]	@ (8001028 <SystemClock_Config+0xd8>)
 8000f7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f7c:	4a2a      	ldr	r2, [pc, #168]	@ (8001028 <SystemClock_Config+0xd8>)
 8000f7e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000f82:	6413      	str	r3, [r2, #64]	@ 0x40
 8000f84:	4b28      	ldr	r3, [pc, #160]	@ (8001028 <SystemClock_Config+0xd8>)
 8000f86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f88:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000f8c:	607b      	str	r3, [r7, #4]
 8000f8e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000f90:	4b26      	ldr	r3, [pc, #152]	@ (800102c <SystemClock_Config+0xdc>)
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	4a25      	ldr	r2, [pc, #148]	@ (800102c <SystemClock_Config+0xdc>)
 8000f96:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000f9a:	6013      	str	r3, [r2, #0]
 8000f9c:	4b23      	ldr	r3, [pc, #140]	@ (800102c <SystemClock_Config+0xdc>)
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000fa4:	603b      	str	r3, [r7, #0]
 8000fa6:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000fa8:	2302      	movs	r3, #2
 8000faa:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000fac:	2301      	movs	r3, #1
 8000fae:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000fb0:	2310      	movs	r3, #16
 8000fb2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000fb4:	2302      	movs	r3, #2
 8000fb6:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000fb8:	2300      	movs	r3, #0
 8000fba:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000fbc:	2308      	movs	r3, #8
 8000fbe:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 216;
 8000fc0:	23d8      	movs	r3, #216	@ 0xd8
 8000fc2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000fc4:	2302      	movs	r3, #2
 8000fc6:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 9;
 8000fc8:	2309      	movs	r3, #9
 8000fca:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000fcc:	2302      	movs	r3, #2
 8000fce:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000fd0:	f107 031c 	add.w	r3, r7, #28
 8000fd4:	4618      	mov	r0, r3
 8000fd6:	f000 ff2b 	bl	8001e30 <HAL_RCC_OscConfig>
 8000fda:	4603      	mov	r3, r0
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d001      	beq.n	8000fe4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000fe0:	f000 f8d8 	bl	8001194 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000fe4:	f000 fed4 	bl	8001d90 <HAL_PWREx_EnableOverDrive>
 8000fe8:	4603      	mov	r3, r0
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d001      	beq.n	8000ff2 <SystemClock_Config+0xa2>
  {
    Error_Handler();
 8000fee:	f000 f8d1 	bl	8001194 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ff2:	230f      	movs	r3, #15
 8000ff4:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ff6:	2302      	movs	r3, #2
 8000ff8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000ffe:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001002:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001004:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001008:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 800100a:	f107 0308 	add.w	r3, r7, #8
 800100e:	2107      	movs	r1, #7
 8001010:	4618      	mov	r0, r3
 8001012:	f001 f9bb 	bl	800238c <HAL_RCC_ClockConfig>
 8001016:	4603      	mov	r3, r0
 8001018:	2b00      	cmp	r3, #0
 800101a:	d001      	beq.n	8001020 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 800101c:	f000 f8ba 	bl	8001194 <Error_Handler>
  }
}
 8001020:	bf00      	nop
 8001022:	3750      	adds	r7, #80	@ 0x50
 8001024:	46bd      	mov	sp, r7
 8001026:	bd80      	pop	{r7, pc}
 8001028:	40023800 	.word	0x40023800
 800102c:	40007000 	.word	0x40007000

08001030 <transmitStringUART>:

/* USER CODE BEGIN 4 */

void transmitStringUART(const char* format, ...){
 8001030:	b40f      	push	{r0, r1, r2, r3}
 8001032:	b580      	push	{r7, lr}
 8001034:	b0a2      	sub	sp, #136	@ 0x88
 8001036:	af00      	add	r7, sp, #0
	char buf[128];

	va_list args;
	va_start(args, format);
 8001038:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 800103c:	607b      	str	r3, [r7, #4]
	vsnprintf(buf, sizeof(buf), format, args);
 800103e:	f107 0008 	add.w	r0, r7, #8
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 8001048:	2180      	movs	r1, #128	@ 0x80
 800104a:	f003 fcf7 	bl	8004a3c <vsniprintf>
	va_end(args);

	HAL_UART_Transmit(&huart3, (uint8_t*)buf, strlen(buf), 50);
 800104e:	f107 0308 	add.w	r3, r7, #8
 8001052:	4618      	mov	r0, r3
 8001054:	f7ff f8f4 	bl	8000240 <strlen>
 8001058:	4603      	mov	r3, r0
 800105a:	b29a      	uxth	r2, r3
 800105c:	f107 0108 	add.w	r1, r7, #8
 8001060:	2332      	movs	r3, #50	@ 0x32
 8001062:	4805      	ldr	r0, [pc, #20]	@ (8001078 <transmitStringUART+0x48>)
 8001064:	f003 f81e 	bl	80040a4 <HAL_UART_Transmit>
}
 8001068:	bf00      	nop
 800106a:	3788      	adds	r7, #136	@ 0x88
 800106c:	46bd      	mov	sp, r7
 800106e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001072:	b004      	add	sp, #16
 8001074:	4770      	bx	lr
 8001076:	bf00      	nop
 8001078:	20000170 	.word	0x20000170

0800107c <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	b082      	sub	sp, #8
 8001080:	af00      	add	r7, sp, #0
 8001082:	4603      	mov	r3, r0
 8001084:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == GPIO_PIN_8)
 8001086:	88fb      	ldrh	r3, [r7, #6]
 8001088:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800108c:	d115      	bne.n	80010ba <HAL_GPIO_EXTI_Callback+0x3e>
	{
		if (STATE == IDLE || STATE == WAIT_COIN){
 800108e:	4b17      	ldr	r3, [pc, #92]	@ (80010ec <HAL_GPIO_EXTI_Callback+0x70>)
 8001090:	781b      	ldrb	r3, [r3, #0]
 8001092:	2b00      	cmp	r3, #0
 8001094:	d003      	beq.n	800109e <HAL_GPIO_EXTI_Callback+0x22>
 8001096:	4b15      	ldr	r3, [pc, #84]	@ (80010ec <HAL_GPIO_EXTI_Callback+0x70>)
 8001098:	781b      	ldrb	r3, [r3, #0]
 800109a:	2b01      	cmp	r3, #1
 800109c:	d122      	bne.n	80010e4 <HAL_GPIO_EXTI_Callback+0x68>
			currentCoinAmount += COIN_VALUE;
 800109e:	4b14      	ldr	r3, [pc, #80]	@ (80010f0 <HAL_GPIO_EXTI_Callback+0x74>)
 80010a0:	781b      	ldrb	r3, [r3, #0]
 80010a2:	2205      	movs	r2, #5
 80010a4:	4413      	add	r3, r2
 80010a6:	b2da      	uxtb	r2, r3
 80010a8:	4b11      	ldr	r3, [pc, #68]	@ (80010f0 <HAL_GPIO_EXTI_Callback+0x74>)
 80010aa:	701a      	strb	r2, [r3, #0]
			transmitStringUART("Coin Detected | Current Coin Amount: %d\r\n", currentCoinAmount);
 80010ac:	4b10      	ldr	r3, [pc, #64]	@ (80010f0 <HAL_GPIO_EXTI_Callback+0x74>)
 80010ae:	781b      	ldrb	r3, [r3, #0]
 80010b0:	4619      	mov	r1, r3
 80010b2:	4810      	ldr	r0, [pc, #64]	@ (80010f4 <HAL_GPIO_EXTI_Callback+0x78>)
 80010b4:	f7ff ffbc 	bl	8001030 <transmitStringUART>
		if (STATE == WAIT_CONFIRM){
			STATE = GAME;
			transmitStringUART("State changed to %s\r\n", stateNames[STATE]);
		}
	}
}
 80010b8:	e014      	b.n	80010e4 <HAL_GPIO_EXTI_Callback+0x68>
	else if (GPIO_Pin == GPIO_PIN_9)
 80010ba:	88fb      	ldrh	r3, [r7, #6]
 80010bc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80010c0:	d110      	bne.n	80010e4 <HAL_GPIO_EXTI_Callback+0x68>
		if (STATE == WAIT_CONFIRM){
 80010c2:	4b0a      	ldr	r3, [pc, #40]	@ (80010ec <HAL_GPIO_EXTI_Callback+0x70>)
 80010c4:	781b      	ldrb	r3, [r3, #0]
 80010c6:	2b02      	cmp	r3, #2
 80010c8:	d10c      	bne.n	80010e4 <HAL_GPIO_EXTI_Callback+0x68>
			STATE = GAME;
 80010ca:	4b08      	ldr	r3, [pc, #32]	@ (80010ec <HAL_GPIO_EXTI_Callback+0x70>)
 80010cc:	2203      	movs	r2, #3
 80010ce:	701a      	strb	r2, [r3, #0]
			transmitStringUART("State changed to %s\r\n", stateNames[STATE]);
 80010d0:	4b06      	ldr	r3, [pc, #24]	@ (80010ec <HAL_GPIO_EXTI_Callback+0x70>)
 80010d2:	781b      	ldrb	r3, [r3, #0]
 80010d4:	461a      	mov	r2, r3
 80010d6:	4b08      	ldr	r3, [pc, #32]	@ (80010f8 <HAL_GPIO_EXTI_Callback+0x7c>)
 80010d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80010dc:	4619      	mov	r1, r3
 80010de:	4807      	ldr	r0, [pc, #28]	@ (80010fc <HAL_GPIO_EXTI_Callback+0x80>)
 80010e0:	f7ff ffa6 	bl	8001030 <transmitStringUART>
}
 80010e4:	bf00      	nop
 80010e6:	3708      	adds	r7, #8
 80010e8:	46bd      	mov	sp, r7
 80010ea:	bd80      	pop	{r7, pc}
 80010ec:	2000008d 	.word	0x2000008d
 80010f0:	2000008c 	.word	0x2000008c
 80010f4:	080053f8 	.word	0x080053f8
 80010f8:	20000000 	.word	0x20000000
 80010fc:	08005424 	.word	0x08005424

08001100 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8001100:	b580      	push	{r7, lr}
 8001102:	b082      	sub	sp, #8
 8001104:	af00      	add	r7, sp, #0
 8001106:	6078      	str	r0, [r7, #4]
	static int timeCount = 0;
	if (htim -> Instance == TIM2){
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001110:	d130      	bne.n	8001174 <HAL_TIM_PeriodElapsedCallback+0x74>
		if (STATE == WAIT_COIN) {
 8001112:	4b1a      	ldr	r3, [pc, #104]	@ (800117c <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8001114:	781b      	ldrb	r3, [r3, #0]
 8001116:	2b01      	cmp	r3, #1
 8001118:	d12c      	bne.n	8001174 <HAL_TIM_PeriodElapsedCallback+0x74>
			timeCount++;
 800111a:	4b19      	ldr	r3, [pc, #100]	@ (8001180 <HAL_TIM_PeriodElapsedCallback+0x80>)
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	3301      	adds	r3, #1
 8001120:	4a17      	ldr	r2, [pc, #92]	@ (8001180 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8001122:	6013      	str	r3, [r2, #0]
			timeCount%=11;
 8001124:	4b16      	ldr	r3, [pc, #88]	@ (8001180 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8001126:	6819      	ldr	r1, [r3, #0]
 8001128:	4b16      	ldr	r3, [pc, #88]	@ (8001184 <HAL_TIM_PeriodElapsedCallback+0x84>)
 800112a:	fb83 2301 	smull	r2, r3, r3, r1
 800112e:	105a      	asrs	r2, r3, #1
 8001130:	17cb      	asrs	r3, r1, #31
 8001132:	1ad2      	subs	r2, r2, r3
 8001134:	4613      	mov	r3, r2
 8001136:	009b      	lsls	r3, r3, #2
 8001138:	4413      	add	r3, r2
 800113a:	005b      	lsls	r3, r3, #1
 800113c:	4413      	add	r3, r2
 800113e:	1aca      	subs	r2, r1, r3
 8001140:	4b0f      	ldr	r3, [pc, #60]	@ (8001180 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8001142:	601a      	str	r2, [r3, #0]
			if (timeCount >= WAIT_COIN_TIME_LIMIT) {
 8001144:	230a      	movs	r3, #10
 8001146:	461a      	mov	r2, r3
 8001148:	4b0d      	ldr	r3, [pc, #52]	@ (8001180 <HAL_TIM_PeriodElapsedCallback+0x80>)
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	429a      	cmp	r2, r3
 800114e:	dc11      	bgt.n	8001174 <HAL_TIM_PeriodElapsedCallback+0x74>
				currentCoinAmount = 0;
 8001150:	4b0d      	ldr	r3, [pc, #52]	@ (8001188 <HAL_TIM_PeriodElapsedCallback+0x88>)
 8001152:	2200      	movs	r2, #0
 8001154:	701a      	strb	r2, [r3, #0]
				STATE = IDLE;
 8001156:	4b09      	ldr	r3, [pc, #36]	@ (800117c <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8001158:	2200      	movs	r2, #0
 800115a:	701a      	strb	r2, [r3, #0]
				transmitStringUART("WAIT_COIN exceeded %d seconds | State changed to %s\r\n", WAIT_COIN_TIME_LIMIT, stateNames[STATE]);
 800115c:	230a      	movs	r3, #10
 800115e:	4619      	mov	r1, r3
 8001160:	4b06      	ldr	r3, [pc, #24]	@ (800117c <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8001162:	781b      	ldrb	r3, [r3, #0]
 8001164:	461a      	mov	r2, r3
 8001166:	4b09      	ldr	r3, [pc, #36]	@ (800118c <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8001168:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800116c:	461a      	mov	r2, r3
 800116e:	4808      	ldr	r0, [pc, #32]	@ (8001190 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8001170:	f7ff ff5e 	bl	8001030 <transmitStringUART>
			}
		}
	}
}
 8001174:	bf00      	nop
 8001176:	3708      	adds	r7, #8
 8001178:	46bd      	mov	sp, r7
 800117a:	bd80      	pop	{r7, pc}
 800117c:	2000008d 	.word	0x2000008d
 8001180:	200000b8 	.word	0x200000b8
 8001184:	2e8ba2e9 	.word	0x2e8ba2e9
 8001188:	2000008c 	.word	0x2000008c
 800118c:	20000000 	.word	0x20000000
 8001190:	0800543c 	.word	0x0800543c

08001194 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001194:	b480      	push	{r7}
 8001196:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001198:	b672      	cpsid	i
}
 800119a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800119c:	bf00      	nop
 800119e:	e7fd      	b.n	800119c <Error_Handler+0x8>

080011a0 <MX_SPI5_Init>:

SPI_HandleTypeDef hspi5;

/* SPI5 init function */
void MX_SPI5_Init(void)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	af00      	add	r7, sp, #0
  /* USER CODE END SPI5_Init 0 */

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  hspi5.Instance = SPI5;
 80011a4:	4b1b      	ldr	r3, [pc, #108]	@ (8001214 <MX_SPI5_Init+0x74>)
 80011a6:	4a1c      	ldr	r2, [pc, #112]	@ (8001218 <MX_SPI5_Init+0x78>)
 80011a8:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 80011aa:	4b1a      	ldr	r3, [pc, #104]	@ (8001214 <MX_SPI5_Init+0x74>)
 80011ac:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80011b0:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 80011b2:	4b18      	ldr	r3, [pc, #96]	@ (8001214 <MX_SPI5_Init+0x74>)
 80011b4:	2200      	movs	r2, #0
 80011b6:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 80011b8:	4b16      	ldr	r3, [pc, #88]	@ (8001214 <MX_SPI5_Init+0x74>)
 80011ba:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 80011be:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 80011c0:	4b14      	ldr	r3, [pc, #80]	@ (8001214 <MX_SPI5_Init+0x74>)
 80011c2:	2200      	movs	r2, #0
 80011c4:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 80011c6:	4b13      	ldr	r3, [pc, #76]	@ (8001214 <MX_SPI5_Init+0x74>)
 80011c8:	2200      	movs	r2, #0
 80011ca:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 80011cc:	4b11      	ldr	r3, [pc, #68]	@ (8001214 <MX_SPI5_Init+0x74>)
 80011ce:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80011d2:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80011d4:	4b0f      	ldr	r3, [pc, #60]	@ (8001214 <MX_SPI5_Init+0x74>)
 80011d6:	2200      	movs	r2, #0
 80011d8:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80011da:	4b0e      	ldr	r3, [pc, #56]	@ (8001214 <MX_SPI5_Init+0x74>)
 80011dc:	2200      	movs	r2, #0
 80011de:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 80011e0:	4b0c      	ldr	r3, [pc, #48]	@ (8001214 <MX_SPI5_Init+0x74>)
 80011e2:	2200      	movs	r2, #0
 80011e4:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80011e6:	4b0b      	ldr	r3, [pc, #44]	@ (8001214 <MX_SPI5_Init+0x74>)
 80011e8:	2200      	movs	r2, #0
 80011ea:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi5.Init.CRCPolynomial = 7;
 80011ec:	4b09      	ldr	r3, [pc, #36]	@ (8001214 <MX_SPI5_Init+0x74>)
 80011ee:	2207      	movs	r2, #7
 80011f0:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi5.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80011f2:	4b08      	ldr	r3, [pc, #32]	@ (8001214 <MX_SPI5_Init+0x74>)
 80011f4:	2200      	movs	r2, #0
 80011f6:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi5.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80011f8:	4b06      	ldr	r3, [pc, #24]	@ (8001214 <MX_SPI5_Init+0x74>)
 80011fa:	2208      	movs	r2, #8
 80011fc:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 80011fe:	4805      	ldr	r0, [pc, #20]	@ (8001214 <MX_SPI5_Init+0x74>)
 8001200:	f001 ff12 	bl	8003028 <HAL_SPI_Init>
 8001204:	4603      	mov	r3, r0
 8001206:	2b00      	cmp	r3, #0
 8001208:	d001      	beq.n	800120e <MX_SPI5_Init+0x6e>
  {
    Error_Handler();
 800120a:	f7ff ffc3 	bl	8001194 <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 800120e:	bf00      	nop
 8001210:	bd80      	pop	{r7, pc}
 8001212:	bf00      	nop
 8001214:	200000bc 	.word	0x200000bc
 8001218:	40015000 	.word	0x40015000

0800121c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	b08a      	sub	sp, #40	@ 0x28
 8001220:	af00      	add	r7, sp, #0
 8001222:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001224:	f107 0314 	add.w	r3, r7, #20
 8001228:	2200      	movs	r2, #0
 800122a:	601a      	str	r2, [r3, #0]
 800122c:	605a      	str	r2, [r3, #4]
 800122e:	609a      	str	r2, [r3, #8]
 8001230:	60da      	str	r2, [r3, #12]
 8001232:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI5)
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	4a17      	ldr	r2, [pc, #92]	@ (8001298 <HAL_SPI_MspInit+0x7c>)
 800123a:	4293      	cmp	r3, r2
 800123c:	d128      	bne.n	8001290 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* SPI5 clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 800123e:	4b17      	ldr	r3, [pc, #92]	@ (800129c <HAL_SPI_MspInit+0x80>)
 8001240:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001242:	4a16      	ldr	r2, [pc, #88]	@ (800129c <HAL_SPI_MspInit+0x80>)
 8001244:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8001248:	6453      	str	r3, [r2, #68]	@ 0x44
 800124a:	4b14      	ldr	r3, [pc, #80]	@ (800129c <HAL_SPI_MspInit+0x80>)
 800124c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800124e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001252:	613b      	str	r3, [r7, #16]
 8001254:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001256:	4b11      	ldr	r3, [pc, #68]	@ (800129c <HAL_SPI_MspInit+0x80>)
 8001258:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800125a:	4a10      	ldr	r2, [pc, #64]	@ (800129c <HAL_SPI_MspInit+0x80>)
 800125c:	f043 0320 	orr.w	r3, r3, #32
 8001260:	6313      	str	r3, [r2, #48]	@ 0x30
 8001262:	4b0e      	ldr	r3, [pc, #56]	@ (800129c <HAL_SPI_MspInit+0x80>)
 8001264:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001266:	f003 0320 	and.w	r3, r3, #32
 800126a:	60fb      	str	r3, [r7, #12]
 800126c:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    GPIO_InitStruct.Pin = SCK_Pin|SDO_Pin|SDI_Pin;
 800126e:	f44f 7360 	mov.w	r3, #896	@ 0x380
 8001272:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001274:	2302      	movs	r3, #2
 8001276:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001278:	2300      	movs	r3, #0
 800127a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800127c:	2303      	movs	r3, #3
 800127e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8001280:	2305      	movs	r3, #5
 8001282:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001284:	f107 0314 	add.w	r3, r7, #20
 8001288:	4619      	mov	r1, r3
 800128a:	4805      	ldr	r0, [pc, #20]	@ (80012a0 <HAL_SPI_MspInit+0x84>)
 800128c:	f000 fb7a 	bl	8001984 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }
}
 8001290:	bf00      	nop
 8001292:	3728      	adds	r7, #40	@ 0x28
 8001294:	46bd      	mov	sp, r7
 8001296:	bd80      	pop	{r7, pc}
 8001298:	40015000 	.word	0x40015000
 800129c:	40023800 	.word	0x40023800
 80012a0:	40021400 	.word	0x40021400

080012a4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b082      	sub	sp, #8
 80012a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80012aa:	4b0f      	ldr	r3, [pc, #60]	@ (80012e8 <HAL_MspInit+0x44>)
 80012ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012ae:	4a0e      	ldr	r2, [pc, #56]	@ (80012e8 <HAL_MspInit+0x44>)
 80012b0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80012b4:	6413      	str	r3, [r2, #64]	@ 0x40
 80012b6:	4b0c      	ldr	r3, [pc, #48]	@ (80012e8 <HAL_MspInit+0x44>)
 80012b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012ba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80012be:	607b      	str	r3, [r7, #4]
 80012c0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012c2:	4b09      	ldr	r3, [pc, #36]	@ (80012e8 <HAL_MspInit+0x44>)
 80012c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012c6:	4a08      	ldr	r2, [pc, #32]	@ (80012e8 <HAL_MspInit+0x44>)
 80012c8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80012cc:	6453      	str	r3, [r2, #68]	@ 0x44
 80012ce:	4b06      	ldr	r3, [pc, #24]	@ (80012e8 <HAL_MspInit+0x44>)
 80012d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012d2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80012d6:	603b      	str	r3, [r7, #0]
 80012d8:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_2);
 80012da:	2005      	movs	r0, #5
 80012dc:	f000 fb10 	bl	8001900 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80012e0:	bf00      	nop
 80012e2:	3708      	adds	r7, #8
 80012e4:	46bd      	mov	sp, r7
 80012e6:	bd80      	pop	{r7, pc}
 80012e8:	40023800 	.word	0x40023800

080012ec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80012ec:	b480      	push	{r7}
 80012ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80012f0:	bf00      	nop
 80012f2:	e7fd      	b.n	80012f0 <NMI_Handler+0x4>

080012f4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80012f4:	b480      	push	{r7}
 80012f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80012f8:	bf00      	nop
 80012fa:	e7fd      	b.n	80012f8 <HardFault_Handler+0x4>

080012fc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80012fc:	b480      	push	{r7}
 80012fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001300:	bf00      	nop
 8001302:	e7fd      	b.n	8001300 <MemManage_Handler+0x4>

08001304 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001304:	b480      	push	{r7}
 8001306:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001308:	bf00      	nop
 800130a:	e7fd      	b.n	8001308 <BusFault_Handler+0x4>

0800130c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800130c:	b480      	push	{r7}
 800130e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001310:	bf00      	nop
 8001312:	e7fd      	b.n	8001310 <UsageFault_Handler+0x4>

08001314 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001314:	b480      	push	{r7}
 8001316:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001318:	bf00      	nop
 800131a:	46bd      	mov	sp, r7
 800131c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001320:	4770      	bx	lr

08001322 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001322:	b480      	push	{r7}
 8001324:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001326:	bf00      	nop
 8001328:	46bd      	mov	sp, r7
 800132a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800132e:	4770      	bx	lr

08001330 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001330:	b480      	push	{r7}
 8001332:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001334:	bf00      	nop
 8001336:	46bd      	mov	sp, r7
 8001338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133c:	4770      	bx	lr

0800133e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800133e:	b580      	push	{r7, lr}
 8001340:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001342:	f000 f9c9 	bl	80016d8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001346:	bf00      	nop
 8001348:	bd80      	pop	{r7, pc}

0800134a <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 800134a:	b580      	push	{r7, lr}
 800134c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 800134e:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8001352:	f000 fcf5 	bl	8001d40 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 8001356:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800135a:	f000 fcf1 	bl	8001d40 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800135e:	bf00      	nop
 8001360:	bd80      	pop	{r7, pc}
	...

08001364 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001368:	4802      	ldr	r0, [pc, #8]	@ (8001374 <TIM2_IRQHandler+0x10>)
 800136a:	f002 fa56 	bl	800381a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800136e:	bf00      	nop
 8001370:	bd80      	pop	{r7, pc}
 8001372:	bf00      	nop
 8001374:	20000124 	.word	0x20000124

08001378 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001378:	b580      	push	{r7, lr}
 800137a:	b086      	sub	sp, #24
 800137c:	af00      	add	r7, sp, #0
 800137e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001380:	4a14      	ldr	r2, [pc, #80]	@ (80013d4 <_sbrk+0x5c>)
 8001382:	4b15      	ldr	r3, [pc, #84]	@ (80013d8 <_sbrk+0x60>)
 8001384:	1ad3      	subs	r3, r2, r3
 8001386:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001388:	697b      	ldr	r3, [r7, #20]
 800138a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800138c:	4b13      	ldr	r3, [pc, #76]	@ (80013dc <_sbrk+0x64>)
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	2b00      	cmp	r3, #0
 8001392:	d102      	bne.n	800139a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001394:	4b11      	ldr	r3, [pc, #68]	@ (80013dc <_sbrk+0x64>)
 8001396:	4a12      	ldr	r2, [pc, #72]	@ (80013e0 <_sbrk+0x68>)
 8001398:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800139a:	4b10      	ldr	r3, [pc, #64]	@ (80013dc <_sbrk+0x64>)
 800139c:	681a      	ldr	r2, [r3, #0]
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	4413      	add	r3, r2
 80013a2:	693a      	ldr	r2, [r7, #16]
 80013a4:	429a      	cmp	r2, r3
 80013a6:	d207      	bcs.n	80013b8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80013a8:	f003 fb5e 	bl	8004a68 <__errno>
 80013ac:	4603      	mov	r3, r0
 80013ae:	220c      	movs	r2, #12
 80013b0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80013b2:	f04f 33ff 	mov.w	r3, #4294967295
 80013b6:	e009      	b.n	80013cc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80013b8:	4b08      	ldr	r3, [pc, #32]	@ (80013dc <_sbrk+0x64>)
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80013be:	4b07      	ldr	r3, [pc, #28]	@ (80013dc <_sbrk+0x64>)
 80013c0:	681a      	ldr	r2, [r3, #0]
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	4413      	add	r3, r2
 80013c6:	4a05      	ldr	r2, [pc, #20]	@ (80013dc <_sbrk+0x64>)
 80013c8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80013ca:	68fb      	ldr	r3, [r7, #12]
}
 80013cc:	4618      	mov	r0, r3
 80013ce:	3718      	adds	r7, #24
 80013d0:	46bd      	mov	sp, r7
 80013d2:	bd80      	pop	{r7, pc}
 80013d4:	20080000 	.word	0x20080000
 80013d8:	00000400 	.word	0x00000400
 80013dc:	20000120 	.word	0x20000120
 80013e0:	20000348 	.word	0x20000348

080013e4 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80013e4:	b480      	push	{r7}
 80013e6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80013e8:	4b06      	ldr	r3, [pc, #24]	@ (8001404 <SystemInit+0x20>)
 80013ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80013ee:	4a05      	ldr	r2, [pc, #20]	@ (8001404 <SystemInit+0x20>)
 80013f0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80013f4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80013f8:	bf00      	nop
 80013fa:	46bd      	mov	sp, r7
 80013fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001400:	4770      	bx	lr
 8001402:	bf00      	nop
 8001404:	e000ed00 	.word	0xe000ed00

08001408 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	b088      	sub	sp, #32
 800140c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800140e:	f107 0310 	add.w	r3, r7, #16
 8001412:	2200      	movs	r2, #0
 8001414:	601a      	str	r2, [r3, #0]
 8001416:	605a      	str	r2, [r3, #4]
 8001418:	609a      	str	r2, [r3, #8]
 800141a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800141c:	1d3b      	adds	r3, r7, #4
 800141e:	2200      	movs	r2, #0
 8001420:	601a      	str	r2, [r3, #0]
 8001422:	605a      	str	r2, [r3, #4]
 8001424:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001426:	4b1d      	ldr	r3, [pc, #116]	@ (800149c <MX_TIM2_Init+0x94>)
 8001428:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800142c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 108-1;
 800142e:	4b1b      	ldr	r3, [pc, #108]	@ (800149c <MX_TIM2_Init+0x94>)
 8001430:	226b      	movs	r2, #107	@ 0x6b
 8001432:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001434:	4b19      	ldr	r3, [pc, #100]	@ (800149c <MX_TIM2_Init+0x94>)
 8001436:	2200      	movs	r2, #0
 8001438:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000000-1;
 800143a:	4b18      	ldr	r3, [pc, #96]	@ (800149c <MX_TIM2_Init+0x94>)
 800143c:	4a18      	ldr	r2, [pc, #96]	@ (80014a0 <MX_TIM2_Init+0x98>)
 800143e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001440:	4b16      	ldr	r3, [pc, #88]	@ (800149c <MX_TIM2_Init+0x94>)
 8001442:	2200      	movs	r2, #0
 8001444:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001446:	4b15      	ldr	r3, [pc, #84]	@ (800149c <MX_TIM2_Init+0x94>)
 8001448:	2200      	movs	r2, #0
 800144a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800144c:	4813      	ldr	r0, [pc, #76]	@ (800149c <MX_TIM2_Init+0x94>)
 800144e:	f002 f98d 	bl	800376c <HAL_TIM_Base_Init>
 8001452:	4603      	mov	r3, r0
 8001454:	2b00      	cmp	r3, #0
 8001456:	d001      	beq.n	800145c <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001458:	f7ff fe9c 	bl	8001194 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800145c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001460:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001462:	f107 0310 	add.w	r3, r7, #16
 8001466:	4619      	mov	r1, r3
 8001468:	480c      	ldr	r0, [pc, #48]	@ (800149c <MX_TIM2_Init+0x94>)
 800146a:	f002 faf5 	bl	8003a58 <HAL_TIM_ConfigClockSource>
 800146e:	4603      	mov	r3, r0
 8001470:	2b00      	cmp	r3, #0
 8001472:	d001      	beq.n	8001478 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001474:	f7ff fe8e 	bl	8001194 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001478:	2300      	movs	r3, #0
 800147a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800147c:	2300      	movs	r3, #0
 800147e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001480:	1d3b      	adds	r3, r7, #4
 8001482:	4619      	mov	r1, r3
 8001484:	4805      	ldr	r0, [pc, #20]	@ (800149c <MX_TIM2_Init+0x94>)
 8001486:	f002 fd13 	bl	8003eb0 <HAL_TIMEx_MasterConfigSynchronization>
 800148a:	4603      	mov	r3, r0
 800148c:	2b00      	cmp	r3, #0
 800148e:	d001      	beq.n	8001494 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001490:	f7ff fe80 	bl	8001194 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001494:	bf00      	nop
 8001496:	3720      	adds	r7, #32
 8001498:	46bd      	mov	sp, r7
 800149a:	bd80      	pop	{r7, pc}
 800149c:	20000124 	.word	0x20000124
 80014a0:	000f423f 	.word	0x000f423f

080014a4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	b084      	sub	sp, #16
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80014b4:	d113      	bne.n	80014de <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80014b6:	4b0c      	ldr	r3, [pc, #48]	@ (80014e8 <HAL_TIM_Base_MspInit+0x44>)
 80014b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014ba:	4a0b      	ldr	r2, [pc, #44]	@ (80014e8 <HAL_TIM_Base_MspInit+0x44>)
 80014bc:	f043 0301 	orr.w	r3, r3, #1
 80014c0:	6413      	str	r3, [r2, #64]	@ 0x40
 80014c2:	4b09      	ldr	r3, [pc, #36]	@ (80014e8 <HAL_TIM_Base_MspInit+0x44>)
 80014c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014c6:	f003 0301 	and.w	r3, r3, #1
 80014ca:	60fb      	str	r3, [r7, #12]
 80014cc:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 1, 0);
 80014ce:	2200      	movs	r2, #0
 80014d0:	2101      	movs	r1, #1
 80014d2:	201c      	movs	r0, #28
 80014d4:	f000 fa1f 	bl	8001916 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80014d8:	201c      	movs	r0, #28
 80014da:	f000 fa38 	bl	800194e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 80014de:	bf00      	nop
 80014e0:	3710      	adds	r7, #16
 80014e2:	46bd      	mov	sp, r7
 80014e4:	bd80      	pop	{r7, pc}
 80014e6:	bf00      	nop
 80014e8:	40023800 	.word	0x40023800

080014ec <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80014ec:	b580      	push	{r7, lr}
 80014ee:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80014f0:	4b14      	ldr	r3, [pc, #80]	@ (8001544 <MX_USART3_UART_Init+0x58>)
 80014f2:	4a15      	ldr	r2, [pc, #84]	@ (8001548 <MX_USART3_UART_Init+0x5c>)
 80014f4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80014f6:	4b13      	ldr	r3, [pc, #76]	@ (8001544 <MX_USART3_UART_Init+0x58>)
 80014f8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80014fc:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80014fe:	4b11      	ldr	r3, [pc, #68]	@ (8001544 <MX_USART3_UART_Init+0x58>)
 8001500:	2200      	movs	r2, #0
 8001502:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001504:	4b0f      	ldr	r3, [pc, #60]	@ (8001544 <MX_USART3_UART_Init+0x58>)
 8001506:	2200      	movs	r2, #0
 8001508:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800150a:	4b0e      	ldr	r3, [pc, #56]	@ (8001544 <MX_USART3_UART_Init+0x58>)
 800150c:	2200      	movs	r2, #0
 800150e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001510:	4b0c      	ldr	r3, [pc, #48]	@ (8001544 <MX_USART3_UART_Init+0x58>)
 8001512:	220c      	movs	r2, #12
 8001514:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001516:	4b0b      	ldr	r3, [pc, #44]	@ (8001544 <MX_USART3_UART_Init+0x58>)
 8001518:	2200      	movs	r2, #0
 800151a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800151c:	4b09      	ldr	r3, [pc, #36]	@ (8001544 <MX_USART3_UART_Init+0x58>)
 800151e:	2200      	movs	r2, #0
 8001520:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001522:	4b08      	ldr	r3, [pc, #32]	@ (8001544 <MX_USART3_UART_Init+0x58>)
 8001524:	2200      	movs	r2, #0
 8001526:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001528:	4b06      	ldr	r3, [pc, #24]	@ (8001544 <MX_USART3_UART_Init+0x58>)
 800152a:	2200      	movs	r2, #0
 800152c:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800152e:	4805      	ldr	r0, [pc, #20]	@ (8001544 <MX_USART3_UART_Init+0x58>)
 8001530:	f002 fd6a 	bl	8004008 <HAL_UART_Init>
 8001534:	4603      	mov	r3, r0
 8001536:	2b00      	cmp	r3, #0
 8001538:	d001      	beq.n	800153e <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 800153a:	f7ff fe2b 	bl	8001194 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800153e:	bf00      	nop
 8001540:	bd80      	pop	{r7, pc}
 8001542:	bf00      	nop
 8001544:	20000170 	.word	0x20000170
 8001548:	40004800 	.word	0x40004800

0800154c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800154c:	b580      	push	{r7, lr}
 800154e:	b0ae      	sub	sp, #184	@ 0xb8
 8001550:	af00      	add	r7, sp, #0
 8001552:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001554:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001558:	2200      	movs	r2, #0
 800155a:	601a      	str	r2, [r3, #0]
 800155c:	605a      	str	r2, [r3, #4]
 800155e:	609a      	str	r2, [r3, #8]
 8001560:	60da      	str	r2, [r3, #12]
 8001562:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001564:	f107 0314 	add.w	r3, r7, #20
 8001568:	2290      	movs	r2, #144	@ 0x90
 800156a:	2100      	movs	r1, #0
 800156c:	4618      	mov	r0, r3
 800156e:	f003 fa73 	bl	8004a58 <memset>
  if(uartHandle->Instance==USART3)
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	4a22      	ldr	r2, [pc, #136]	@ (8001600 <HAL_UART_MspInit+0xb4>)
 8001578:	4293      	cmp	r3, r2
 800157a:	d13c      	bne.n	80015f6 <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 800157c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001580:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001582:	2300      	movs	r3, #0
 8001584:	663b      	str	r3, [r7, #96]	@ 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001586:	f107 0314 	add.w	r3, r7, #20
 800158a:	4618      	mov	r0, r3
 800158c:	f001 f924 	bl	80027d8 <HAL_RCCEx_PeriphCLKConfig>
 8001590:	4603      	mov	r3, r0
 8001592:	2b00      	cmp	r3, #0
 8001594:	d001      	beq.n	800159a <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8001596:	f7ff fdfd 	bl	8001194 <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800159a:	4b1a      	ldr	r3, [pc, #104]	@ (8001604 <HAL_UART_MspInit+0xb8>)
 800159c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800159e:	4a19      	ldr	r2, [pc, #100]	@ (8001604 <HAL_UART_MspInit+0xb8>)
 80015a0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80015a4:	6413      	str	r3, [r2, #64]	@ 0x40
 80015a6:	4b17      	ldr	r3, [pc, #92]	@ (8001604 <HAL_UART_MspInit+0xb8>)
 80015a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015aa:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80015ae:	613b      	str	r3, [r7, #16]
 80015b0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80015b2:	4b14      	ldr	r3, [pc, #80]	@ (8001604 <HAL_UART_MspInit+0xb8>)
 80015b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015b6:	4a13      	ldr	r2, [pc, #76]	@ (8001604 <HAL_UART_MspInit+0xb8>)
 80015b8:	f043 0308 	orr.w	r3, r3, #8
 80015bc:	6313      	str	r3, [r2, #48]	@ 0x30
 80015be:	4b11      	ldr	r3, [pc, #68]	@ (8001604 <HAL_UART_MspInit+0xb8>)
 80015c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015c2:	f003 0308 	and.w	r3, r3, #8
 80015c6:	60fb      	str	r3, [r7, #12]
 80015c8:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80015ca:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80015ce:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015d2:	2302      	movs	r3, #2
 80015d4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015d8:	2300      	movs	r3, #0
 80015da:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015de:	2303      	movs	r3, #3
 80015e0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80015e4:	2307      	movs	r3, #7
 80015e6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80015ea:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80015ee:	4619      	mov	r1, r3
 80015f0:	4805      	ldr	r0, [pc, #20]	@ (8001608 <HAL_UART_MspInit+0xbc>)
 80015f2:	f000 f9c7 	bl	8001984 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80015f6:	bf00      	nop
 80015f8:	37b8      	adds	r7, #184	@ 0xb8
 80015fa:	46bd      	mov	sp, r7
 80015fc:	bd80      	pop	{r7, pc}
 80015fe:	bf00      	nop
 8001600:	40004800 	.word	0x40004800
 8001604:	40023800 	.word	0x40023800
 8001608:	40020c00 	.word	0x40020c00

0800160c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800160c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001644 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001610:	480d      	ldr	r0, [pc, #52]	@ (8001648 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001612:	490e      	ldr	r1, [pc, #56]	@ (800164c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001614:	4a0e      	ldr	r2, [pc, #56]	@ (8001650 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001616:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001618:	e002      	b.n	8001620 <LoopCopyDataInit>

0800161a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800161a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800161c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800161e:	3304      	adds	r3, #4

08001620 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001620:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001622:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001624:	d3f9      	bcc.n	800161a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001626:	4a0b      	ldr	r2, [pc, #44]	@ (8001654 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001628:	4c0b      	ldr	r4, [pc, #44]	@ (8001658 <LoopFillZerobss+0x26>)
  movs r3, #0
 800162a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800162c:	e001      	b.n	8001632 <LoopFillZerobss>

0800162e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800162e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001630:	3204      	adds	r2, #4

08001632 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001632:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001634:	d3fb      	bcc.n	800162e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001636:	f7ff fed5 	bl	80013e4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800163a:	f003 fa1b 	bl	8004a74 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800163e:	f7ff fbab 	bl	8000d98 <main>
  bx  lr    
 8001642:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001644:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8001648:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800164c:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001650:	08005504 	.word	0x08005504
  ldr r2, =_sbss
 8001654:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001658:	20000344 	.word	0x20000344

0800165c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800165c:	e7fe      	b.n	800165c <ADC_IRQHandler>

0800165e <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800165e:	b580      	push	{r7, lr}
 8001660:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001662:	2003      	movs	r0, #3
 8001664:	f000 f94c 	bl	8001900 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001668:	2000      	movs	r0, #0
 800166a:	f000 f805 	bl	8001678 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800166e:	f7ff fe19 	bl	80012a4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001672:	2300      	movs	r3, #0
}
 8001674:	4618      	mov	r0, r3
 8001676:	bd80      	pop	{r7, pc}

08001678 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	b082      	sub	sp, #8
 800167c:	af00      	add	r7, sp, #0
 800167e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001680:	4b12      	ldr	r3, [pc, #72]	@ (80016cc <HAL_InitTick+0x54>)
 8001682:	681a      	ldr	r2, [r3, #0]
 8001684:	4b12      	ldr	r3, [pc, #72]	@ (80016d0 <HAL_InitTick+0x58>)
 8001686:	781b      	ldrb	r3, [r3, #0]
 8001688:	4619      	mov	r1, r3
 800168a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800168e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001692:	fbb2 f3f3 	udiv	r3, r2, r3
 8001696:	4618      	mov	r0, r3
 8001698:	f000 f967 	bl	800196a <HAL_SYSTICK_Config>
 800169c:	4603      	mov	r3, r0
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d001      	beq.n	80016a6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80016a2:	2301      	movs	r3, #1
 80016a4:	e00e      	b.n	80016c4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	2b0f      	cmp	r3, #15
 80016aa:	d80a      	bhi.n	80016c2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80016ac:	2200      	movs	r2, #0
 80016ae:	6879      	ldr	r1, [r7, #4]
 80016b0:	f04f 30ff 	mov.w	r0, #4294967295
 80016b4:	f000 f92f 	bl	8001916 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80016b8:	4a06      	ldr	r2, [pc, #24]	@ (80016d4 <HAL_InitTick+0x5c>)
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80016be:	2300      	movs	r3, #0
 80016c0:	e000      	b.n	80016c4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80016c2:	2301      	movs	r3, #1
}
 80016c4:	4618      	mov	r0, r3
 80016c6:	3708      	adds	r7, #8
 80016c8:	46bd      	mov	sp, r7
 80016ca:	bd80      	pop	{r7, pc}
 80016cc:	20000014 	.word	0x20000014
 80016d0:	2000001c 	.word	0x2000001c
 80016d4:	20000018 	.word	0x20000018

080016d8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80016d8:	b480      	push	{r7}
 80016da:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80016dc:	4b06      	ldr	r3, [pc, #24]	@ (80016f8 <HAL_IncTick+0x20>)
 80016de:	781b      	ldrb	r3, [r3, #0]
 80016e0:	461a      	mov	r2, r3
 80016e2:	4b06      	ldr	r3, [pc, #24]	@ (80016fc <HAL_IncTick+0x24>)
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	4413      	add	r3, r2
 80016e8:	4a04      	ldr	r2, [pc, #16]	@ (80016fc <HAL_IncTick+0x24>)
 80016ea:	6013      	str	r3, [r2, #0]
}
 80016ec:	bf00      	nop
 80016ee:	46bd      	mov	sp, r7
 80016f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f4:	4770      	bx	lr
 80016f6:	bf00      	nop
 80016f8:	2000001c 	.word	0x2000001c
 80016fc:	200001f8 	.word	0x200001f8

08001700 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001700:	b480      	push	{r7}
 8001702:	af00      	add	r7, sp, #0
  return uwTick;
 8001704:	4b03      	ldr	r3, [pc, #12]	@ (8001714 <HAL_GetTick+0x14>)
 8001706:	681b      	ldr	r3, [r3, #0]
}
 8001708:	4618      	mov	r0, r3
 800170a:	46bd      	mov	sp, r7
 800170c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001710:	4770      	bx	lr
 8001712:	bf00      	nop
 8001714:	200001f8 	.word	0x200001f8

08001718 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001718:	b580      	push	{r7, lr}
 800171a:	b084      	sub	sp, #16
 800171c:	af00      	add	r7, sp, #0
 800171e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001720:	f7ff ffee 	bl	8001700 <HAL_GetTick>
 8001724:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800172a:	68fb      	ldr	r3, [r7, #12]
 800172c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001730:	d005      	beq.n	800173e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001732:	4b0a      	ldr	r3, [pc, #40]	@ (800175c <HAL_Delay+0x44>)
 8001734:	781b      	ldrb	r3, [r3, #0]
 8001736:	461a      	mov	r2, r3
 8001738:	68fb      	ldr	r3, [r7, #12]
 800173a:	4413      	add	r3, r2
 800173c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800173e:	bf00      	nop
 8001740:	f7ff ffde 	bl	8001700 <HAL_GetTick>
 8001744:	4602      	mov	r2, r0
 8001746:	68bb      	ldr	r3, [r7, #8]
 8001748:	1ad3      	subs	r3, r2, r3
 800174a:	68fa      	ldr	r2, [r7, #12]
 800174c:	429a      	cmp	r2, r3
 800174e:	d8f7      	bhi.n	8001740 <HAL_Delay+0x28>
  {
  }
}
 8001750:	bf00      	nop
 8001752:	bf00      	nop
 8001754:	3710      	adds	r7, #16
 8001756:	46bd      	mov	sp, r7
 8001758:	bd80      	pop	{r7, pc}
 800175a:	bf00      	nop
 800175c:	2000001c 	.word	0x2000001c

08001760 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001760:	b480      	push	{r7}
 8001762:	b085      	sub	sp, #20
 8001764:	af00      	add	r7, sp, #0
 8001766:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	f003 0307 	and.w	r3, r3, #7
 800176e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001770:	4b0b      	ldr	r3, [pc, #44]	@ (80017a0 <__NVIC_SetPriorityGrouping+0x40>)
 8001772:	68db      	ldr	r3, [r3, #12]
 8001774:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001776:	68ba      	ldr	r2, [r7, #8]
 8001778:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800177c:	4013      	ands	r3, r2
 800177e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001784:	68bb      	ldr	r3, [r7, #8]
 8001786:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001788:	4b06      	ldr	r3, [pc, #24]	@ (80017a4 <__NVIC_SetPriorityGrouping+0x44>)
 800178a:	4313      	orrs	r3, r2
 800178c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800178e:	4a04      	ldr	r2, [pc, #16]	@ (80017a0 <__NVIC_SetPriorityGrouping+0x40>)
 8001790:	68bb      	ldr	r3, [r7, #8]
 8001792:	60d3      	str	r3, [r2, #12]
}
 8001794:	bf00      	nop
 8001796:	3714      	adds	r7, #20
 8001798:	46bd      	mov	sp, r7
 800179a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179e:	4770      	bx	lr
 80017a0:	e000ed00 	.word	0xe000ed00
 80017a4:	05fa0000 	.word	0x05fa0000

080017a8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80017a8:	b480      	push	{r7}
 80017aa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80017ac:	4b04      	ldr	r3, [pc, #16]	@ (80017c0 <__NVIC_GetPriorityGrouping+0x18>)
 80017ae:	68db      	ldr	r3, [r3, #12]
 80017b0:	0a1b      	lsrs	r3, r3, #8
 80017b2:	f003 0307 	and.w	r3, r3, #7
}
 80017b6:	4618      	mov	r0, r3
 80017b8:	46bd      	mov	sp, r7
 80017ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017be:	4770      	bx	lr
 80017c0:	e000ed00 	.word	0xe000ed00

080017c4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017c4:	b480      	push	{r7}
 80017c6:	b083      	sub	sp, #12
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	4603      	mov	r3, r0
 80017cc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	db0b      	blt.n	80017ee <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80017d6:	79fb      	ldrb	r3, [r7, #7]
 80017d8:	f003 021f 	and.w	r2, r3, #31
 80017dc:	4907      	ldr	r1, [pc, #28]	@ (80017fc <__NVIC_EnableIRQ+0x38>)
 80017de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017e2:	095b      	lsrs	r3, r3, #5
 80017e4:	2001      	movs	r0, #1
 80017e6:	fa00 f202 	lsl.w	r2, r0, r2
 80017ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80017ee:	bf00      	nop
 80017f0:	370c      	adds	r7, #12
 80017f2:	46bd      	mov	sp, r7
 80017f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f8:	4770      	bx	lr
 80017fa:	bf00      	nop
 80017fc:	e000e100 	.word	0xe000e100

08001800 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001800:	b480      	push	{r7}
 8001802:	b083      	sub	sp, #12
 8001804:	af00      	add	r7, sp, #0
 8001806:	4603      	mov	r3, r0
 8001808:	6039      	str	r1, [r7, #0]
 800180a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800180c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001810:	2b00      	cmp	r3, #0
 8001812:	db0a      	blt.n	800182a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001814:	683b      	ldr	r3, [r7, #0]
 8001816:	b2da      	uxtb	r2, r3
 8001818:	490c      	ldr	r1, [pc, #48]	@ (800184c <__NVIC_SetPriority+0x4c>)
 800181a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800181e:	0112      	lsls	r2, r2, #4
 8001820:	b2d2      	uxtb	r2, r2
 8001822:	440b      	add	r3, r1
 8001824:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001828:	e00a      	b.n	8001840 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800182a:	683b      	ldr	r3, [r7, #0]
 800182c:	b2da      	uxtb	r2, r3
 800182e:	4908      	ldr	r1, [pc, #32]	@ (8001850 <__NVIC_SetPriority+0x50>)
 8001830:	79fb      	ldrb	r3, [r7, #7]
 8001832:	f003 030f 	and.w	r3, r3, #15
 8001836:	3b04      	subs	r3, #4
 8001838:	0112      	lsls	r2, r2, #4
 800183a:	b2d2      	uxtb	r2, r2
 800183c:	440b      	add	r3, r1
 800183e:	761a      	strb	r2, [r3, #24]
}
 8001840:	bf00      	nop
 8001842:	370c      	adds	r7, #12
 8001844:	46bd      	mov	sp, r7
 8001846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184a:	4770      	bx	lr
 800184c:	e000e100 	.word	0xe000e100
 8001850:	e000ed00 	.word	0xe000ed00

08001854 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001854:	b480      	push	{r7}
 8001856:	b089      	sub	sp, #36	@ 0x24
 8001858:	af00      	add	r7, sp, #0
 800185a:	60f8      	str	r0, [r7, #12]
 800185c:	60b9      	str	r1, [r7, #8]
 800185e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	f003 0307 	and.w	r3, r3, #7
 8001866:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001868:	69fb      	ldr	r3, [r7, #28]
 800186a:	f1c3 0307 	rsb	r3, r3, #7
 800186e:	2b04      	cmp	r3, #4
 8001870:	bf28      	it	cs
 8001872:	2304      	movcs	r3, #4
 8001874:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001876:	69fb      	ldr	r3, [r7, #28]
 8001878:	3304      	adds	r3, #4
 800187a:	2b06      	cmp	r3, #6
 800187c:	d902      	bls.n	8001884 <NVIC_EncodePriority+0x30>
 800187e:	69fb      	ldr	r3, [r7, #28]
 8001880:	3b03      	subs	r3, #3
 8001882:	e000      	b.n	8001886 <NVIC_EncodePriority+0x32>
 8001884:	2300      	movs	r3, #0
 8001886:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001888:	f04f 32ff 	mov.w	r2, #4294967295
 800188c:	69bb      	ldr	r3, [r7, #24]
 800188e:	fa02 f303 	lsl.w	r3, r2, r3
 8001892:	43da      	mvns	r2, r3
 8001894:	68bb      	ldr	r3, [r7, #8]
 8001896:	401a      	ands	r2, r3
 8001898:	697b      	ldr	r3, [r7, #20]
 800189a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800189c:	f04f 31ff 	mov.w	r1, #4294967295
 80018a0:	697b      	ldr	r3, [r7, #20]
 80018a2:	fa01 f303 	lsl.w	r3, r1, r3
 80018a6:	43d9      	mvns	r1, r3
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018ac:	4313      	orrs	r3, r2
         );
}
 80018ae:	4618      	mov	r0, r3
 80018b0:	3724      	adds	r7, #36	@ 0x24
 80018b2:	46bd      	mov	sp, r7
 80018b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b8:	4770      	bx	lr
	...

080018bc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	b082      	sub	sp, #8
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	3b01      	subs	r3, #1
 80018c8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80018cc:	d301      	bcc.n	80018d2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80018ce:	2301      	movs	r3, #1
 80018d0:	e00f      	b.n	80018f2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80018d2:	4a0a      	ldr	r2, [pc, #40]	@ (80018fc <SysTick_Config+0x40>)
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	3b01      	subs	r3, #1
 80018d8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80018da:	210f      	movs	r1, #15
 80018dc:	f04f 30ff 	mov.w	r0, #4294967295
 80018e0:	f7ff ff8e 	bl	8001800 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80018e4:	4b05      	ldr	r3, [pc, #20]	@ (80018fc <SysTick_Config+0x40>)
 80018e6:	2200      	movs	r2, #0
 80018e8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80018ea:	4b04      	ldr	r3, [pc, #16]	@ (80018fc <SysTick_Config+0x40>)
 80018ec:	2207      	movs	r2, #7
 80018ee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80018f0:	2300      	movs	r3, #0
}
 80018f2:	4618      	mov	r0, r3
 80018f4:	3708      	adds	r7, #8
 80018f6:	46bd      	mov	sp, r7
 80018f8:	bd80      	pop	{r7, pc}
 80018fa:	bf00      	nop
 80018fc:	e000e010 	.word	0xe000e010

08001900 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001900:	b580      	push	{r7, lr}
 8001902:	b082      	sub	sp, #8
 8001904:	af00      	add	r7, sp, #0
 8001906:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001908:	6878      	ldr	r0, [r7, #4]
 800190a:	f7ff ff29 	bl	8001760 <__NVIC_SetPriorityGrouping>
}
 800190e:	bf00      	nop
 8001910:	3708      	adds	r7, #8
 8001912:	46bd      	mov	sp, r7
 8001914:	bd80      	pop	{r7, pc}

08001916 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001916:	b580      	push	{r7, lr}
 8001918:	b086      	sub	sp, #24
 800191a:	af00      	add	r7, sp, #0
 800191c:	4603      	mov	r3, r0
 800191e:	60b9      	str	r1, [r7, #8]
 8001920:	607a      	str	r2, [r7, #4]
 8001922:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001924:	2300      	movs	r3, #0
 8001926:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001928:	f7ff ff3e 	bl	80017a8 <__NVIC_GetPriorityGrouping>
 800192c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800192e:	687a      	ldr	r2, [r7, #4]
 8001930:	68b9      	ldr	r1, [r7, #8]
 8001932:	6978      	ldr	r0, [r7, #20]
 8001934:	f7ff ff8e 	bl	8001854 <NVIC_EncodePriority>
 8001938:	4602      	mov	r2, r0
 800193a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800193e:	4611      	mov	r1, r2
 8001940:	4618      	mov	r0, r3
 8001942:	f7ff ff5d 	bl	8001800 <__NVIC_SetPriority>
}
 8001946:	bf00      	nop
 8001948:	3718      	adds	r7, #24
 800194a:	46bd      	mov	sp, r7
 800194c:	bd80      	pop	{r7, pc}

0800194e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800194e:	b580      	push	{r7, lr}
 8001950:	b082      	sub	sp, #8
 8001952:	af00      	add	r7, sp, #0
 8001954:	4603      	mov	r3, r0
 8001956:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001958:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800195c:	4618      	mov	r0, r3
 800195e:	f7ff ff31 	bl	80017c4 <__NVIC_EnableIRQ>
}
 8001962:	bf00      	nop
 8001964:	3708      	adds	r7, #8
 8001966:	46bd      	mov	sp, r7
 8001968:	bd80      	pop	{r7, pc}

0800196a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800196a:	b580      	push	{r7, lr}
 800196c:	b082      	sub	sp, #8
 800196e:	af00      	add	r7, sp, #0
 8001970:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001972:	6878      	ldr	r0, [r7, #4]
 8001974:	f7ff ffa2 	bl	80018bc <SysTick_Config>
 8001978:	4603      	mov	r3, r0
}
 800197a:	4618      	mov	r0, r3
 800197c:	3708      	adds	r7, #8
 800197e:	46bd      	mov	sp, r7
 8001980:	bd80      	pop	{r7, pc}
	...

08001984 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001984:	b480      	push	{r7}
 8001986:	b089      	sub	sp, #36	@ 0x24
 8001988:	af00      	add	r7, sp, #0
 800198a:	6078      	str	r0, [r7, #4]
 800198c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800198e:	2300      	movs	r3, #0
 8001990:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8001992:	2300      	movs	r3, #0
 8001994:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001996:	2300      	movs	r3, #0
 8001998:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800199a:	2300      	movs	r3, #0
 800199c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800199e:	2300      	movs	r3, #0
 80019a0:	61fb      	str	r3, [r7, #28]
 80019a2:	e175      	b.n	8001c90 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80019a4:	2201      	movs	r2, #1
 80019a6:	69fb      	ldr	r3, [r7, #28]
 80019a8:	fa02 f303 	lsl.w	r3, r2, r3
 80019ac:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80019ae:	683b      	ldr	r3, [r7, #0]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	697a      	ldr	r2, [r7, #20]
 80019b4:	4013      	ands	r3, r2
 80019b6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80019b8:	693a      	ldr	r2, [r7, #16]
 80019ba:	697b      	ldr	r3, [r7, #20]
 80019bc:	429a      	cmp	r2, r3
 80019be:	f040 8164 	bne.w	8001c8a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80019c2:	683b      	ldr	r3, [r7, #0]
 80019c4:	685b      	ldr	r3, [r3, #4]
 80019c6:	f003 0303 	and.w	r3, r3, #3
 80019ca:	2b01      	cmp	r3, #1
 80019cc:	d005      	beq.n	80019da <HAL_GPIO_Init+0x56>
 80019ce:	683b      	ldr	r3, [r7, #0]
 80019d0:	685b      	ldr	r3, [r3, #4]
 80019d2:	f003 0303 	and.w	r3, r3, #3
 80019d6:	2b02      	cmp	r3, #2
 80019d8:	d130      	bne.n	8001a3c <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	689b      	ldr	r3, [r3, #8]
 80019de:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80019e0:	69fb      	ldr	r3, [r7, #28]
 80019e2:	005b      	lsls	r3, r3, #1
 80019e4:	2203      	movs	r2, #3
 80019e6:	fa02 f303 	lsl.w	r3, r2, r3
 80019ea:	43db      	mvns	r3, r3
 80019ec:	69ba      	ldr	r2, [r7, #24]
 80019ee:	4013      	ands	r3, r2
 80019f0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80019f2:	683b      	ldr	r3, [r7, #0]
 80019f4:	68da      	ldr	r2, [r3, #12]
 80019f6:	69fb      	ldr	r3, [r7, #28]
 80019f8:	005b      	lsls	r3, r3, #1
 80019fa:	fa02 f303 	lsl.w	r3, r2, r3
 80019fe:	69ba      	ldr	r2, [r7, #24]
 8001a00:	4313      	orrs	r3, r2
 8001a02:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	69ba      	ldr	r2, [r7, #24]
 8001a08:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	685b      	ldr	r3, [r3, #4]
 8001a0e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001a10:	2201      	movs	r2, #1
 8001a12:	69fb      	ldr	r3, [r7, #28]
 8001a14:	fa02 f303 	lsl.w	r3, r2, r3
 8001a18:	43db      	mvns	r3, r3
 8001a1a:	69ba      	ldr	r2, [r7, #24]
 8001a1c:	4013      	ands	r3, r2
 8001a1e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001a20:	683b      	ldr	r3, [r7, #0]
 8001a22:	685b      	ldr	r3, [r3, #4]
 8001a24:	091b      	lsrs	r3, r3, #4
 8001a26:	f003 0201 	and.w	r2, r3, #1
 8001a2a:	69fb      	ldr	r3, [r7, #28]
 8001a2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a30:	69ba      	ldr	r2, [r7, #24]
 8001a32:	4313      	orrs	r3, r2
 8001a34:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	69ba      	ldr	r2, [r7, #24]
 8001a3a:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001a3c:	683b      	ldr	r3, [r7, #0]
 8001a3e:	685b      	ldr	r3, [r3, #4]
 8001a40:	f003 0303 	and.w	r3, r3, #3
 8001a44:	2b03      	cmp	r3, #3
 8001a46:	d017      	beq.n	8001a78 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	68db      	ldr	r3, [r3, #12]
 8001a4c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8001a4e:	69fb      	ldr	r3, [r7, #28]
 8001a50:	005b      	lsls	r3, r3, #1
 8001a52:	2203      	movs	r2, #3
 8001a54:	fa02 f303 	lsl.w	r3, r2, r3
 8001a58:	43db      	mvns	r3, r3
 8001a5a:	69ba      	ldr	r2, [r7, #24]
 8001a5c:	4013      	ands	r3, r2
 8001a5e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8001a60:	683b      	ldr	r3, [r7, #0]
 8001a62:	689a      	ldr	r2, [r3, #8]
 8001a64:	69fb      	ldr	r3, [r7, #28]
 8001a66:	005b      	lsls	r3, r3, #1
 8001a68:	fa02 f303 	lsl.w	r3, r2, r3
 8001a6c:	69ba      	ldr	r2, [r7, #24]
 8001a6e:	4313      	orrs	r3, r2
 8001a70:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	69ba      	ldr	r2, [r7, #24]
 8001a76:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001a78:	683b      	ldr	r3, [r7, #0]
 8001a7a:	685b      	ldr	r3, [r3, #4]
 8001a7c:	f003 0303 	and.w	r3, r3, #3
 8001a80:	2b02      	cmp	r3, #2
 8001a82:	d123      	bne.n	8001acc <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001a84:	69fb      	ldr	r3, [r7, #28]
 8001a86:	08da      	lsrs	r2, r3, #3
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	3208      	adds	r2, #8
 8001a8c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a90:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001a92:	69fb      	ldr	r3, [r7, #28]
 8001a94:	f003 0307 	and.w	r3, r3, #7
 8001a98:	009b      	lsls	r3, r3, #2
 8001a9a:	220f      	movs	r2, #15
 8001a9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001aa0:	43db      	mvns	r3, r3
 8001aa2:	69ba      	ldr	r2, [r7, #24]
 8001aa4:	4013      	ands	r3, r2
 8001aa6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001aa8:	683b      	ldr	r3, [r7, #0]
 8001aaa:	691a      	ldr	r2, [r3, #16]
 8001aac:	69fb      	ldr	r3, [r7, #28]
 8001aae:	f003 0307 	and.w	r3, r3, #7
 8001ab2:	009b      	lsls	r3, r3, #2
 8001ab4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ab8:	69ba      	ldr	r2, [r7, #24]
 8001aba:	4313      	orrs	r3, r2
 8001abc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8001abe:	69fb      	ldr	r3, [r7, #28]
 8001ac0:	08da      	lsrs	r2, r3, #3
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	3208      	adds	r2, #8
 8001ac6:	69b9      	ldr	r1, [r7, #24]
 8001ac8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001ad2:	69fb      	ldr	r3, [r7, #28]
 8001ad4:	005b      	lsls	r3, r3, #1
 8001ad6:	2203      	movs	r2, #3
 8001ad8:	fa02 f303 	lsl.w	r3, r2, r3
 8001adc:	43db      	mvns	r3, r3
 8001ade:	69ba      	ldr	r2, [r7, #24]
 8001ae0:	4013      	ands	r3, r2
 8001ae2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001ae4:	683b      	ldr	r3, [r7, #0]
 8001ae6:	685b      	ldr	r3, [r3, #4]
 8001ae8:	f003 0203 	and.w	r2, r3, #3
 8001aec:	69fb      	ldr	r3, [r7, #28]
 8001aee:	005b      	lsls	r3, r3, #1
 8001af0:	fa02 f303 	lsl.w	r3, r2, r3
 8001af4:	69ba      	ldr	r2, [r7, #24]
 8001af6:	4313      	orrs	r3, r2
 8001af8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	69ba      	ldr	r2, [r7, #24]
 8001afe:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001b00:	683b      	ldr	r3, [r7, #0]
 8001b02:	685b      	ldr	r3, [r3, #4]
 8001b04:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	f000 80be 	beq.w	8001c8a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b0e:	4b66      	ldr	r3, [pc, #408]	@ (8001ca8 <HAL_GPIO_Init+0x324>)
 8001b10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b12:	4a65      	ldr	r2, [pc, #404]	@ (8001ca8 <HAL_GPIO_Init+0x324>)
 8001b14:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001b18:	6453      	str	r3, [r2, #68]	@ 0x44
 8001b1a:	4b63      	ldr	r3, [pc, #396]	@ (8001ca8 <HAL_GPIO_Init+0x324>)
 8001b1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b1e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001b22:	60fb      	str	r3, [r7, #12]
 8001b24:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8001b26:	4a61      	ldr	r2, [pc, #388]	@ (8001cac <HAL_GPIO_Init+0x328>)
 8001b28:	69fb      	ldr	r3, [r7, #28]
 8001b2a:	089b      	lsrs	r3, r3, #2
 8001b2c:	3302      	adds	r3, #2
 8001b2e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b32:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001b34:	69fb      	ldr	r3, [r7, #28]
 8001b36:	f003 0303 	and.w	r3, r3, #3
 8001b3a:	009b      	lsls	r3, r3, #2
 8001b3c:	220f      	movs	r2, #15
 8001b3e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b42:	43db      	mvns	r3, r3
 8001b44:	69ba      	ldr	r2, [r7, #24]
 8001b46:	4013      	ands	r3, r2
 8001b48:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	4a58      	ldr	r2, [pc, #352]	@ (8001cb0 <HAL_GPIO_Init+0x32c>)
 8001b4e:	4293      	cmp	r3, r2
 8001b50:	d037      	beq.n	8001bc2 <HAL_GPIO_Init+0x23e>
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	4a57      	ldr	r2, [pc, #348]	@ (8001cb4 <HAL_GPIO_Init+0x330>)
 8001b56:	4293      	cmp	r3, r2
 8001b58:	d031      	beq.n	8001bbe <HAL_GPIO_Init+0x23a>
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	4a56      	ldr	r2, [pc, #344]	@ (8001cb8 <HAL_GPIO_Init+0x334>)
 8001b5e:	4293      	cmp	r3, r2
 8001b60:	d02b      	beq.n	8001bba <HAL_GPIO_Init+0x236>
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	4a55      	ldr	r2, [pc, #340]	@ (8001cbc <HAL_GPIO_Init+0x338>)
 8001b66:	4293      	cmp	r3, r2
 8001b68:	d025      	beq.n	8001bb6 <HAL_GPIO_Init+0x232>
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	4a54      	ldr	r2, [pc, #336]	@ (8001cc0 <HAL_GPIO_Init+0x33c>)
 8001b6e:	4293      	cmp	r3, r2
 8001b70:	d01f      	beq.n	8001bb2 <HAL_GPIO_Init+0x22e>
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	4a53      	ldr	r2, [pc, #332]	@ (8001cc4 <HAL_GPIO_Init+0x340>)
 8001b76:	4293      	cmp	r3, r2
 8001b78:	d019      	beq.n	8001bae <HAL_GPIO_Init+0x22a>
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	4a52      	ldr	r2, [pc, #328]	@ (8001cc8 <HAL_GPIO_Init+0x344>)
 8001b7e:	4293      	cmp	r3, r2
 8001b80:	d013      	beq.n	8001baa <HAL_GPIO_Init+0x226>
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	4a51      	ldr	r2, [pc, #324]	@ (8001ccc <HAL_GPIO_Init+0x348>)
 8001b86:	4293      	cmp	r3, r2
 8001b88:	d00d      	beq.n	8001ba6 <HAL_GPIO_Init+0x222>
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	4a50      	ldr	r2, [pc, #320]	@ (8001cd0 <HAL_GPIO_Init+0x34c>)
 8001b8e:	4293      	cmp	r3, r2
 8001b90:	d007      	beq.n	8001ba2 <HAL_GPIO_Init+0x21e>
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	4a4f      	ldr	r2, [pc, #316]	@ (8001cd4 <HAL_GPIO_Init+0x350>)
 8001b96:	4293      	cmp	r3, r2
 8001b98:	d101      	bne.n	8001b9e <HAL_GPIO_Init+0x21a>
 8001b9a:	2309      	movs	r3, #9
 8001b9c:	e012      	b.n	8001bc4 <HAL_GPIO_Init+0x240>
 8001b9e:	230a      	movs	r3, #10
 8001ba0:	e010      	b.n	8001bc4 <HAL_GPIO_Init+0x240>
 8001ba2:	2308      	movs	r3, #8
 8001ba4:	e00e      	b.n	8001bc4 <HAL_GPIO_Init+0x240>
 8001ba6:	2307      	movs	r3, #7
 8001ba8:	e00c      	b.n	8001bc4 <HAL_GPIO_Init+0x240>
 8001baa:	2306      	movs	r3, #6
 8001bac:	e00a      	b.n	8001bc4 <HAL_GPIO_Init+0x240>
 8001bae:	2305      	movs	r3, #5
 8001bb0:	e008      	b.n	8001bc4 <HAL_GPIO_Init+0x240>
 8001bb2:	2304      	movs	r3, #4
 8001bb4:	e006      	b.n	8001bc4 <HAL_GPIO_Init+0x240>
 8001bb6:	2303      	movs	r3, #3
 8001bb8:	e004      	b.n	8001bc4 <HAL_GPIO_Init+0x240>
 8001bba:	2302      	movs	r3, #2
 8001bbc:	e002      	b.n	8001bc4 <HAL_GPIO_Init+0x240>
 8001bbe:	2301      	movs	r3, #1
 8001bc0:	e000      	b.n	8001bc4 <HAL_GPIO_Init+0x240>
 8001bc2:	2300      	movs	r3, #0
 8001bc4:	69fa      	ldr	r2, [r7, #28]
 8001bc6:	f002 0203 	and.w	r2, r2, #3
 8001bca:	0092      	lsls	r2, r2, #2
 8001bcc:	4093      	lsls	r3, r2
 8001bce:	69ba      	ldr	r2, [r7, #24]
 8001bd0:	4313      	orrs	r3, r2
 8001bd2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001bd4:	4935      	ldr	r1, [pc, #212]	@ (8001cac <HAL_GPIO_Init+0x328>)
 8001bd6:	69fb      	ldr	r3, [r7, #28]
 8001bd8:	089b      	lsrs	r3, r3, #2
 8001bda:	3302      	adds	r3, #2
 8001bdc:	69ba      	ldr	r2, [r7, #24]
 8001bde:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001be2:	4b3d      	ldr	r3, [pc, #244]	@ (8001cd8 <HAL_GPIO_Init+0x354>)
 8001be4:	689b      	ldr	r3, [r3, #8]
 8001be6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001be8:	693b      	ldr	r3, [r7, #16]
 8001bea:	43db      	mvns	r3, r3
 8001bec:	69ba      	ldr	r2, [r7, #24]
 8001bee:	4013      	ands	r3, r2
 8001bf0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001bf2:	683b      	ldr	r3, [r7, #0]
 8001bf4:	685b      	ldr	r3, [r3, #4]
 8001bf6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d003      	beq.n	8001c06 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001bfe:	69ba      	ldr	r2, [r7, #24]
 8001c00:	693b      	ldr	r3, [r7, #16]
 8001c02:	4313      	orrs	r3, r2
 8001c04:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001c06:	4a34      	ldr	r2, [pc, #208]	@ (8001cd8 <HAL_GPIO_Init+0x354>)
 8001c08:	69bb      	ldr	r3, [r7, #24]
 8001c0a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001c0c:	4b32      	ldr	r3, [pc, #200]	@ (8001cd8 <HAL_GPIO_Init+0x354>)
 8001c0e:	68db      	ldr	r3, [r3, #12]
 8001c10:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c12:	693b      	ldr	r3, [r7, #16]
 8001c14:	43db      	mvns	r3, r3
 8001c16:	69ba      	ldr	r2, [r7, #24]
 8001c18:	4013      	ands	r3, r2
 8001c1a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001c1c:	683b      	ldr	r3, [r7, #0]
 8001c1e:	685b      	ldr	r3, [r3, #4]
 8001c20:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d003      	beq.n	8001c30 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001c28:	69ba      	ldr	r2, [r7, #24]
 8001c2a:	693b      	ldr	r3, [r7, #16]
 8001c2c:	4313      	orrs	r3, r2
 8001c2e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001c30:	4a29      	ldr	r2, [pc, #164]	@ (8001cd8 <HAL_GPIO_Init+0x354>)
 8001c32:	69bb      	ldr	r3, [r7, #24]
 8001c34:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001c36:	4b28      	ldr	r3, [pc, #160]	@ (8001cd8 <HAL_GPIO_Init+0x354>)
 8001c38:	685b      	ldr	r3, [r3, #4]
 8001c3a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c3c:	693b      	ldr	r3, [r7, #16]
 8001c3e:	43db      	mvns	r3, r3
 8001c40:	69ba      	ldr	r2, [r7, #24]
 8001c42:	4013      	ands	r3, r2
 8001c44:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001c46:	683b      	ldr	r3, [r7, #0]
 8001c48:	685b      	ldr	r3, [r3, #4]
 8001c4a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d003      	beq.n	8001c5a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001c52:	69ba      	ldr	r2, [r7, #24]
 8001c54:	693b      	ldr	r3, [r7, #16]
 8001c56:	4313      	orrs	r3, r2
 8001c58:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001c5a:	4a1f      	ldr	r2, [pc, #124]	@ (8001cd8 <HAL_GPIO_Init+0x354>)
 8001c5c:	69bb      	ldr	r3, [r7, #24]
 8001c5e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001c60:	4b1d      	ldr	r3, [pc, #116]	@ (8001cd8 <HAL_GPIO_Init+0x354>)
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c66:	693b      	ldr	r3, [r7, #16]
 8001c68:	43db      	mvns	r3, r3
 8001c6a:	69ba      	ldr	r2, [r7, #24]
 8001c6c:	4013      	ands	r3, r2
 8001c6e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001c70:	683b      	ldr	r3, [r7, #0]
 8001c72:	685b      	ldr	r3, [r3, #4]
 8001c74:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d003      	beq.n	8001c84 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001c7c:	69ba      	ldr	r2, [r7, #24]
 8001c7e:	693b      	ldr	r3, [r7, #16]
 8001c80:	4313      	orrs	r3, r2
 8001c82:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001c84:	4a14      	ldr	r2, [pc, #80]	@ (8001cd8 <HAL_GPIO_Init+0x354>)
 8001c86:	69bb      	ldr	r3, [r7, #24]
 8001c88:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8001c8a:	69fb      	ldr	r3, [r7, #28]
 8001c8c:	3301      	adds	r3, #1
 8001c8e:	61fb      	str	r3, [r7, #28]
 8001c90:	69fb      	ldr	r3, [r7, #28]
 8001c92:	2b0f      	cmp	r3, #15
 8001c94:	f67f ae86 	bls.w	80019a4 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001c98:	bf00      	nop
 8001c9a:	bf00      	nop
 8001c9c:	3724      	adds	r7, #36	@ 0x24
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca4:	4770      	bx	lr
 8001ca6:	bf00      	nop
 8001ca8:	40023800 	.word	0x40023800
 8001cac:	40013800 	.word	0x40013800
 8001cb0:	40020000 	.word	0x40020000
 8001cb4:	40020400 	.word	0x40020400
 8001cb8:	40020800 	.word	0x40020800
 8001cbc:	40020c00 	.word	0x40020c00
 8001cc0:	40021000 	.word	0x40021000
 8001cc4:	40021400 	.word	0x40021400
 8001cc8:	40021800 	.word	0x40021800
 8001ccc:	40021c00 	.word	0x40021c00
 8001cd0:	40022000 	.word	0x40022000
 8001cd4:	40022400 	.word	0x40022400
 8001cd8:	40013c00 	.word	0x40013c00

08001cdc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001cdc:	b480      	push	{r7}
 8001cde:	b085      	sub	sp, #20
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	6078      	str	r0, [r7, #4]
 8001ce4:	460b      	mov	r3, r1
 8001ce6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	691a      	ldr	r2, [r3, #16]
 8001cec:	887b      	ldrh	r3, [r7, #2]
 8001cee:	4013      	ands	r3, r2
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d002      	beq.n	8001cfa <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001cf4:	2301      	movs	r3, #1
 8001cf6:	73fb      	strb	r3, [r7, #15]
 8001cf8:	e001      	b.n	8001cfe <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001cfa:	2300      	movs	r3, #0
 8001cfc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001cfe:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d00:	4618      	mov	r0, r3
 8001d02:	3714      	adds	r7, #20
 8001d04:	46bd      	mov	sp, r7
 8001d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0a:	4770      	bx	lr

08001d0c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001d0c:	b480      	push	{r7}
 8001d0e:	b083      	sub	sp, #12
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	6078      	str	r0, [r7, #4]
 8001d14:	460b      	mov	r3, r1
 8001d16:	807b      	strh	r3, [r7, #2]
 8001d18:	4613      	mov	r3, r2
 8001d1a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001d1c:	787b      	ldrb	r3, [r7, #1]
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d003      	beq.n	8001d2a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001d22:	887a      	ldrh	r2, [r7, #2]
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8001d28:	e003      	b.n	8001d32 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8001d2a:	887b      	ldrh	r3, [r7, #2]
 8001d2c:	041a      	lsls	r2, r3, #16
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	619a      	str	r2, [r3, #24]
}
 8001d32:	bf00      	nop
 8001d34:	370c      	adds	r7, #12
 8001d36:	46bd      	mov	sp, r7
 8001d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3c:	4770      	bx	lr
	...

08001d40 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001d40:	b580      	push	{r7, lr}
 8001d42:	b082      	sub	sp, #8
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	4603      	mov	r3, r0
 8001d48:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001d4a:	4b08      	ldr	r3, [pc, #32]	@ (8001d6c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001d4c:	695a      	ldr	r2, [r3, #20]
 8001d4e:	88fb      	ldrh	r3, [r7, #6]
 8001d50:	4013      	ands	r3, r2
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d006      	beq.n	8001d64 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001d56:	4a05      	ldr	r2, [pc, #20]	@ (8001d6c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001d58:	88fb      	ldrh	r3, [r7, #6]
 8001d5a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001d5c:	88fb      	ldrh	r3, [r7, #6]
 8001d5e:	4618      	mov	r0, r3
 8001d60:	f7ff f98c 	bl	800107c <HAL_GPIO_EXTI_Callback>
  }
}
 8001d64:	bf00      	nop
 8001d66:	3708      	adds	r7, #8
 8001d68:	46bd      	mov	sp, r7
 8001d6a:	bd80      	pop	{r7, pc}
 8001d6c:	40013c00 	.word	0x40013c00

08001d70 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8001d70:	b480      	push	{r7}
 8001d72:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001d74:	4b05      	ldr	r3, [pc, #20]	@ (8001d8c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	4a04      	ldr	r2, [pc, #16]	@ (8001d8c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001d7a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001d7e:	6013      	str	r3, [r2, #0]
}
 8001d80:	bf00      	nop
 8001d82:	46bd      	mov	sp, r7
 8001d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d88:	4770      	bx	lr
 8001d8a:	bf00      	nop
 8001d8c:	40007000 	.word	0x40007000

08001d90 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8001d90:	b580      	push	{r7, lr}
 8001d92:	b082      	sub	sp, #8
 8001d94:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8001d96:	2300      	movs	r3, #0
 8001d98:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8001d9a:	4b23      	ldr	r3, [pc, #140]	@ (8001e28 <HAL_PWREx_EnableOverDrive+0x98>)
 8001d9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d9e:	4a22      	ldr	r2, [pc, #136]	@ (8001e28 <HAL_PWREx_EnableOverDrive+0x98>)
 8001da0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001da4:	6413      	str	r3, [r2, #64]	@ 0x40
 8001da6:	4b20      	ldr	r3, [pc, #128]	@ (8001e28 <HAL_PWREx_EnableOverDrive+0x98>)
 8001da8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001daa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001dae:	603b      	str	r3, [r7, #0]
 8001db0:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8001db2:	4b1e      	ldr	r3, [pc, #120]	@ (8001e2c <HAL_PWREx_EnableOverDrive+0x9c>)
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	4a1d      	ldr	r2, [pc, #116]	@ (8001e2c <HAL_PWREx_EnableOverDrive+0x9c>)
 8001db8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001dbc:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001dbe:	f7ff fc9f 	bl	8001700 <HAL_GetTick>
 8001dc2:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001dc4:	e009      	b.n	8001dda <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001dc6:	f7ff fc9b 	bl	8001700 <HAL_GetTick>
 8001dca:	4602      	mov	r2, r0
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	1ad3      	subs	r3, r2, r3
 8001dd0:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001dd4:	d901      	bls.n	8001dda <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8001dd6:	2303      	movs	r3, #3
 8001dd8:	e022      	b.n	8001e20 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001dda:	4b14      	ldr	r3, [pc, #80]	@ (8001e2c <HAL_PWREx_EnableOverDrive+0x9c>)
 8001ddc:	685b      	ldr	r3, [r3, #4]
 8001dde:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001de2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001de6:	d1ee      	bne.n	8001dc6 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8001de8:	4b10      	ldr	r3, [pc, #64]	@ (8001e2c <HAL_PWREx_EnableOverDrive+0x9c>)
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	4a0f      	ldr	r2, [pc, #60]	@ (8001e2c <HAL_PWREx_EnableOverDrive+0x9c>)
 8001dee:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001df2:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001df4:	f7ff fc84 	bl	8001700 <HAL_GetTick>
 8001df8:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001dfa:	e009      	b.n	8001e10 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001dfc:	f7ff fc80 	bl	8001700 <HAL_GetTick>
 8001e00:	4602      	mov	r2, r0
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	1ad3      	subs	r3, r2, r3
 8001e06:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001e0a:	d901      	bls.n	8001e10 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8001e0c:	2303      	movs	r3, #3
 8001e0e:	e007      	b.n	8001e20 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001e10:	4b06      	ldr	r3, [pc, #24]	@ (8001e2c <HAL_PWREx_EnableOverDrive+0x9c>)
 8001e12:	685b      	ldr	r3, [r3, #4]
 8001e14:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e18:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8001e1c:	d1ee      	bne.n	8001dfc <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8001e1e:	2300      	movs	r3, #0
}
 8001e20:	4618      	mov	r0, r3
 8001e22:	3708      	adds	r7, #8
 8001e24:	46bd      	mov	sp, r7
 8001e26:	bd80      	pop	{r7, pc}
 8001e28:	40023800 	.word	0x40023800
 8001e2c:	40007000 	.word	0x40007000

08001e30 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001e30:	b580      	push	{r7, lr}
 8001e32:	b086      	sub	sp, #24
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8001e38:	2300      	movs	r3, #0
 8001e3a:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d101      	bne.n	8001e46 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8001e42:	2301      	movs	r3, #1
 8001e44:	e29b      	b.n	800237e <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	f003 0301 	and.w	r3, r3, #1
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	f000 8087 	beq.w	8001f62 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001e54:	4b96      	ldr	r3, [pc, #600]	@ (80020b0 <HAL_RCC_OscConfig+0x280>)
 8001e56:	689b      	ldr	r3, [r3, #8]
 8001e58:	f003 030c 	and.w	r3, r3, #12
 8001e5c:	2b04      	cmp	r3, #4
 8001e5e:	d00c      	beq.n	8001e7a <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001e60:	4b93      	ldr	r3, [pc, #588]	@ (80020b0 <HAL_RCC_OscConfig+0x280>)
 8001e62:	689b      	ldr	r3, [r3, #8]
 8001e64:	f003 030c 	and.w	r3, r3, #12
 8001e68:	2b08      	cmp	r3, #8
 8001e6a:	d112      	bne.n	8001e92 <HAL_RCC_OscConfig+0x62>
 8001e6c:	4b90      	ldr	r3, [pc, #576]	@ (80020b0 <HAL_RCC_OscConfig+0x280>)
 8001e6e:	685b      	ldr	r3, [r3, #4]
 8001e70:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001e74:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001e78:	d10b      	bne.n	8001e92 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e7a:	4b8d      	ldr	r3, [pc, #564]	@ (80020b0 <HAL_RCC_OscConfig+0x280>)
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d06c      	beq.n	8001f60 <HAL_RCC_OscConfig+0x130>
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	685b      	ldr	r3, [r3, #4]
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d168      	bne.n	8001f60 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8001e8e:	2301      	movs	r3, #1
 8001e90:	e275      	b.n	800237e <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	685b      	ldr	r3, [r3, #4]
 8001e96:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001e9a:	d106      	bne.n	8001eaa <HAL_RCC_OscConfig+0x7a>
 8001e9c:	4b84      	ldr	r3, [pc, #528]	@ (80020b0 <HAL_RCC_OscConfig+0x280>)
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	4a83      	ldr	r2, [pc, #524]	@ (80020b0 <HAL_RCC_OscConfig+0x280>)
 8001ea2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001ea6:	6013      	str	r3, [r2, #0]
 8001ea8:	e02e      	b.n	8001f08 <HAL_RCC_OscConfig+0xd8>
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	685b      	ldr	r3, [r3, #4]
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d10c      	bne.n	8001ecc <HAL_RCC_OscConfig+0x9c>
 8001eb2:	4b7f      	ldr	r3, [pc, #508]	@ (80020b0 <HAL_RCC_OscConfig+0x280>)
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	4a7e      	ldr	r2, [pc, #504]	@ (80020b0 <HAL_RCC_OscConfig+0x280>)
 8001eb8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001ebc:	6013      	str	r3, [r2, #0]
 8001ebe:	4b7c      	ldr	r3, [pc, #496]	@ (80020b0 <HAL_RCC_OscConfig+0x280>)
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	4a7b      	ldr	r2, [pc, #492]	@ (80020b0 <HAL_RCC_OscConfig+0x280>)
 8001ec4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001ec8:	6013      	str	r3, [r2, #0]
 8001eca:	e01d      	b.n	8001f08 <HAL_RCC_OscConfig+0xd8>
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	685b      	ldr	r3, [r3, #4]
 8001ed0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001ed4:	d10c      	bne.n	8001ef0 <HAL_RCC_OscConfig+0xc0>
 8001ed6:	4b76      	ldr	r3, [pc, #472]	@ (80020b0 <HAL_RCC_OscConfig+0x280>)
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	4a75      	ldr	r2, [pc, #468]	@ (80020b0 <HAL_RCC_OscConfig+0x280>)
 8001edc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001ee0:	6013      	str	r3, [r2, #0]
 8001ee2:	4b73      	ldr	r3, [pc, #460]	@ (80020b0 <HAL_RCC_OscConfig+0x280>)
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	4a72      	ldr	r2, [pc, #456]	@ (80020b0 <HAL_RCC_OscConfig+0x280>)
 8001ee8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001eec:	6013      	str	r3, [r2, #0]
 8001eee:	e00b      	b.n	8001f08 <HAL_RCC_OscConfig+0xd8>
 8001ef0:	4b6f      	ldr	r3, [pc, #444]	@ (80020b0 <HAL_RCC_OscConfig+0x280>)
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	4a6e      	ldr	r2, [pc, #440]	@ (80020b0 <HAL_RCC_OscConfig+0x280>)
 8001ef6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001efa:	6013      	str	r3, [r2, #0]
 8001efc:	4b6c      	ldr	r3, [pc, #432]	@ (80020b0 <HAL_RCC_OscConfig+0x280>)
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	4a6b      	ldr	r2, [pc, #428]	@ (80020b0 <HAL_RCC_OscConfig+0x280>)
 8001f02:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001f06:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	685b      	ldr	r3, [r3, #4]
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d013      	beq.n	8001f38 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f10:	f7ff fbf6 	bl	8001700 <HAL_GetTick>
 8001f14:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f16:	e008      	b.n	8001f2a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f18:	f7ff fbf2 	bl	8001700 <HAL_GetTick>
 8001f1c:	4602      	mov	r2, r0
 8001f1e:	693b      	ldr	r3, [r7, #16]
 8001f20:	1ad3      	subs	r3, r2, r3
 8001f22:	2b64      	cmp	r3, #100	@ 0x64
 8001f24:	d901      	bls.n	8001f2a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001f26:	2303      	movs	r3, #3
 8001f28:	e229      	b.n	800237e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f2a:	4b61      	ldr	r3, [pc, #388]	@ (80020b0 <HAL_RCC_OscConfig+0x280>)
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d0f0      	beq.n	8001f18 <HAL_RCC_OscConfig+0xe8>
 8001f36:	e014      	b.n	8001f62 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f38:	f7ff fbe2 	bl	8001700 <HAL_GetTick>
 8001f3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f3e:	e008      	b.n	8001f52 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f40:	f7ff fbde 	bl	8001700 <HAL_GetTick>
 8001f44:	4602      	mov	r2, r0
 8001f46:	693b      	ldr	r3, [r7, #16]
 8001f48:	1ad3      	subs	r3, r2, r3
 8001f4a:	2b64      	cmp	r3, #100	@ 0x64
 8001f4c:	d901      	bls.n	8001f52 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8001f4e:	2303      	movs	r3, #3
 8001f50:	e215      	b.n	800237e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f52:	4b57      	ldr	r3, [pc, #348]	@ (80020b0 <HAL_RCC_OscConfig+0x280>)
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d1f0      	bne.n	8001f40 <HAL_RCC_OscConfig+0x110>
 8001f5e:	e000      	b.n	8001f62 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f60:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	f003 0302 	and.w	r3, r3, #2
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d069      	beq.n	8002042 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001f6e:	4b50      	ldr	r3, [pc, #320]	@ (80020b0 <HAL_RCC_OscConfig+0x280>)
 8001f70:	689b      	ldr	r3, [r3, #8]
 8001f72:	f003 030c 	and.w	r3, r3, #12
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d00b      	beq.n	8001f92 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001f7a:	4b4d      	ldr	r3, [pc, #308]	@ (80020b0 <HAL_RCC_OscConfig+0x280>)
 8001f7c:	689b      	ldr	r3, [r3, #8]
 8001f7e:	f003 030c 	and.w	r3, r3, #12
 8001f82:	2b08      	cmp	r3, #8
 8001f84:	d11c      	bne.n	8001fc0 <HAL_RCC_OscConfig+0x190>
 8001f86:	4b4a      	ldr	r3, [pc, #296]	@ (80020b0 <HAL_RCC_OscConfig+0x280>)
 8001f88:	685b      	ldr	r3, [r3, #4]
 8001f8a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d116      	bne.n	8001fc0 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f92:	4b47      	ldr	r3, [pc, #284]	@ (80020b0 <HAL_RCC_OscConfig+0x280>)
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	f003 0302 	and.w	r3, r3, #2
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d005      	beq.n	8001faa <HAL_RCC_OscConfig+0x17a>
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	68db      	ldr	r3, [r3, #12]
 8001fa2:	2b01      	cmp	r3, #1
 8001fa4:	d001      	beq.n	8001faa <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8001fa6:	2301      	movs	r3, #1
 8001fa8:	e1e9      	b.n	800237e <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001faa:	4b41      	ldr	r3, [pc, #260]	@ (80020b0 <HAL_RCC_OscConfig+0x280>)
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	691b      	ldr	r3, [r3, #16]
 8001fb6:	00db      	lsls	r3, r3, #3
 8001fb8:	493d      	ldr	r1, [pc, #244]	@ (80020b0 <HAL_RCC_OscConfig+0x280>)
 8001fba:	4313      	orrs	r3, r2
 8001fbc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001fbe:	e040      	b.n	8002042 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	68db      	ldr	r3, [r3, #12]
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d023      	beq.n	8002010 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001fc8:	4b39      	ldr	r3, [pc, #228]	@ (80020b0 <HAL_RCC_OscConfig+0x280>)
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	4a38      	ldr	r2, [pc, #224]	@ (80020b0 <HAL_RCC_OscConfig+0x280>)
 8001fce:	f043 0301 	orr.w	r3, r3, #1
 8001fd2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fd4:	f7ff fb94 	bl	8001700 <HAL_GetTick>
 8001fd8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001fda:	e008      	b.n	8001fee <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001fdc:	f7ff fb90 	bl	8001700 <HAL_GetTick>
 8001fe0:	4602      	mov	r2, r0
 8001fe2:	693b      	ldr	r3, [r7, #16]
 8001fe4:	1ad3      	subs	r3, r2, r3
 8001fe6:	2b02      	cmp	r3, #2
 8001fe8:	d901      	bls.n	8001fee <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8001fea:	2303      	movs	r3, #3
 8001fec:	e1c7      	b.n	800237e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001fee:	4b30      	ldr	r3, [pc, #192]	@ (80020b0 <HAL_RCC_OscConfig+0x280>)
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	f003 0302 	and.w	r3, r3, #2
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d0f0      	beq.n	8001fdc <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ffa:	4b2d      	ldr	r3, [pc, #180]	@ (80020b0 <HAL_RCC_OscConfig+0x280>)
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	691b      	ldr	r3, [r3, #16]
 8002006:	00db      	lsls	r3, r3, #3
 8002008:	4929      	ldr	r1, [pc, #164]	@ (80020b0 <HAL_RCC_OscConfig+0x280>)
 800200a:	4313      	orrs	r3, r2
 800200c:	600b      	str	r3, [r1, #0]
 800200e:	e018      	b.n	8002042 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002010:	4b27      	ldr	r3, [pc, #156]	@ (80020b0 <HAL_RCC_OscConfig+0x280>)
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	4a26      	ldr	r2, [pc, #152]	@ (80020b0 <HAL_RCC_OscConfig+0x280>)
 8002016:	f023 0301 	bic.w	r3, r3, #1
 800201a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800201c:	f7ff fb70 	bl	8001700 <HAL_GetTick>
 8002020:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002022:	e008      	b.n	8002036 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002024:	f7ff fb6c 	bl	8001700 <HAL_GetTick>
 8002028:	4602      	mov	r2, r0
 800202a:	693b      	ldr	r3, [r7, #16]
 800202c:	1ad3      	subs	r3, r2, r3
 800202e:	2b02      	cmp	r3, #2
 8002030:	d901      	bls.n	8002036 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002032:	2303      	movs	r3, #3
 8002034:	e1a3      	b.n	800237e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002036:	4b1e      	ldr	r3, [pc, #120]	@ (80020b0 <HAL_RCC_OscConfig+0x280>)
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	f003 0302 	and.w	r3, r3, #2
 800203e:	2b00      	cmp	r3, #0
 8002040:	d1f0      	bne.n	8002024 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	f003 0308 	and.w	r3, r3, #8
 800204a:	2b00      	cmp	r3, #0
 800204c:	d038      	beq.n	80020c0 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	695b      	ldr	r3, [r3, #20]
 8002052:	2b00      	cmp	r3, #0
 8002054:	d019      	beq.n	800208a <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002056:	4b16      	ldr	r3, [pc, #88]	@ (80020b0 <HAL_RCC_OscConfig+0x280>)
 8002058:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800205a:	4a15      	ldr	r2, [pc, #84]	@ (80020b0 <HAL_RCC_OscConfig+0x280>)
 800205c:	f043 0301 	orr.w	r3, r3, #1
 8002060:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002062:	f7ff fb4d 	bl	8001700 <HAL_GetTick>
 8002066:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002068:	e008      	b.n	800207c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800206a:	f7ff fb49 	bl	8001700 <HAL_GetTick>
 800206e:	4602      	mov	r2, r0
 8002070:	693b      	ldr	r3, [r7, #16]
 8002072:	1ad3      	subs	r3, r2, r3
 8002074:	2b02      	cmp	r3, #2
 8002076:	d901      	bls.n	800207c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002078:	2303      	movs	r3, #3
 800207a:	e180      	b.n	800237e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800207c:	4b0c      	ldr	r3, [pc, #48]	@ (80020b0 <HAL_RCC_OscConfig+0x280>)
 800207e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002080:	f003 0302 	and.w	r3, r3, #2
 8002084:	2b00      	cmp	r3, #0
 8002086:	d0f0      	beq.n	800206a <HAL_RCC_OscConfig+0x23a>
 8002088:	e01a      	b.n	80020c0 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800208a:	4b09      	ldr	r3, [pc, #36]	@ (80020b0 <HAL_RCC_OscConfig+0x280>)
 800208c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800208e:	4a08      	ldr	r2, [pc, #32]	@ (80020b0 <HAL_RCC_OscConfig+0x280>)
 8002090:	f023 0301 	bic.w	r3, r3, #1
 8002094:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002096:	f7ff fb33 	bl	8001700 <HAL_GetTick>
 800209a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800209c:	e00a      	b.n	80020b4 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800209e:	f7ff fb2f 	bl	8001700 <HAL_GetTick>
 80020a2:	4602      	mov	r2, r0
 80020a4:	693b      	ldr	r3, [r7, #16]
 80020a6:	1ad3      	subs	r3, r2, r3
 80020a8:	2b02      	cmp	r3, #2
 80020aa:	d903      	bls.n	80020b4 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80020ac:	2303      	movs	r3, #3
 80020ae:	e166      	b.n	800237e <HAL_RCC_OscConfig+0x54e>
 80020b0:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80020b4:	4b92      	ldr	r3, [pc, #584]	@ (8002300 <HAL_RCC_OscConfig+0x4d0>)
 80020b6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80020b8:	f003 0302 	and.w	r3, r3, #2
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d1ee      	bne.n	800209e <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	f003 0304 	and.w	r3, r3, #4
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	f000 80a4 	beq.w	8002216 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80020ce:	4b8c      	ldr	r3, [pc, #560]	@ (8002300 <HAL_RCC_OscConfig+0x4d0>)
 80020d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020d2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d10d      	bne.n	80020f6 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80020da:	4b89      	ldr	r3, [pc, #548]	@ (8002300 <HAL_RCC_OscConfig+0x4d0>)
 80020dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020de:	4a88      	ldr	r2, [pc, #544]	@ (8002300 <HAL_RCC_OscConfig+0x4d0>)
 80020e0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80020e4:	6413      	str	r3, [r2, #64]	@ 0x40
 80020e6:	4b86      	ldr	r3, [pc, #536]	@ (8002300 <HAL_RCC_OscConfig+0x4d0>)
 80020e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020ea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80020ee:	60bb      	str	r3, [r7, #8]
 80020f0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80020f2:	2301      	movs	r3, #1
 80020f4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80020f6:	4b83      	ldr	r3, [pc, #524]	@ (8002304 <HAL_RCC_OscConfig+0x4d4>)
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d118      	bne.n	8002134 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8002102:	4b80      	ldr	r3, [pc, #512]	@ (8002304 <HAL_RCC_OscConfig+0x4d4>)
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	4a7f      	ldr	r2, [pc, #508]	@ (8002304 <HAL_RCC_OscConfig+0x4d4>)
 8002108:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800210c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800210e:	f7ff faf7 	bl	8001700 <HAL_GetTick>
 8002112:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002114:	e008      	b.n	8002128 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002116:	f7ff faf3 	bl	8001700 <HAL_GetTick>
 800211a:	4602      	mov	r2, r0
 800211c:	693b      	ldr	r3, [r7, #16]
 800211e:	1ad3      	subs	r3, r2, r3
 8002120:	2b64      	cmp	r3, #100	@ 0x64
 8002122:	d901      	bls.n	8002128 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002124:	2303      	movs	r3, #3
 8002126:	e12a      	b.n	800237e <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002128:	4b76      	ldr	r3, [pc, #472]	@ (8002304 <HAL_RCC_OscConfig+0x4d4>)
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002130:	2b00      	cmp	r3, #0
 8002132:	d0f0      	beq.n	8002116 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	689b      	ldr	r3, [r3, #8]
 8002138:	2b01      	cmp	r3, #1
 800213a:	d106      	bne.n	800214a <HAL_RCC_OscConfig+0x31a>
 800213c:	4b70      	ldr	r3, [pc, #448]	@ (8002300 <HAL_RCC_OscConfig+0x4d0>)
 800213e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002140:	4a6f      	ldr	r2, [pc, #444]	@ (8002300 <HAL_RCC_OscConfig+0x4d0>)
 8002142:	f043 0301 	orr.w	r3, r3, #1
 8002146:	6713      	str	r3, [r2, #112]	@ 0x70
 8002148:	e02d      	b.n	80021a6 <HAL_RCC_OscConfig+0x376>
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	689b      	ldr	r3, [r3, #8]
 800214e:	2b00      	cmp	r3, #0
 8002150:	d10c      	bne.n	800216c <HAL_RCC_OscConfig+0x33c>
 8002152:	4b6b      	ldr	r3, [pc, #428]	@ (8002300 <HAL_RCC_OscConfig+0x4d0>)
 8002154:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002156:	4a6a      	ldr	r2, [pc, #424]	@ (8002300 <HAL_RCC_OscConfig+0x4d0>)
 8002158:	f023 0301 	bic.w	r3, r3, #1
 800215c:	6713      	str	r3, [r2, #112]	@ 0x70
 800215e:	4b68      	ldr	r3, [pc, #416]	@ (8002300 <HAL_RCC_OscConfig+0x4d0>)
 8002160:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002162:	4a67      	ldr	r2, [pc, #412]	@ (8002300 <HAL_RCC_OscConfig+0x4d0>)
 8002164:	f023 0304 	bic.w	r3, r3, #4
 8002168:	6713      	str	r3, [r2, #112]	@ 0x70
 800216a:	e01c      	b.n	80021a6 <HAL_RCC_OscConfig+0x376>
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	689b      	ldr	r3, [r3, #8]
 8002170:	2b05      	cmp	r3, #5
 8002172:	d10c      	bne.n	800218e <HAL_RCC_OscConfig+0x35e>
 8002174:	4b62      	ldr	r3, [pc, #392]	@ (8002300 <HAL_RCC_OscConfig+0x4d0>)
 8002176:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002178:	4a61      	ldr	r2, [pc, #388]	@ (8002300 <HAL_RCC_OscConfig+0x4d0>)
 800217a:	f043 0304 	orr.w	r3, r3, #4
 800217e:	6713      	str	r3, [r2, #112]	@ 0x70
 8002180:	4b5f      	ldr	r3, [pc, #380]	@ (8002300 <HAL_RCC_OscConfig+0x4d0>)
 8002182:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002184:	4a5e      	ldr	r2, [pc, #376]	@ (8002300 <HAL_RCC_OscConfig+0x4d0>)
 8002186:	f043 0301 	orr.w	r3, r3, #1
 800218a:	6713      	str	r3, [r2, #112]	@ 0x70
 800218c:	e00b      	b.n	80021a6 <HAL_RCC_OscConfig+0x376>
 800218e:	4b5c      	ldr	r3, [pc, #368]	@ (8002300 <HAL_RCC_OscConfig+0x4d0>)
 8002190:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002192:	4a5b      	ldr	r2, [pc, #364]	@ (8002300 <HAL_RCC_OscConfig+0x4d0>)
 8002194:	f023 0301 	bic.w	r3, r3, #1
 8002198:	6713      	str	r3, [r2, #112]	@ 0x70
 800219a:	4b59      	ldr	r3, [pc, #356]	@ (8002300 <HAL_RCC_OscConfig+0x4d0>)
 800219c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800219e:	4a58      	ldr	r2, [pc, #352]	@ (8002300 <HAL_RCC_OscConfig+0x4d0>)
 80021a0:	f023 0304 	bic.w	r3, r3, #4
 80021a4:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	689b      	ldr	r3, [r3, #8]
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d015      	beq.n	80021da <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021ae:	f7ff faa7 	bl	8001700 <HAL_GetTick>
 80021b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80021b4:	e00a      	b.n	80021cc <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80021b6:	f7ff faa3 	bl	8001700 <HAL_GetTick>
 80021ba:	4602      	mov	r2, r0
 80021bc:	693b      	ldr	r3, [r7, #16]
 80021be:	1ad3      	subs	r3, r2, r3
 80021c0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80021c4:	4293      	cmp	r3, r2
 80021c6:	d901      	bls.n	80021cc <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80021c8:	2303      	movs	r3, #3
 80021ca:	e0d8      	b.n	800237e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80021cc:	4b4c      	ldr	r3, [pc, #304]	@ (8002300 <HAL_RCC_OscConfig+0x4d0>)
 80021ce:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80021d0:	f003 0302 	and.w	r3, r3, #2
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d0ee      	beq.n	80021b6 <HAL_RCC_OscConfig+0x386>
 80021d8:	e014      	b.n	8002204 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021da:	f7ff fa91 	bl	8001700 <HAL_GetTick>
 80021de:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80021e0:	e00a      	b.n	80021f8 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80021e2:	f7ff fa8d 	bl	8001700 <HAL_GetTick>
 80021e6:	4602      	mov	r2, r0
 80021e8:	693b      	ldr	r3, [r7, #16]
 80021ea:	1ad3      	subs	r3, r2, r3
 80021ec:	f241 3288 	movw	r2, #5000	@ 0x1388
 80021f0:	4293      	cmp	r3, r2
 80021f2:	d901      	bls.n	80021f8 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80021f4:	2303      	movs	r3, #3
 80021f6:	e0c2      	b.n	800237e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80021f8:	4b41      	ldr	r3, [pc, #260]	@ (8002300 <HAL_RCC_OscConfig+0x4d0>)
 80021fa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80021fc:	f003 0302 	and.w	r3, r3, #2
 8002200:	2b00      	cmp	r3, #0
 8002202:	d1ee      	bne.n	80021e2 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002204:	7dfb      	ldrb	r3, [r7, #23]
 8002206:	2b01      	cmp	r3, #1
 8002208:	d105      	bne.n	8002216 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800220a:	4b3d      	ldr	r3, [pc, #244]	@ (8002300 <HAL_RCC_OscConfig+0x4d0>)
 800220c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800220e:	4a3c      	ldr	r2, [pc, #240]	@ (8002300 <HAL_RCC_OscConfig+0x4d0>)
 8002210:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002214:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	699b      	ldr	r3, [r3, #24]
 800221a:	2b00      	cmp	r3, #0
 800221c:	f000 80ae 	beq.w	800237c <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002220:	4b37      	ldr	r3, [pc, #220]	@ (8002300 <HAL_RCC_OscConfig+0x4d0>)
 8002222:	689b      	ldr	r3, [r3, #8]
 8002224:	f003 030c 	and.w	r3, r3, #12
 8002228:	2b08      	cmp	r3, #8
 800222a:	d06d      	beq.n	8002308 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	699b      	ldr	r3, [r3, #24]
 8002230:	2b02      	cmp	r3, #2
 8002232:	d14b      	bne.n	80022cc <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002234:	4b32      	ldr	r3, [pc, #200]	@ (8002300 <HAL_RCC_OscConfig+0x4d0>)
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	4a31      	ldr	r2, [pc, #196]	@ (8002300 <HAL_RCC_OscConfig+0x4d0>)
 800223a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800223e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002240:	f7ff fa5e 	bl	8001700 <HAL_GetTick>
 8002244:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002246:	e008      	b.n	800225a <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002248:	f7ff fa5a 	bl	8001700 <HAL_GetTick>
 800224c:	4602      	mov	r2, r0
 800224e:	693b      	ldr	r3, [r7, #16]
 8002250:	1ad3      	subs	r3, r2, r3
 8002252:	2b02      	cmp	r3, #2
 8002254:	d901      	bls.n	800225a <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8002256:	2303      	movs	r3, #3
 8002258:	e091      	b.n	800237e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800225a:	4b29      	ldr	r3, [pc, #164]	@ (8002300 <HAL_RCC_OscConfig+0x4d0>)
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002262:	2b00      	cmp	r3, #0
 8002264:	d1f0      	bne.n	8002248 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	69da      	ldr	r2, [r3, #28]
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	6a1b      	ldr	r3, [r3, #32]
 800226e:	431a      	orrs	r2, r3
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002274:	019b      	lsls	r3, r3, #6
 8002276:	431a      	orrs	r2, r3
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800227c:	085b      	lsrs	r3, r3, #1
 800227e:	3b01      	subs	r3, #1
 8002280:	041b      	lsls	r3, r3, #16
 8002282:	431a      	orrs	r2, r3
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002288:	061b      	lsls	r3, r3, #24
 800228a:	431a      	orrs	r2, r3
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002290:	071b      	lsls	r3, r3, #28
 8002292:	491b      	ldr	r1, [pc, #108]	@ (8002300 <HAL_RCC_OscConfig+0x4d0>)
 8002294:	4313      	orrs	r3, r2
 8002296:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002298:	4b19      	ldr	r3, [pc, #100]	@ (8002300 <HAL_RCC_OscConfig+0x4d0>)
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	4a18      	ldr	r2, [pc, #96]	@ (8002300 <HAL_RCC_OscConfig+0x4d0>)
 800229e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80022a2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022a4:	f7ff fa2c 	bl	8001700 <HAL_GetTick>
 80022a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80022aa:	e008      	b.n	80022be <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022ac:	f7ff fa28 	bl	8001700 <HAL_GetTick>
 80022b0:	4602      	mov	r2, r0
 80022b2:	693b      	ldr	r3, [r7, #16]
 80022b4:	1ad3      	subs	r3, r2, r3
 80022b6:	2b02      	cmp	r3, #2
 80022b8:	d901      	bls.n	80022be <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 80022ba:	2303      	movs	r3, #3
 80022bc:	e05f      	b.n	800237e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80022be:	4b10      	ldr	r3, [pc, #64]	@ (8002300 <HAL_RCC_OscConfig+0x4d0>)
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d0f0      	beq.n	80022ac <HAL_RCC_OscConfig+0x47c>
 80022ca:	e057      	b.n	800237c <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80022cc:	4b0c      	ldr	r3, [pc, #48]	@ (8002300 <HAL_RCC_OscConfig+0x4d0>)
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	4a0b      	ldr	r2, [pc, #44]	@ (8002300 <HAL_RCC_OscConfig+0x4d0>)
 80022d2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80022d6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022d8:	f7ff fa12 	bl	8001700 <HAL_GetTick>
 80022dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80022de:	e008      	b.n	80022f2 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022e0:	f7ff fa0e 	bl	8001700 <HAL_GetTick>
 80022e4:	4602      	mov	r2, r0
 80022e6:	693b      	ldr	r3, [r7, #16]
 80022e8:	1ad3      	subs	r3, r2, r3
 80022ea:	2b02      	cmp	r3, #2
 80022ec:	d901      	bls.n	80022f2 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 80022ee:	2303      	movs	r3, #3
 80022f0:	e045      	b.n	800237e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80022f2:	4b03      	ldr	r3, [pc, #12]	@ (8002300 <HAL_RCC_OscConfig+0x4d0>)
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d1f0      	bne.n	80022e0 <HAL_RCC_OscConfig+0x4b0>
 80022fe:	e03d      	b.n	800237c <HAL_RCC_OscConfig+0x54c>
 8002300:	40023800 	.word	0x40023800
 8002304:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8002308:	4b1f      	ldr	r3, [pc, #124]	@ (8002388 <HAL_RCC_OscConfig+0x558>)
 800230a:	685b      	ldr	r3, [r3, #4]
 800230c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	699b      	ldr	r3, [r3, #24]
 8002312:	2b01      	cmp	r3, #1
 8002314:	d030      	beq.n	8002378 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002320:	429a      	cmp	r2, r3
 8002322:	d129      	bne.n	8002378 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800232e:	429a      	cmp	r2, r3
 8002330:	d122      	bne.n	8002378 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002332:	68fa      	ldr	r2, [r7, #12]
 8002334:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002338:	4013      	ands	r3, r2
 800233a:	687a      	ldr	r2, [r7, #4]
 800233c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800233e:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002340:	4293      	cmp	r3, r2
 8002342:	d119      	bne.n	8002378 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800234e:	085b      	lsrs	r3, r3, #1
 8002350:	3b01      	subs	r3, #1
 8002352:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002354:	429a      	cmp	r2, r3
 8002356:	d10f      	bne.n	8002378 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002362:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002364:	429a      	cmp	r2, r3
 8002366:	d107      	bne.n	8002378 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002372:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002374:	429a      	cmp	r2, r3
 8002376:	d001      	beq.n	800237c <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8002378:	2301      	movs	r3, #1
 800237a:	e000      	b.n	800237e <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 800237c:	2300      	movs	r3, #0
}
 800237e:	4618      	mov	r0, r3
 8002380:	3718      	adds	r7, #24
 8002382:	46bd      	mov	sp, r7
 8002384:	bd80      	pop	{r7, pc}
 8002386:	bf00      	nop
 8002388:	40023800 	.word	0x40023800

0800238c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800238c:	b580      	push	{r7, lr}
 800238e:	b084      	sub	sp, #16
 8002390:	af00      	add	r7, sp, #0
 8002392:	6078      	str	r0, [r7, #4]
 8002394:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8002396:	2300      	movs	r3, #0
 8002398:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	2b00      	cmp	r3, #0
 800239e:	d101      	bne.n	80023a4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80023a0:	2301      	movs	r3, #1
 80023a2:	e0d0      	b.n	8002546 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80023a4:	4b6a      	ldr	r3, [pc, #424]	@ (8002550 <HAL_RCC_ClockConfig+0x1c4>)
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	f003 030f 	and.w	r3, r3, #15
 80023ac:	683a      	ldr	r2, [r7, #0]
 80023ae:	429a      	cmp	r2, r3
 80023b0:	d910      	bls.n	80023d4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023b2:	4b67      	ldr	r3, [pc, #412]	@ (8002550 <HAL_RCC_ClockConfig+0x1c4>)
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	f023 020f 	bic.w	r2, r3, #15
 80023ba:	4965      	ldr	r1, [pc, #404]	@ (8002550 <HAL_RCC_ClockConfig+0x1c4>)
 80023bc:	683b      	ldr	r3, [r7, #0]
 80023be:	4313      	orrs	r3, r2
 80023c0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80023c2:	4b63      	ldr	r3, [pc, #396]	@ (8002550 <HAL_RCC_ClockConfig+0x1c4>)
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	f003 030f 	and.w	r3, r3, #15
 80023ca:	683a      	ldr	r2, [r7, #0]
 80023cc:	429a      	cmp	r2, r3
 80023ce:	d001      	beq.n	80023d4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80023d0:	2301      	movs	r3, #1
 80023d2:	e0b8      	b.n	8002546 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	f003 0302 	and.w	r3, r3, #2
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d020      	beq.n	8002422 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	f003 0304 	and.w	r3, r3, #4
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d005      	beq.n	80023f8 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80023ec:	4b59      	ldr	r3, [pc, #356]	@ (8002554 <HAL_RCC_ClockConfig+0x1c8>)
 80023ee:	689b      	ldr	r3, [r3, #8]
 80023f0:	4a58      	ldr	r2, [pc, #352]	@ (8002554 <HAL_RCC_ClockConfig+0x1c8>)
 80023f2:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80023f6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	f003 0308 	and.w	r3, r3, #8
 8002400:	2b00      	cmp	r3, #0
 8002402:	d005      	beq.n	8002410 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002404:	4b53      	ldr	r3, [pc, #332]	@ (8002554 <HAL_RCC_ClockConfig+0x1c8>)
 8002406:	689b      	ldr	r3, [r3, #8]
 8002408:	4a52      	ldr	r2, [pc, #328]	@ (8002554 <HAL_RCC_ClockConfig+0x1c8>)
 800240a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800240e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002410:	4b50      	ldr	r3, [pc, #320]	@ (8002554 <HAL_RCC_ClockConfig+0x1c8>)
 8002412:	689b      	ldr	r3, [r3, #8]
 8002414:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	689b      	ldr	r3, [r3, #8]
 800241c:	494d      	ldr	r1, [pc, #308]	@ (8002554 <HAL_RCC_ClockConfig+0x1c8>)
 800241e:	4313      	orrs	r3, r2
 8002420:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	f003 0301 	and.w	r3, r3, #1
 800242a:	2b00      	cmp	r3, #0
 800242c:	d040      	beq.n	80024b0 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	685b      	ldr	r3, [r3, #4]
 8002432:	2b01      	cmp	r3, #1
 8002434:	d107      	bne.n	8002446 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002436:	4b47      	ldr	r3, [pc, #284]	@ (8002554 <HAL_RCC_ClockConfig+0x1c8>)
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800243e:	2b00      	cmp	r3, #0
 8002440:	d115      	bne.n	800246e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002442:	2301      	movs	r3, #1
 8002444:	e07f      	b.n	8002546 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	685b      	ldr	r3, [r3, #4]
 800244a:	2b02      	cmp	r3, #2
 800244c:	d107      	bne.n	800245e <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800244e:	4b41      	ldr	r3, [pc, #260]	@ (8002554 <HAL_RCC_ClockConfig+0x1c8>)
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002456:	2b00      	cmp	r3, #0
 8002458:	d109      	bne.n	800246e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800245a:	2301      	movs	r3, #1
 800245c:	e073      	b.n	8002546 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800245e:	4b3d      	ldr	r3, [pc, #244]	@ (8002554 <HAL_RCC_ClockConfig+0x1c8>)
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	f003 0302 	and.w	r3, r3, #2
 8002466:	2b00      	cmp	r3, #0
 8002468:	d101      	bne.n	800246e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800246a:	2301      	movs	r3, #1
 800246c:	e06b      	b.n	8002546 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800246e:	4b39      	ldr	r3, [pc, #228]	@ (8002554 <HAL_RCC_ClockConfig+0x1c8>)
 8002470:	689b      	ldr	r3, [r3, #8]
 8002472:	f023 0203 	bic.w	r2, r3, #3
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	685b      	ldr	r3, [r3, #4]
 800247a:	4936      	ldr	r1, [pc, #216]	@ (8002554 <HAL_RCC_ClockConfig+0x1c8>)
 800247c:	4313      	orrs	r3, r2
 800247e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002480:	f7ff f93e 	bl	8001700 <HAL_GetTick>
 8002484:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002486:	e00a      	b.n	800249e <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002488:	f7ff f93a 	bl	8001700 <HAL_GetTick>
 800248c:	4602      	mov	r2, r0
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	1ad3      	subs	r3, r2, r3
 8002492:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002496:	4293      	cmp	r3, r2
 8002498:	d901      	bls.n	800249e <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800249a:	2303      	movs	r3, #3
 800249c:	e053      	b.n	8002546 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800249e:	4b2d      	ldr	r3, [pc, #180]	@ (8002554 <HAL_RCC_ClockConfig+0x1c8>)
 80024a0:	689b      	ldr	r3, [r3, #8]
 80024a2:	f003 020c 	and.w	r2, r3, #12
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	685b      	ldr	r3, [r3, #4]
 80024aa:	009b      	lsls	r3, r3, #2
 80024ac:	429a      	cmp	r2, r3
 80024ae:	d1eb      	bne.n	8002488 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80024b0:	4b27      	ldr	r3, [pc, #156]	@ (8002550 <HAL_RCC_ClockConfig+0x1c4>)
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	f003 030f 	and.w	r3, r3, #15
 80024b8:	683a      	ldr	r2, [r7, #0]
 80024ba:	429a      	cmp	r2, r3
 80024bc:	d210      	bcs.n	80024e0 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024be:	4b24      	ldr	r3, [pc, #144]	@ (8002550 <HAL_RCC_ClockConfig+0x1c4>)
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	f023 020f 	bic.w	r2, r3, #15
 80024c6:	4922      	ldr	r1, [pc, #136]	@ (8002550 <HAL_RCC_ClockConfig+0x1c4>)
 80024c8:	683b      	ldr	r3, [r7, #0]
 80024ca:	4313      	orrs	r3, r2
 80024cc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80024ce:	4b20      	ldr	r3, [pc, #128]	@ (8002550 <HAL_RCC_ClockConfig+0x1c4>)
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	f003 030f 	and.w	r3, r3, #15
 80024d6:	683a      	ldr	r2, [r7, #0]
 80024d8:	429a      	cmp	r2, r3
 80024da:	d001      	beq.n	80024e0 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80024dc:	2301      	movs	r3, #1
 80024de:	e032      	b.n	8002546 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	f003 0304 	and.w	r3, r3, #4
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d008      	beq.n	80024fe <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80024ec:	4b19      	ldr	r3, [pc, #100]	@ (8002554 <HAL_RCC_ClockConfig+0x1c8>)
 80024ee:	689b      	ldr	r3, [r3, #8]
 80024f0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	68db      	ldr	r3, [r3, #12]
 80024f8:	4916      	ldr	r1, [pc, #88]	@ (8002554 <HAL_RCC_ClockConfig+0x1c8>)
 80024fa:	4313      	orrs	r3, r2
 80024fc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	f003 0308 	and.w	r3, r3, #8
 8002506:	2b00      	cmp	r3, #0
 8002508:	d009      	beq.n	800251e <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800250a:	4b12      	ldr	r3, [pc, #72]	@ (8002554 <HAL_RCC_ClockConfig+0x1c8>)
 800250c:	689b      	ldr	r3, [r3, #8]
 800250e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	691b      	ldr	r3, [r3, #16]
 8002516:	00db      	lsls	r3, r3, #3
 8002518:	490e      	ldr	r1, [pc, #56]	@ (8002554 <HAL_RCC_ClockConfig+0x1c8>)
 800251a:	4313      	orrs	r3, r2
 800251c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800251e:	f000 f821 	bl	8002564 <HAL_RCC_GetSysClockFreq>
 8002522:	4602      	mov	r2, r0
 8002524:	4b0b      	ldr	r3, [pc, #44]	@ (8002554 <HAL_RCC_ClockConfig+0x1c8>)
 8002526:	689b      	ldr	r3, [r3, #8]
 8002528:	091b      	lsrs	r3, r3, #4
 800252a:	f003 030f 	and.w	r3, r3, #15
 800252e:	490a      	ldr	r1, [pc, #40]	@ (8002558 <HAL_RCC_ClockConfig+0x1cc>)
 8002530:	5ccb      	ldrb	r3, [r1, r3]
 8002532:	fa22 f303 	lsr.w	r3, r2, r3
 8002536:	4a09      	ldr	r2, [pc, #36]	@ (800255c <HAL_RCC_ClockConfig+0x1d0>)
 8002538:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800253a:	4b09      	ldr	r3, [pc, #36]	@ (8002560 <HAL_RCC_ClockConfig+0x1d4>)
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	4618      	mov	r0, r3
 8002540:	f7ff f89a 	bl	8001678 <HAL_InitTick>

  return HAL_OK;
 8002544:	2300      	movs	r3, #0
}
 8002546:	4618      	mov	r0, r3
 8002548:	3710      	adds	r7, #16
 800254a:	46bd      	mov	sp, r7
 800254c:	bd80      	pop	{r7, pc}
 800254e:	bf00      	nop
 8002550:	40023c00 	.word	0x40023c00
 8002554:	40023800 	.word	0x40023800
 8002558:	080054a8 	.word	0x080054a8
 800255c:	20000014 	.word	0x20000014
 8002560:	20000018 	.word	0x20000018

08002564 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002564:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002568:	b094      	sub	sp, #80	@ 0x50
 800256a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 800256c:	2300      	movs	r3, #0
 800256e:	647b      	str	r3, [r7, #68]	@ 0x44
 8002570:	2300      	movs	r3, #0
 8002572:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002574:	2300      	movs	r3, #0
 8002576:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0;
 8002578:	2300      	movs	r3, #0
 800257a:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800257c:	4b79      	ldr	r3, [pc, #484]	@ (8002764 <HAL_RCC_GetSysClockFreq+0x200>)
 800257e:	689b      	ldr	r3, [r3, #8]
 8002580:	f003 030c 	and.w	r3, r3, #12
 8002584:	2b08      	cmp	r3, #8
 8002586:	d00d      	beq.n	80025a4 <HAL_RCC_GetSysClockFreq+0x40>
 8002588:	2b08      	cmp	r3, #8
 800258a:	f200 80e1 	bhi.w	8002750 <HAL_RCC_GetSysClockFreq+0x1ec>
 800258e:	2b00      	cmp	r3, #0
 8002590:	d002      	beq.n	8002598 <HAL_RCC_GetSysClockFreq+0x34>
 8002592:	2b04      	cmp	r3, #4
 8002594:	d003      	beq.n	800259e <HAL_RCC_GetSysClockFreq+0x3a>
 8002596:	e0db      	b.n	8002750 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002598:	4b73      	ldr	r3, [pc, #460]	@ (8002768 <HAL_RCC_GetSysClockFreq+0x204>)
 800259a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800259c:	e0db      	b.n	8002756 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800259e:	4b73      	ldr	r3, [pc, #460]	@ (800276c <HAL_RCC_GetSysClockFreq+0x208>)
 80025a0:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80025a2:	e0d8      	b.n	8002756 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80025a4:	4b6f      	ldr	r3, [pc, #444]	@ (8002764 <HAL_RCC_GetSysClockFreq+0x200>)
 80025a6:	685b      	ldr	r3, [r3, #4]
 80025a8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80025ac:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80025ae:	4b6d      	ldr	r3, [pc, #436]	@ (8002764 <HAL_RCC_GetSysClockFreq+0x200>)
 80025b0:	685b      	ldr	r3, [r3, #4]
 80025b2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d063      	beq.n	8002682 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80025ba:	4b6a      	ldr	r3, [pc, #424]	@ (8002764 <HAL_RCC_GetSysClockFreq+0x200>)
 80025bc:	685b      	ldr	r3, [r3, #4]
 80025be:	099b      	lsrs	r3, r3, #6
 80025c0:	2200      	movs	r2, #0
 80025c2:	63bb      	str	r3, [r7, #56]	@ 0x38
 80025c4:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80025c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80025c8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80025cc:	633b      	str	r3, [r7, #48]	@ 0x30
 80025ce:	2300      	movs	r3, #0
 80025d0:	637b      	str	r3, [r7, #52]	@ 0x34
 80025d2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80025d6:	4622      	mov	r2, r4
 80025d8:	462b      	mov	r3, r5
 80025da:	f04f 0000 	mov.w	r0, #0
 80025de:	f04f 0100 	mov.w	r1, #0
 80025e2:	0159      	lsls	r1, r3, #5
 80025e4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80025e8:	0150      	lsls	r0, r2, #5
 80025ea:	4602      	mov	r2, r0
 80025ec:	460b      	mov	r3, r1
 80025ee:	4621      	mov	r1, r4
 80025f0:	1a51      	subs	r1, r2, r1
 80025f2:	6139      	str	r1, [r7, #16]
 80025f4:	4629      	mov	r1, r5
 80025f6:	eb63 0301 	sbc.w	r3, r3, r1
 80025fa:	617b      	str	r3, [r7, #20]
 80025fc:	f04f 0200 	mov.w	r2, #0
 8002600:	f04f 0300 	mov.w	r3, #0
 8002604:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002608:	4659      	mov	r1, fp
 800260a:	018b      	lsls	r3, r1, #6
 800260c:	4651      	mov	r1, sl
 800260e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002612:	4651      	mov	r1, sl
 8002614:	018a      	lsls	r2, r1, #6
 8002616:	4651      	mov	r1, sl
 8002618:	ebb2 0801 	subs.w	r8, r2, r1
 800261c:	4659      	mov	r1, fp
 800261e:	eb63 0901 	sbc.w	r9, r3, r1
 8002622:	f04f 0200 	mov.w	r2, #0
 8002626:	f04f 0300 	mov.w	r3, #0
 800262a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800262e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002632:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002636:	4690      	mov	r8, r2
 8002638:	4699      	mov	r9, r3
 800263a:	4623      	mov	r3, r4
 800263c:	eb18 0303 	adds.w	r3, r8, r3
 8002640:	60bb      	str	r3, [r7, #8]
 8002642:	462b      	mov	r3, r5
 8002644:	eb49 0303 	adc.w	r3, r9, r3
 8002648:	60fb      	str	r3, [r7, #12]
 800264a:	f04f 0200 	mov.w	r2, #0
 800264e:	f04f 0300 	mov.w	r3, #0
 8002652:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002656:	4629      	mov	r1, r5
 8002658:	024b      	lsls	r3, r1, #9
 800265a:	4621      	mov	r1, r4
 800265c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002660:	4621      	mov	r1, r4
 8002662:	024a      	lsls	r2, r1, #9
 8002664:	4610      	mov	r0, r2
 8002666:	4619      	mov	r1, r3
 8002668:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800266a:	2200      	movs	r2, #0
 800266c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800266e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002670:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002674:	f7fd fe3c 	bl	80002f0 <__aeabi_uldivmod>
 8002678:	4602      	mov	r2, r0
 800267a:	460b      	mov	r3, r1
 800267c:	4613      	mov	r3, r2
 800267e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002680:	e058      	b.n	8002734 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002682:	4b38      	ldr	r3, [pc, #224]	@ (8002764 <HAL_RCC_GetSysClockFreq+0x200>)
 8002684:	685b      	ldr	r3, [r3, #4]
 8002686:	099b      	lsrs	r3, r3, #6
 8002688:	2200      	movs	r2, #0
 800268a:	4618      	mov	r0, r3
 800268c:	4611      	mov	r1, r2
 800268e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002692:	623b      	str	r3, [r7, #32]
 8002694:	2300      	movs	r3, #0
 8002696:	627b      	str	r3, [r7, #36]	@ 0x24
 8002698:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800269c:	4642      	mov	r2, r8
 800269e:	464b      	mov	r3, r9
 80026a0:	f04f 0000 	mov.w	r0, #0
 80026a4:	f04f 0100 	mov.w	r1, #0
 80026a8:	0159      	lsls	r1, r3, #5
 80026aa:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80026ae:	0150      	lsls	r0, r2, #5
 80026b0:	4602      	mov	r2, r0
 80026b2:	460b      	mov	r3, r1
 80026b4:	4641      	mov	r1, r8
 80026b6:	ebb2 0a01 	subs.w	sl, r2, r1
 80026ba:	4649      	mov	r1, r9
 80026bc:	eb63 0b01 	sbc.w	fp, r3, r1
 80026c0:	f04f 0200 	mov.w	r2, #0
 80026c4:	f04f 0300 	mov.w	r3, #0
 80026c8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80026cc:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80026d0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80026d4:	ebb2 040a 	subs.w	r4, r2, sl
 80026d8:	eb63 050b 	sbc.w	r5, r3, fp
 80026dc:	f04f 0200 	mov.w	r2, #0
 80026e0:	f04f 0300 	mov.w	r3, #0
 80026e4:	00eb      	lsls	r3, r5, #3
 80026e6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80026ea:	00e2      	lsls	r2, r4, #3
 80026ec:	4614      	mov	r4, r2
 80026ee:	461d      	mov	r5, r3
 80026f0:	4643      	mov	r3, r8
 80026f2:	18e3      	adds	r3, r4, r3
 80026f4:	603b      	str	r3, [r7, #0]
 80026f6:	464b      	mov	r3, r9
 80026f8:	eb45 0303 	adc.w	r3, r5, r3
 80026fc:	607b      	str	r3, [r7, #4]
 80026fe:	f04f 0200 	mov.w	r2, #0
 8002702:	f04f 0300 	mov.w	r3, #0
 8002706:	e9d7 4500 	ldrd	r4, r5, [r7]
 800270a:	4629      	mov	r1, r5
 800270c:	028b      	lsls	r3, r1, #10
 800270e:	4621      	mov	r1, r4
 8002710:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002714:	4621      	mov	r1, r4
 8002716:	028a      	lsls	r2, r1, #10
 8002718:	4610      	mov	r0, r2
 800271a:	4619      	mov	r1, r3
 800271c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800271e:	2200      	movs	r2, #0
 8002720:	61bb      	str	r3, [r7, #24]
 8002722:	61fa      	str	r2, [r7, #28]
 8002724:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002728:	f7fd fde2 	bl	80002f0 <__aeabi_uldivmod>
 800272c:	4602      	mov	r2, r0
 800272e:	460b      	mov	r3, r1
 8002730:	4613      	mov	r3, r2
 8002732:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8002734:	4b0b      	ldr	r3, [pc, #44]	@ (8002764 <HAL_RCC_GetSysClockFreq+0x200>)
 8002736:	685b      	ldr	r3, [r3, #4]
 8002738:	0c1b      	lsrs	r3, r3, #16
 800273a:	f003 0303 	and.w	r3, r3, #3
 800273e:	3301      	adds	r3, #1
 8002740:	005b      	lsls	r3, r3, #1
 8002742:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8002744:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002746:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002748:	fbb2 f3f3 	udiv	r3, r2, r3
 800274c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800274e:	e002      	b.n	8002756 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002750:	4b05      	ldr	r3, [pc, #20]	@ (8002768 <HAL_RCC_GetSysClockFreq+0x204>)
 8002752:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002754:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002756:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8002758:	4618      	mov	r0, r3
 800275a:	3750      	adds	r7, #80	@ 0x50
 800275c:	46bd      	mov	sp, r7
 800275e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002762:	bf00      	nop
 8002764:	40023800 	.word	0x40023800
 8002768:	00f42400 	.word	0x00f42400
 800276c:	007a1200 	.word	0x007a1200

08002770 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002770:	b480      	push	{r7}
 8002772:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002774:	4b03      	ldr	r3, [pc, #12]	@ (8002784 <HAL_RCC_GetHCLKFreq+0x14>)
 8002776:	681b      	ldr	r3, [r3, #0]
}
 8002778:	4618      	mov	r0, r3
 800277a:	46bd      	mov	sp, r7
 800277c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002780:	4770      	bx	lr
 8002782:	bf00      	nop
 8002784:	20000014 	.word	0x20000014

08002788 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002788:	b580      	push	{r7, lr}
 800278a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800278c:	f7ff fff0 	bl	8002770 <HAL_RCC_GetHCLKFreq>
 8002790:	4602      	mov	r2, r0
 8002792:	4b05      	ldr	r3, [pc, #20]	@ (80027a8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002794:	689b      	ldr	r3, [r3, #8]
 8002796:	0a9b      	lsrs	r3, r3, #10
 8002798:	f003 0307 	and.w	r3, r3, #7
 800279c:	4903      	ldr	r1, [pc, #12]	@ (80027ac <HAL_RCC_GetPCLK1Freq+0x24>)
 800279e:	5ccb      	ldrb	r3, [r1, r3]
 80027a0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80027a4:	4618      	mov	r0, r3
 80027a6:	bd80      	pop	{r7, pc}
 80027a8:	40023800 	.word	0x40023800
 80027ac:	080054b8 	.word	0x080054b8

080027b0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80027b0:	b580      	push	{r7, lr}
 80027b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80027b4:	f7ff ffdc 	bl	8002770 <HAL_RCC_GetHCLKFreq>
 80027b8:	4602      	mov	r2, r0
 80027ba:	4b05      	ldr	r3, [pc, #20]	@ (80027d0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80027bc:	689b      	ldr	r3, [r3, #8]
 80027be:	0b5b      	lsrs	r3, r3, #13
 80027c0:	f003 0307 	and.w	r3, r3, #7
 80027c4:	4903      	ldr	r1, [pc, #12]	@ (80027d4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80027c6:	5ccb      	ldrb	r3, [r1, r3]
 80027c8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80027cc:	4618      	mov	r0, r3
 80027ce:	bd80      	pop	{r7, pc}
 80027d0:	40023800 	.word	0x40023800
 80027d4:	080054b8 	.word	0x080054b8

080027d8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80027d8:	b580      	push	{r7, lr}
 80027da:	b088      	sub	sp, #32
 80027dc:	af00      	add	r7, sp, #0
 80027de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80027e0:	2300      	movs	r3, #0
 80027e2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80027e4:	2300      	movs	r3, #0
 80027e6:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80027e8:	2300      	movs	r3, #0
 80027ea:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80027ec:	2300      	movs	r3, #0
 80027ee:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80027f0:	2300      	movs	r3, #0
 80027f2:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	f003 0301 	and.w	r3, r3, #1
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d012      	beq.n	8002826 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002800:	4b69      	ldr	r3, [pc, #420]	@ (80029a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002802:	689b      	ldr	r3, [r3, #8]
 8002804:	4a68      	ldr	r2, [pc, #416]	@ (80029a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002806:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800280a:	6093      	str	r3, [r2, #8]
 800280c:	4b66      	ldr	r3, [pc, #408]	@ (80029a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800280e:	689a      	ldr	r2, [r3, #8]
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002814:	4964      	ldr	r1, [pc, #400]	@ (80029a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002816:	4313      	orrs	r3, r2
 8002818:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800281e:	2b00      	cmp	r3, #0
 8002820:	d101      	bne.n	8002826 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8002822:	2301      	movs	r3, #1
 8002824:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800282e:	2b00      	cmp	r3, #0
 8002830:	d017      	beq.n	8002862 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002832:	4b5d      	ldr	r3, [pc, #372]	@ (80029a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002834:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002838:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002840:	4959      	ldr	r1, [pc, #356]	@ (80029a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002842:	4313      	orrs	r3, r2
 8002844:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800284c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002850:	d101      	bne.n	8002856 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8002852:	2301      	movs	r3, #1
 8002854:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800285a:	2b00      	cmp	r3, #0
 800285c:	d101      	bne.n	8002862 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800285e:	2301      	movs	r3, #1
 8002860:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800286a:	2b00      	cmp	r3, #0
 800286c:	d017      	beq.n	800289e <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800286e:	4b4e      	ldr	r3, [pc, #312]	@ (80029a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002870:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002874:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800287c:	494a      	ldr	r1, [pc, #296]	@ (80029a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800287e:	4313      	orrs	r3, r2
 8002880:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002888:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800288c:	d101      	bne.n	8002892 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800288e:	2301      	movs	r3, #1
 8002890:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002896:	2b00      	cmp	r3, #0
 8002898:	d101      	bne.n	800289e <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800289a:	2301      	movs	r3, #1
 800289c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d001      	beq.n	80028ae <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80028aa:	2301      	movs	r3, #1
 80028ac:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	f003 0320 	and.w	r3, r3, #32
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	f000 808b 	beq.w	80029d2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80028bc:	4b3a      	ldr	r3, [pc, #232]	@ (80029a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80028be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028c0:	4a39      	ldr	r2, [pc, #228]	@ (80029a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80028c2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80028c6:	6413      	str	r3, [r2, #64]	@ 0x40
 80028c8:	4b37      	ldr	r3, [pc, #220]	@ (80029a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80028ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028cc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80028d0:	60bb      	str	r3, [r7, #8]
 80028d2:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80028d4:	4b35      	ldr	r3, [pc, #212]	@ (80029ac <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	4a34      	ldr	r2, [pc, #208]	@ (80029ac <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80028da:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80028de:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80028e0:	f7fe ff0e 	bl	8001700 <HAL_GetTick>
 80028e4:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80028e6:	e008      	b.n	80028fa <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80028e8:	f7fe ff0a 	bl	8001700 <HAL_GetTick>
 80028ec:	4602      	mov	r2, r0
 80028ee:	697b      	ldr	r3, [r7, #20]
 80028f0:	1ad3      	subs	r3, r2, r3
 80028f2:	2b64      	cmp	r3, #100	@ 0x64
 80028f4:	d901      	bls.n	80028fa <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80028f6:	2303      	movs	r3, #3
 80028f8:	e38f      	b.n	800301a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80028fa:	4b2c      	ldr	r3, [pc, #176]	@ (80029ac <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002902:	2b00      	cmp	r3, #0
 8002904:	d0f0      	beq.n	80028e8 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002906:	4b28      	ldr	r3, [pc, #160]	@ (80029a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002908:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800290a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800290e:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002910:	693b      	ldr	r3, [r7, #16]
 8002912:	2b00      	cmp	r3, #0
 8002914:	d035      	beq.n	8002982 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800291a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800291e:	693a      	ldr	r2, [r7, #16]
 8002920:	429a      	cmp	r2, r3
 8002922:	d02e      	beq.n	8002982 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002924:	4b20      	ldr	r3, [pc, #128]	@ (80029a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002926:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002928:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800292c:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800292e:	4b1e      	ldr	r3, [pc, #120]	@ (80029a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002930:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002932:	4a1d      	ldr	r2, [pc, #116]	@ (80029a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002934:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002938:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800293a:	4b1b      	ldr	r3, [pc, #108]	@ (80029a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800293c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800293e:	4a1a      	ldr	r2, [pc, #104]	@ (80029a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002940:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002944:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8002946:	4a18      	ldr	r2, [pc, #96]	@ (80029a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002948:	693b      	ldr	r3, [r7, #16]
 800294a:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800294c:	4b16      	ldr	r3, [pc, #88]	@ (80029a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800294e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002950:	f003 0301 	and.w	r3, r3, #1
 8002954:	2b01      	cmp	r3, #1
 8002956:	d114      	bne.n	8002982 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002958:	f7fe fed2 	bl	8001700 <HAL_GetTick>
 800295c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800295e:	e00a      	b.n	8002976 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002960:	f7fe fece 	bl	8001700 <HAL_GetTick>
 8002964:	4602      	mov	r2, r0
 8002966:	697b      	ldr	r3, [r7, #20]
 8002968:	1ad3      	subs	r3, r2, r3
 800296a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800296e:	4293      	cmp	r3, r2
 8002970:	d901      	bls.n	8002976 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8002972:	2303      	movs	r3, #3
 8002974:	e351      	b.n	800301a <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002976:	4b0c      	ldr	r3, [pc, #48]	@ (80029a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002978:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800297a:	f003 0302 	and.w	r3, r3, #2
 800297e:	2b00      	cmp	r3, #0
 8002980:	d0ee      	beq.n	8002960 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002986:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800298a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800298e:	d111      	bne.n	80029b4 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8002990:	4b05      	ldr	r3, [pc, #20]	@ (80029a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002992:	689b      	ldr	r3, [r3, #8]
 8002994:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800299c:	4b04      	ldr	r3, [pc, #16]	@ (80029b0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800299e:	400b      	ands	r3, r1
 80029a0:	4901      	ldr	r1, [pc, #4]	@ (80029a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80029a2:	4313      	orrs	r3, r2
 80029a4:	608b      	str	r3, [r1, #8]
 80029a6:	e00b      	b.n	80029c0 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80029a8:	40023800 	.word	0x40023800
 80029ac:	40007000 	.word	0x40007000
 80029b0:	0ffffcff 	.word	0x0ffffcff
 80029b4:	4bac      	ldr	r3, [pc, #688]	@ (8002c68 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80029b6:	689b      	ldr	r3, [r3, #8]
 80029b8:	4aab      	ldr	r2, [pc, #684]	@ (8002c68 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80029ba:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 80029be:	6093      	str	r3, [r2, #8]
 80029c0:	4ba9      	ldr	r3, [pc, #676]	@ (8002c68 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80029c2:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029c8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80029cc:	49a6      	ldr	r1, [pc, #664]	@ (8002c68 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80029ce:	4313      	orrs	r3, r2
 80029d0:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	f003 0310 	and.w	r3, r3, #16
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d010      	beq.n	8002a00 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80029de:	4ba2      	ldr	r3, [pc, #648]	@ (8002c68 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80029e0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80029e4:	4aa0      	ldr	r2, [pc, #640]	@ (8002c68 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80029e6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80029ea:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80029ee:	4b9e      	ldr	r3, [pc, #632]	@ (8002c68 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80029f0:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80029f8:	499b      	ldr	r1, [pc, #620]	@ (8002c68 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80029fa:	4313      	orrs	r3, r2
 80029fc:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d00a      	beq.n	8002a22 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002a0c:	4b96      	ldr	r3, [pc, #600]	@ (8002c68 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002a0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002a12:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002a1a:	4993      	ldr	r1, [pc, #588]	@ (8002c68 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002a1c:	4313      	orrs	r3, r2
 8002a1e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d00a      	beq.n	8002a44 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002a2e:	4b8e      	ldr	r3, [pc, #568]	@ (8002c68 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002a30:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002a34:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002a3c:	498a      	ldr	r1, [pc, #552]	@ (8002c68 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002a3e:	4313      	orrs	r3, r2
 8002a40:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d00a      	beq.n	8002a66 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002a50:	4b85      	ldr	r3, [pc, #532]	@ (8002c68 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002a52:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002a56:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002a5e:	4982      	ldr	r1, [pc, #520]	@ (8002c68 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002a60:	4313      	orrs	r3, r2
 8002a62:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d00a      	beq.n	8002a88 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002a72:	4b7d      	ldr	r3, [pc, #500]	@ (8002c68 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002a74:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002a78:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a80:	4979      	ldr	r1, [pc, #484]	@ (8002c68 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002a82:	4313      	orrs	r3, r2
 8002a84:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d00a      	beq.n	8002aaa <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002a94:	4b74      	ldr	r3, [pc, #464]	@ (8002c68 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002a96:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002a9a:	f023 0203 	bic.w	r2, r3, #3
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002aa2:	4971      	ldr	r1, [pc, #452]	@ (8002c68 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002aa4:	4313      	orrs	r3, r2
 8002aa6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d00a      	beq.n	8002acc <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002ab6:	4b6c      	ldr	r3, [pc, #432]	@ (8002c68 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002ab8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002abc:	f023 020c 	bic.w	r2, r3, #12
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002ac4:	4968      	ldr	r1, [pc, #416]	@ (8002c68 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002ac6:	4313      	orrs	r3, r2
 8002ac8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d00a      	beq.n	8002aee <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002ad8:	4b63      	ldr	r3, [pc, #396]	@ (8002c68 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002ada:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002ade:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002ae6:	4960      	ldr	r1, [pc, #384]	@ (8002c68 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002ae8:	4313      	orrs	r3, r2
 8002aea:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d00a      	beq.n	8002b10 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002afa:	4b5b      	ldr	r3, [pc, #364]	@ (8002c68 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002afc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002b00:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002b08:	4957      	ldr	r1, [pc, #348]	@ (8002c68 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002b0a:	4313      	orrs	r3, r2
 8002b0c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d00a      	beq.n	8002b32 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002b1c:	4b52      	ldr	r3, [pc, #328]	@ (8002c68 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002b1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002b22:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b2a:	494f      	ldr	r1, [pc, #316]	@ (8002c68 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002b2c:	4313      	orrs	r3, r2
 8002b2e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d00a      	beq.n	8002b54 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8002b3e:	4b4a      	ldr	r3, [pc, #296]	@ (8002c68 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002b40:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002b44:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b4c:	4946      	ldr	r1, [pc, #280]	@ (8002c68 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002b4e:	4313      	orrs	r3, r2
 8002b50:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d00a      	beq.n	8002b76 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8002b60:	4b41      	ldr	r3, [pc, #260]	@ (8002c68 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002b62:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002b66:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b6e:	493e      	ldr	r1, [pc, #248]	@ (8002c68 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002b70:	4313      	orrs	r3, r2
 8002b72:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d00a      	beq.n	8002b98 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8002b82:	4b39      	ldr	r3, [pc, #228]	@ (8002c68 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002b84:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002b88:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002b90:	4935      	ldr	r1, [pc, #212]	@ (8002c68 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002b92:	4313      	orrs	r3, r2
 8002b94:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d00a      	beq.n	8002bba <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002ba4:	4b30      	ldr	r3, [pc, #192]	@ (8002c68 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002ba6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002baa:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002bb2:	492d      	ldr	r1, [pc, #180]	@ (8002c68 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002bb4:	4313      	orrs	r3, r2
 8002bb6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d011      	beq.n	8002bea <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8002bc6:	4b28      	ldr	r3, [pc, #160]	@ (8002c68 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002bc8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002bcc:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002bd4:	4924      	ldr	r1, [pc, #144]	@ (8002c68 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002bd6:	4313      	orrs	r3, r2
 8002bd8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002be0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002be4:	d101      	bne.n	8002bea <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8002be6:	2301      	movs	r3, #1
 8002be8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	f003 0308 	and.w	r3, r3, #8
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d001      	beq.n	8002bfa <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8002bf6:	2301      	movs	r3, #1
 8002bf8:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d00a      	beq.n	8002c1c <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002c06:	4b18      	ldr	r3, [pc, #96]	@ (8002c68 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c08:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002c0c:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002c14:	4914      	ldr	r1, [pc, #80]	@ (8002c68 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c16:	4313      	orrs	r3, r2
 8002c18:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d00b      	beq.n	8002c40 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002c28:	4b0f      	ldr	r3, [pc, #60]	@ (8002c68 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002c2e:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002c38:	490b      	ldr	r1, [pc, #44]	@ (8002c68 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c3a:	4313      	orrs	r3, r2
 8002c3c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d00f      	beq.n	8002c6c <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8002c4c:	4b06      	ldr	r3, [pc, #24]	@ (8002c68 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002c52:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002c5c:	4902      	ldr	r1, [pc, #8]	@ (8002c68 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c5e:	4313      	orrs	r3, r2
 8002c60:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8002c64:	e002      	b.n	8002c6c <HAL_RCCEx_PeriphCLKConfig+0x494>
 8002c66:	bf00      	nop
 8002c68:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d00b      	beq.n	8002c90 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002c78:	4b8a      	ldr	r3, [pc, #552]	@ (8002ea4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002c7a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002c7e:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002c88:	4986      	ldr	r1, [pc, #536]	@ (8002ea4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002c8a:	4313      	orrs	r3, r2
 8002c8c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d00b      	beq.n	8002cb4 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8002c9c:	4b81      	ldr	r3, [pc, #516]	@ (8002ea4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002c9e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002ca2:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002cac:	497d      	ldr	r1, [pc, #500]	@ (8002ea4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002cae:	4313      	orrs	r3, r2
 8002cb0:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8002cb4:	69fb      	ldr	r3, [r7, #28]
 8002cb6:	2b01      	cmp	r3, #1
 8002cb8:	d006      	beq.n	8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	f000 80d6 	beq.w	8002e74 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002cc8:	4b76      	ldr	r3, [pc, #472]	@ (8002ea4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	4a75      	ldr	r2, [pc, #468]	@ (8002ea4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002cce:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8002cd2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002cd4:	f7fe fd14 	bl	8001700 <HAL_GetTick>
 8002cd8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002cda:	e008      	b.n	8002cee <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002cdc:	f7fe fd10 	bl	8001700 <HAL_GetTick>
 8002ce0:	4602      	mov	r2, r0
 8002ce2:	697b      	ldr	r3, [r7, #20]
 8002ce4:	1ad3      	subs	r3, r2, r3
 8002ce6:	2b64      	cmp	r3, #100	@ 0x64
 8002ce8:	d901      	bls.n	8002cee <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002cea:	2303      	movs	r3, #3
 8002cec:	e195      	b.n	800301a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002cee:	4b6d      	ldr	r3, [pc, #436]	@ (8002ea4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d1f0      	bne.n	8002cdc <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	f003 0301 	and.w	r3, r3, #1
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d021      	beq.n	8002d4a <HAL_RCCEx_PeriphCLKConfig+0x572>
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d11d      	bne.n	8002d4a <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002d0e:	4b65      	ldr	r3, [pc, #404]	@ (8002ea4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002d10:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002d14:	0c1b      	lsrs	r3, r3, #16
 8002d16:	f003 0303 	and.w	r3, r3, #3
 8002d1a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002d1c:	4b61      	ldr	r3, [pc, #388]	@ (8002ea4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002d1e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002d22:	0e1b      	lsrs	r3, r3, #24
 8002d24:	f003 030f 	and.w	r3, r3, #15
 8002d28:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	685b      	ldr	r3, [r3, #4]
 8002d2e:	019a      	lsls	r2, r3, #6
 8002d30:	693b      	ldr	r3, [r7, #16]
 8002d32:	041b      	lsls	r3, r3, #16
 8002d34:	431a      	orrs	r2, r3
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	061b      	lsls	r3, r3, #24
 8002d3a:	431a      	orrs	r2, r3
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	689b      	ldr	r3, [r3, #8]
 8002d40:	071b      	lsls	r3, r3, #28
 8002d42:	4958      	ldr	r1, [pc, #352]	@ (8002ea4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002d44:	4313      	orrs	r3, r2
 8002d46:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d004      	beq.n	8002d60 <HAL_RCCEx_PeriphCLKConfig+0x588>
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002d5a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002d5e:	d00a      	beq.n	8002d76 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d02e      	beq.n	8002dca <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d70:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002d74:	d129      	bne.n	8002dca <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002d76:	4b4b      	ldr	r3, [pc, #300]	@ (8002ea4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002d78:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002d7c:	0c1b      	lsrs	r3, r3, #16
 8002d7e:	f003 0303 	and.w	r3, r3, #3
 8002d82:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002d84:	4b47      	ldr	r3, [pc, #284]	@ (8002ea4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002d86:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002d8a:	0f1b      	lsrs	r3, r3, #28
 8002d8c:	f003 0307 	and.w	r3, r3, #7
 8002d90:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	685b      	ldr	r3, [r3, #4]
 8002d96:	019a      	lsls	r2, r3, #6
 8002d98:	693b      	ldr	r3, [r7, #16]
 8002d9a:	041b      	lsls	r3, r3, #16
 8002d9c:	431a      	orrs	r2, r3
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	68db      	ldr	r3, [r3, #12]
 8002da2:	061b      	lsls	r3, r3, #24
 8002da4:	431a      	orrs	r2, r3
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	071b      	lsls	r3, r3, #28
 8002daa:	493e      	ldr	r1, [pc, #248]	@ (8002ea4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002dac:	4313      	orrs	r3, r2
 8002dae:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8002db2:	4b3c      	ldr	r3, [pc, #240]	@ (8002ea4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002db4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002db8:	f023 021f 	bic.w	r2, r3, #31
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002dc0:	3b01      	subs	r3, #1
 8002dc2:	4938      	ldr	r1, [pc, #224]	@ (8002ea4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002dc4:	4313      	orrs	r3, r2
 8002dc6:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d01d      	beq.n	8002e12 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002dd6:	4b33      	ldr	r3, [pc, #204]	@ (8002ea4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002dd8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002ddc:	0e1b      	lsrs	r3, r3, #24
 8002dde:	f003 030f 	and.w	r3, r3, #15
 8002de2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002de4:	4b2f      	ldr	r3, [pc, #188]	@ (8002ea4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002de6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002dea:	0f1b      	lsrs	r3, r3, #28
 8002dec:	f003 0307 	and.w	r3, r3, #7
 8002df0:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	685b      	ldr	r3, [r3, #4]
 8002df6:	019a      	lsls	r2, r3, #6
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	691b      	ldr	r3, [r3, #16]
 8002dfc:	041b      	lsls	r3, r3, #16
 8002dfe:	431a      	orrs	r2, r3
 8002e00:	693b      	ldr	r3, [r7, #16]
 8002e02:	061b      	lsls	r3, r3, #24
 8002e04:	431a      	orrs	r2, r3
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	071b      	lsls	r3, r3, #28
 8002e0a:	4926      	ldr	r1, [pc, #152]	@ (8002ea4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002e0c:	4313      	orrs	r3, r2
 8002e0e:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d011      	beq.n	8002e42 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	685b      	ldr	r3, [r3, #4]
 8002e22:	019a      	lsls	r2, r3, #6
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	691b      	ldr	r3, [r3, #16]
 8002e28:	041b      	lsls	r3, r3, #16
 8002e2a:	431a      	orrs	r2, r3
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	68db      	ldr	r3, [r3, #12]
 8002e30:	061b      	lsls	r3, r3, #24
 8002e32:	431a      	orrs	r2, r3
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	689b      	ldr	r3, [r3, #8]
 8002e38:	071b      	lsls	r3, r3, #28
 8002e3a:	491a      	ldr	r1, [pc, #104]	@ (8002ea4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002e3c:	4313      	orrs	r3, r2
 8002e3e:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002e42:	4b18      	ldr	r3, [pc, #96]	@ (8002ea4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	4a17      	ldr	r2, [pc, #92]	@ (8002ea4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002e48:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002e4c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002e4e:	f7fe fc57 	bl	8001700 <HAL_GetTick>
 8002e52:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002e54:	e008      	b.n	8002e68 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002e56:	f7fe fc53 	bl	8001700 <HAL_GetTick>
 8002e5a:	4602      	mov	r2, r0
 8002e5c:	697b      	ldr	r3, [r7, #20]
 8002e5e:	1ad3      	subs	r3, r2, r3
 8002e60:	2b64      	cmp	r3, #100	@ 0x64
 8002e62:	d901      	bls.n	8002e68 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002e64:	2303      	movs	r3, #3
 8002e66:	e0d8      	b.n	800301a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002e68:	4b0e      	ldr	r3, [pc, #56]	@ (8002ea4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d0f0      	beq.n	8002e56 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8002e74:	69bb      	ldr	r3, [r7, #24]
 8002e76:	2b01      	cmp	r3, #1
 8002e78:	f040 80ce 	bne.w	8003018 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8002e7c:	4b09      	ldr	r3, [pc, #36]	@ (8002ea4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	4a08      	ldr	r2, [pc, #32]	@ (8002ea4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002e82:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002e86:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002e88:	f7fe fc3a 	bl	8001700 <HAL_GetTick>
 8002e8c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002e8e:	e00b      	b.n	8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002e90:	f7fe fc36 	bl	8001700 <HAL_GetTick>
 8002e94:	4602      	mov	r2, r0
 8002e96:	697b      	ldr	r3, [r7, #20]
 8002e98:	1ad3      	subs	r3, r2, r3
 8002e9a:	2b64      	cmp	r3, #100	@ 0x64
 8002e9c:	d904      	bls.n	8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002e9e:	2303      	movs	r3, #3
 8002ea0:	e0bb      	b.n	800301a <HAL_RCCEx_PeriphCLKConfig+0x842>
 8002ea2:	bf00      	nop
 8002ea4:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002ea8:	4b5e      	ldr	r3, [pc, #376]	@ (8003024 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002eb0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002eb4:	d0ec      	beq.n	8002e90 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d003      	beq.n	8002eca <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d009      	beq.n	8002ede <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d02e      	beq.n	8002f34 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d12a      	bne.n	8002f34 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002ede:	4b51      	ldr	r3, [pc, #324]	@ (8003024 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002ee0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002ee4:	0c1b      	lsrs	r3, r3, #16
 8002ee6:	f003 0303 	and.w	r3, r3, #3
 8002eea:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002eec:	4b4d      	ldr	r3, [pc, #308]	@ (8003024 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002eee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002ef2:	0f1b      	lsrs	r3, r3, #28
 8002ef4:	f003 0307 	and.w	r3, r3, #7
 8002ef8:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	695b      	ldr	r3, [r3, #20]
 8002efe:	019a      	lsls	r2, r3, #6
 8002f00:	693b      	ldr	r3, [r7, #16]
 8002f02:	041b      	lsls	r3, r3, #16
 8002f04:	431a      	orrs	r2, r3
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	699b      	ldr	r3, [r3, #24]
 8002f0a:	061b      	lsls	r3, r3, #24
 8002f0c:	431a      	orrs	r2, r3
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	071b      	lsls	r3, r3, #28
 8002f12:	4944      	ldr	r1, [pc, #272]	@ (8003024 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002f14:	4313      	orrs	r3, r2
 8002f16:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8002f1a:	4b42      	ldr	r3, [pc, #264]	@ (8003024 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002f1c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002f20:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f28:	3b01      	subs	r3, #1
 8002f2a:	021b      	lsls	r3, r3, #8
 8002f2c:	493d      	ldr	r1, [pc, #244]	@ (8003024 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002f2e:	4313      	orrs	r3, r2
 8002f30:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d022      	beq.n	8002f86 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002f44:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002f48:	d11d      	bne.n	8002f86 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002f4a:	4b36      	ldr	r3, [pc, #216]	@ (8003024 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002f4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f50:	0e1b      	lsrs	r3, r3, #24
 8002f52:	f003 030f 	and.w	r3, r3, #15
 8002f56:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002f58:	4b32      	ldr	r3, [pc, #200]	@ (8003024 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002f5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f5e:	0f1b      	lsrs	r3, r3, #28
 8002f60:	f003 0307 	and.w	r3, r3, #7
 8002f64:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	695b      	ldr	r3, [r3, #20]
 8002f6a:	019a      	lsls	r2, r3, #6
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	6a1b      	ldr	r3, [r3, #32]
 8002f70:	041b      	lsls	r3, r3, #16
 8002f72:	431a      	orrs	r2, r3
 8002f74:	693b      	ldr	r3, [r7, #16]
 8002f76:	061b      	lsls	r3, r3, #24
 8002f78:	431a      	orrs	r2, r3
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	071b      	lsls	r3, r3, #28
 8002f7e:	4929      	ldr	r1, [pc, #164]	@ (8003024 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002f80:	4313      	orrs	r3, r2
 8002f82:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	f003 0308 	and.w	r3, r3, #8
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d028      	beq.n	8002fe4 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002f92:	4b24      	ldr	r3, [pc, #144]	@ (8003024 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002f94:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f98:	0e1b      	lsrs	r3, r3, #24
 8002f9a:	f003 030f 	and.w	r3, r3, #15
 8002f9e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002fa0:	4b20      	ldr	r3, [pc, #128]	@ (8003024 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002fa2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002fa6:	0c1b      	lsrs	r3, r3, #16
 8002fa8:	f003 0303 	and.w	r3, r3, #3
 8002fac:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	695b      	ldr	r3, [r3, #20]
 8002fb2:	019a      	lsls	r2, r3, #6
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	041b      	lsls	r3, r3, #16
 8002fb8:	431a      	orrs	r2, r3
 8002fba:	693b      	ldr	r3, [r7, #16]
 8002fbc:	061b      	lsls	r3, r3, #24
 8002fbe:	431a      	orrs	r2, r3
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	69db      	ldr	r3, [r3, #28]
 8002fc4:	071b      	lsls	r3, r3, #28
 8002fc6:	4917      	ldr	r1, [pc, #92]	@ (8003024 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002fc8:	4313      	orrs	r3, r2
 8002fca:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8002fce:	4b15      	ldr	r3, [pc, #84]	@ (8003024 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002fd0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002fd4:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002fdc:	4911      	ldr	r1, [pc, #68]	@ (8003024 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002fde:	4313      	orrs	r3, r2
 8002fe0:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8002fe4:	4b0f      	ldr	r3, [pc, #60]	@ (8003024 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	4a0e      	ldr	r2, [pc, #56]	@ (8003024 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002fea:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002fee:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002ff0:	f7fe fb86 	bl	8001700 <HAL_GetTick>
 8002ff4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002ff6:	e008      	b.n	800300a <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002ff8:	f7fe fb82 	bl	8001700 <HAL_GetTick>
 8002ffc:	4602      	mov	r2, r0
 8002ffe:	697b      	ldr	r3, [r7, #20]
 8003000:	1ad3      	subs	r3, r2, r3
 8003002:	2b64      	cmp	r3, #100	@ 0x64
 8003004:	d901      	bls.n	800300a <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003006:	2303      	movs	r3, #3
 8003008:	e007      	b.n	800301a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800300a:	4b06      	ldr	r3, [pc, #24]	@ (8003024 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003012:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003016:	d1ef      	bne.n	8002ff8 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8003018:	2300      	movs	r3, #0
}
 800301a:	4618      	mov	r0, r3
 800301c:	3720      	adds	r7, #32
 800301e:	46bd      	mov	sp, r7
 8003020:	bd80      	pop	{r7, pc}
 8003022:	bf00      	nop
 8003024:	40023800 	.word	0x40023800

08003028 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003028:	b580      	push	{r7, lr}
 800302a:	b084      	sub	sp, #16
 800302c:	af00      	add	r7, sp, #0
 800302e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	2b00      	cmp	r3, #0
 8003034:	d101      	bne.n	800303a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003036:	2301      	movs	r3, #1
 8003038:	e09d      	b.n	8003176 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800303e:	2b00      	cmp	r3, #0
 8003040:	d108      	bne.n	8003054 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	685b      	ldr	r3, [r3, #4]
 8003046:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800304a:	d009      	beq.n	8003060 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	2200      	movs	r2, #0
 8003050:	61da      	str	r2, [r3, #28]
 8003052:	e005      	b.n	8003060 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	2200      	movs	r2, #0
 8003058:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	2200      	movs	r2, #0
 800305e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	2200      	movs	r2, #0
 8003064:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800306c:	b2db      	uxtb	r3, r3
 800306e:	2b00      	cmp	r3, #0
 8003070:	d106      	bne.n	8003080 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	2200      	movs	r2, #0
 8003076:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800307a:	6878      	ldr	r0, [r7, #4]
 800307c:	f7fe f8ce 	bl	800121c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	2202      	movs	r2, #2
 8003084:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	681a      	ldr	r2, [r3, #0]
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003096:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	68db      	ldr	r3, [r3, #12]
 800309c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80030a0:	d902      	bls.n	80030a8 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80030a2:	2300      	movs	r3, #0
 80030a4:	60fb      	str	r3, [r7, #12]
 80030a6:	e002      	b.n	80030ae <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80030a8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80030ac:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	68db      	ldr	r3, [r3, #12]
 80030b2:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 80030b6:	d007      	beq.n	80030c8 <HAL_SPI_Init+0xa0>
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	68db      	ldr	r3, [r3, #12]
 80030bc:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80030c0:	d002      	beq.n	80030c8 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	2200      	movs	r2, #0
 80030c6:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	685b      	ldr	r3, [r3, #4]
 80030cc:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	689b      	ldr	r3, [r3, #8]
 80030d4:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80030d8:	431a      	orrs	r2, r3
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	691b      	ldr	r3, [r3, #16]
 80030de:	f003 0302 	and.w	r3, r3, #2
 80030e2:	431a      	orrs	r2, r3
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	695b      	ldr	r3, [r3, #20]
 80030e8:	f003 0301 	and.w	r3, r3, #1
 80030ec:	431a      	orrs	r2, r3
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	699b      	ldr	r3, [r3, #24]
 80030f2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80030f6:	431a      	orrs	r2, r3
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	69db      	ldr	r3, [r3, #28]
 80030fc:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003100:	431a      	orrs	r2, r3
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	6a1b      	ldr	r3, [r3, #32]
 8003106:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800310a:	ea42 0103 	orr.w	r1, r2, r3
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003112:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	430a      	orrs	r2, r1
 800311c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	699b      	ldr	r3, [r3, #24]
 8003122:	0c1b      	lsrs	r3, r3, #16
 8003124:	f003 0204 	and.w	r2, r3, #4
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800312c:	f003 0310 	and.w	r3, r3, #16
 8003130:	431a      	orrs	r2, r3
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003136:	f003 0308 	and.w	r3, r3, #8
 800313a:	431a      	orrs	r2, r3
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	68db      	ldr	r3, [r3, #12]
 8003140:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8003144:	ea42 0103 	orr.w	r1, r2, r3
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	430a      	orrs	r2, r1
 8003154:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	69da      	ldr	r2, [r3, #28]
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003164:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	2200      	movs	r2, #0
 800316a:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	2201      	movs	r2, #1
 8003170:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8003174:	2300      	movs	r3, #0
}
 8003176:	4618      	mov	r0, r3
 8003178:	3710      	adds	r7, #16
 800317a:	46bd      	mov	sp, r7
 800317c:	bd80      	pop	{r7, pc}

0800317e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800317e:	b580      	push	{r7, lr}
 8003180:	b088      	sub	sp, #32
 8003182:	af00      	add	r7, sp, #0
 8003184:	60f8      	str	r0, [r7, #12]
 8003186:	60b9      	str	r1, [r7, #8]
 8003188:	603b      	str	r3, [r7, #0]
 800318a:	4613      	mov	r3, r2
 800318c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800318e:	2300      	movs	r3, #0
 8003190:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8003198:	2b01      	cmp	r3, #1
 800319a:	d101      	bne.n	80031a0 <HAL_SPI_Transmit+0x22>
 800319c:	2302      	movs	r3, #2
 800319e:	e158      	b.n	8003452 <HAL_SPI_Transmit+0x2d4>
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	2201      	movs	r2, #1
 80031a4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80031a8:	f7fe faaa 	bl	8001700 <HAL_GetTick>
 80031ac:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80031ae:	88fb      	ldrh	r3, [r7, #6]
 80031b0:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80031b8:	b2db      	uxtb	r3, r3
 80031ba:	2b01      	cmp	r3, #1
 80031bc:	d002      	beq.n	80031c4 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80031be:	2302      	movs	r3, #2
 80031c0:	77fb      	strb	r3, [r7, #31]
    goto error;
 80031c2:	e13d      	b.n	8003440 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 80031c4:	68bb      	ldr	r3, [r7, #8]
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d002      	beq.n	80031d0 <HAL_SPI_Transmit+0x52>
 80031ca:	88fb      	ldrh	r3, [r7, #6]
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d102      	bne.n	80031d6 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80031d0:	2301      	movs	r3, #1
 80031d2:	77fb      	strb	r3, [r7, #31]
    goto error;
 80031d4:	e134      	b.n	8003440 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	2203      	movs	r2, #3
 80031da:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	2200      	movs	r2, #0
 80031e2:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	68ba      	ldr	r2, [r7, #8]
 80031e8:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	88fa      	ldrh	r2, [r7, #6]
 80031ee:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	88fa      	ldrh	r2, [r7, #6]
 80031f4:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	2200      	movs	r2, #0
 80031fa:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	2200      	movs	r2, #0
 8003200:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	2200      	movs	r2, #0
 8003208:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	2200      	movs	r2, #0
 8003210:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	2200      	movs	r2, #0
 8003216:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	689b      	ldr	r3, [r3, #8]
 800321c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003220:	d10f      	bne.n	8003242 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	681a      	ldr	r2, [r3, #0]
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003230:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	681a      	ldr	r2, [r3, #0]
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003240:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800324c:	2b40      	cmp	r3, #64	@ 0x40
 800324e:	d007      	beq.n	8003260 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	681a      	ldr	r2, [r3, #0]
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800325e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	68db      	ldr	r3, [r3, #12]
 8003264:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003268:	d94b      	bls.n	8003302 <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	685b      	ldr	r3, [r3, #4]
 800326e:	2b00      	cmp	r3, #0
 8003270:	d002      	beq.n	8003278 <HAL_SPI_Transmit+0xfa>
 8003272:	8afb      	ldrh	r3, [r7, #22]
 8003274:	2b01      	cmp	r3, #1
 8003276:	d13e      	bne.n	80032f6 <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800327c:	881a      	ldrh	r2, [r3, #0]
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003288:	1c9a      	adds	r2, r3, #2
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003292:	b29b      	uxth	r3, r3
 8003294:	3b01      	subs	r3, #1
 8003296:	b29a      	uxth	r2, r3
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800329c:	e02b      	b.n	80032f6 <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	689b      	ldr	r3, [r3, #8]
 80032a4:	f003 0302 	and.w	r3, r3, #2
 80032a8:	2b02      	cmp	r3, #2
 80032aa:	d112      	bne.n	80032d2 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80032b0:	881a      	ldrh	r2, [r3, #0]
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80032bc:	1c9a      	adds	r2, r3, #2
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80032c6:	b29b      	uxth	r3, r3
 80032c8:	3b01      	subs	r3, #1
 80032ca:	b29a      	uxth	r2, r3
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80032d0:	e011      	b.n	80032f6 <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80032d2:	f7fe fa15 	bl	8001700 <HAL_GetTick>
 80032d6:	4602      	mov	r2, r0
 80032d8:	69bb      	ldr	r3, [r7, #24]
 80032da:	1ad3      	subs	r3, r2, r3
 80032dc:	683a      	ldr	r2, [r7, #0]
 80032de:	429a      	cmp	r2, r3
 80032e0:	d803      	bhi.n	80032ea <HAL_SPI_Transmit+0x16c>
 80032e2:	683b      	ldr	r3, [r7, #0]
 80032e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032e8:	d102      	bne.n	80032f0 <HAL_SPI_Transmit+0x172>
 80032ea:	683b      	ldr	r3, [r7, #0]
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d102      	bne.n	80032f6 <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 80032f0:	2303      	movs	r3, #3
 80032f2:	77fb      	strb	r3, [r7, #31]
          goto error;
 80032f4:	e0a4      	b.n	8003440 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80032fa:	b29b      	uxth	r3, r3
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d1ce      	bne.n	800329e <HAL_SPI_Transmit+0x120>
 8003300:	e07c      	b.n	80033fc <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	685b      	ldr	r3, [r3, #4]
 8003306:	2b00      	cmp	r3, #0
 8003308:	d002      	beq.n	8003310 <HAL_SPI_Transmit+0x192>
 800330a:	8afb      	ldrh	r3, [r7, #22]
 800330c:	2b01      	cmp	r3, #1
 800330e:	d170      	bne.n	80033f2 <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003314:	b29b      	uxth	r3, r3
 8003316:	2b01      	cmp	r3, #1
 8003318:	d912      	bls.n	8003340 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800331e:	881a      	ldrh	r2, [r3, #0]
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800332a:	1c9a      	adds	r2, r3, #2
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003334:	b29b      	uxth	r3, r3
 8003336:	3b02      	subs	r3, #2
 8003338:	b29a      	uxth	r2, r3
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800333e:	e058      	b.n	80033f2 <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	330c      	adds	r3, #12
 800334a:	7812      	ldrb	r2, [r2, #0]
 800334c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003352:	1c5a      	adds	r2, r3, #1
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800335c:	b29b      	uxth	r3, r3
 800335e:	3b01      	subs	r3, #1
 8003360:	b29a      	uxth	r2, r3
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8003366:	e044      	b.n	80033f2 <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	689b      	ldr	r3, [r3, #8]
 800336e:	f003 0302 	and.w	r3, r3, #2
 8003372:	2b02      	cmp	r3, #2
 8003374:	d12b      	bne.n	80033ce <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800337a:	b29b      	uxth	r3, r3
 800337c:	2b01      	cmp	r3, #1
 800337e:	d912      	bls.n	80033a6 <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003384:	881a      	ldrh	r2, [r3, #0]
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003390:	1c9a      	adds	r2, r3, #2
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800339a:	b29b      	uxth	r3, r3
 800339c:	3b02      	subs	r3, #2
 800339e:	b29a      	uxth	r2, r3
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80033a4:	e025      	b.n	80033f2 <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	330c      	adds	r3, #12
 80033b0:	7812      	ldrb	r2, [r2, #0]
 80033b2:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80033b8:	1c5a      	adds	r2, r3, #1
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80033c2:	b29b      	uxth	r3, r3
 80033c4:	3b01      	subs	r3, #1
 80033c6:	b29a      	uxth	r2, r3
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80033cc:	e011      	b.n	80033f2 <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80033ce:	f7fe f997 	bl	8001700 <HAL_GetTick>
 80033d2:	4602      	mov	r2, r0
 80033d4:	69bb      	ldr	r3, [r7, #24]
 80033d6:	1ad3      	subs	r3, r2, r3
 80033d8:	683a      	ldr	r2, [r7, #0]
 80033da:	429a      	cmp	r2, r3
 80033dc:	d803      	bhi.n	80033e6 <HAL_SPI_Transmit+0x268>
 80033de:	683b      	ldr	r3, [r7, #0]
 80033e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033e4:	d102      	bne.n	80033ec <HAL_SPI_Transmit+0x26e>
 80033e6:	683b      	ldr	r3, [r7, #0]
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d102      	bne.n	80033f2 <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 80033ec:	2303      	movs	r3, #3
 80033ee:	77fb      	strb	r3, [r7, #31]
          goto error;
 80033f0:	e026      	b.n	8003440 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80033f6:	b29b      	uxth	r3, r3
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d1b5      	bne.n	8003368 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80033fc:	69ba      	ldr	r2, [r7, #24]
 80033fe:	6839      	ldr	r1, [r7, #0]
 8003400:	68f8      	ldr	r0, [r7, #12]
 8003402:	f000 f949 	bl	8003698 <SPI_EndRxTxTransaction>
 8003406:	4603      	mov	r3, r0
 8003408:	2b00      	cmp	r3, #0
 800340a:	d002      	beq.n	8003412 <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	2220      	movs	r2, #32
 8003410:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	689b      	ldr	r3, [r3, #8]
 8003416:	2b00      	cmp	r3, #0
 8003418:	d10a      	bne.n	8003430 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800341a:	2300      	movs	r3, #0
 800341c:	613b      	str	r3, [r7, #16]
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	68db      	ldr	r3, [r3, #12]
 8003424:	613b      	str	r3, [r7, #16]
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	689b      	ldr	r3, [r3, #8]
 800342c:	613b      	str	r3, [r7, #16]
 800342e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003434:	2b00      	cmp	r3, #0
 8003436:	d002      	beq.n	800343e <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8003438:	2301      	movs	r3, #1
 800343a:	77fb      	strb	r3, [r7, #31]
 800343c:	e000      	b.n	8003440 <HAL_SPI_Transmit+0x2c2>
  }

error:
 800343e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	2201      	movs	r2, #1
 8003444:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	2200      	movs	r2, #0
 800344c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 8003450:	7ffb      	ldrb	r3, [r7, #31]
}
 8003452:	4618      	mov	r0, r3
 8003454:	3720      	adds	r7, #32
 8003456:	46bd      	mov	sp, r7
 8003458:	bd80      	pop	{r7, pc}
	...

0800345c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800345c:	b580      	push	{r7, lr}
 800345e:	b088      	sub	sp, #32
 8003460:	af00      	add	r7, sp, #0
 8003462:	60f8      	str	r0, [r7, #12]
 8003464:	60b9      	str	r1, [r7, #8]
 8003466:	603b      	str	r3, [r7, #0]
 8003468:	4613      	mov	r3, r2
 800346a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800346c:	f7fe f948 	bl	8001700 <HAL_GetTick>
 8003470:	4602      	mov	r2, r0
 8003472:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003474:	1a9b      	subs	r3, r3, r2
 8003476:	683a      	ldr	r2, [r7, #0]
 8003478:	4413      	add	r3, r2
 800347a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800347c:	f7fe f940 	bl	8001700 <HAL_GetTick>
 8003480:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003482:	4b39      	ldr	r3, [pc, #228]	@ (8003568 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	015b      	lsls	r3, r3, #5
 8003488:	0d1b      	lsrs	r3, r3, #20
 800348a:	69fa      	ldr	r2, [r7, #28]
 800348c:	fb02 f303 	mul.w	r3, r2, r3
 8003490:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003492:	e054      	b.n	800353e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003494:	683b      	ldr	r3, [r7, #0]
 8003496:	f1b3 3fff 	cmp.w	r3, #4294967295
 800349a:	d050      	beq.n	800353e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800349c:	f7fe f930 	bl	8001700 <HAL_GetTick>
 80034a0:	4602      	mov	r2, r0
 80034a2:	69bb      	ldr	r3, [r7, #24]
 80034a4:	1ad3      	subs	r3, r2, r3
 80034a6:	69fa      	ldr	r2, [r7, #28]
 80034a8:	429a      	cmp	r2, r3
 80034aa:	d902      	bls.n	80034b2 <SPI_WaitFlagStateUntilTimeout+0x56>
 80034ac:	69fb      	ldr	r3, [r7, #28]
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d13d      	bne.n	800352e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	685a      	ldr	r2, [r3, #4]
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80034c0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	685b      	ldr	r3, [r3, #4]
 80034c6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80034ca:	d111      	bne.n	80034f0 <SPI_WaitFlagStateUntilTimeout+0x94>
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	689b      	ldr	r3, [r3, #8]
 80034d0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80034d4:	d004      	beq.n	80034e0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	689b      	ldr	r3, [r3, #8]
 80034da:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80034de:	d107      	bne.n	80034f0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	681a      	ldr	r2, [r3, #0]
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80034ee:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80034f4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80034f8:	d10f      	bne.n	800351a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	681a      	ldr	r2, [r3, #0]
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003508:	601a      	str	r2, [r3, #0]
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	681a      	ldr	r2, [r3, #0]
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003518:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	2201      	movs	r2, #1
 800351e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	2200      	movs	r2, #0
 8003526:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 800352a:	2303      	movs	r3, #3
 800352c:	e017      	b.n	800355e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800352e:	697b      	ldr	r3, [r7, #20]
 8003530:	2b00      	cmp	r3, #0
 8003532:	d101      	bne.n	8003538 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003534:	2300      	movs	r3, #0
 8003536:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003538:	697b      	ldr	r3, [r7, #20]
 800353a:	3b01      	subs	r3, #1
 800353c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	689a      	ldr	r2, [r3, #8]
 8003544:	68bb      	ldr	r3, [r7, #8]
 8003546:	4013      	ands	r3, r2
 8003548:	68ba      	ldr	r2, [r7, #8]
 800354a:	429a      	cmp	r2, r3
 800354c:	bf0c      	ite	eq
 800354e:	2301      	moveq	r3, #1
 8003550:	2300      	movne	r3, #0
 8003552:	b2db      	uxtb	r3, r3
 8003554:	461a      	mov	r2, r3
 8003556:	79fb      	ldrb	r3, [r7, #7]
 8003558:	429a      	cmp	r2, r3
 800355a:	d19b      	bne.n	8003494 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800355c:	2300      	movs	r3, #0
}
 800355e:	4618      	mov	r0, r3
 8003560:	3720      	adds	r7, #32
 8003562:	46bd      	mov	sp, r7
 8003564:	bd80      	pop	{r7, pc}
 8003566:	bf00      	nop
 8003568:	20000014 	.word	0x20000014

0800356c <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800356c:	b580      	push	{r7, lr}
 800356e:	b08a      	sub	sp, #40	@ 0x28
 8003570:	af00      	add	r7, sp, #0
 8003572:	60f8      	str	r0, [r7, #12]
 8003574:	60b9      	str	r1, [r7, #8]
 8003576:	607a      	str	r2, [r7, #4]
 8003578:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800357a:	2300      	movs	r3, #0
 800357c:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800357e:	f7fe f8bf 	bl	8001700 <HAL_GetTick>
 8003582:	4602      	mov	r2, r0
 8003584:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003586:	1a9b      	subs	r3, r3, r2
 8003588:	683a      	ldr	r2, [r7, #0]
 800358a:	4413      	add	r3, r2
 800358c:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 800358e:	f7fe f8b7 	bl	8001700 <HAL_GetTick>
 8003592:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	330c      	adds	r3, #12
 800359a:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800359c:	4b3d      	ldr	r3, [pc, #244]	@ (8003694 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800359e:	681a      	ldr	r2, [r3, #0]
 80035a0:	4613      	mov	r3, r2
 80035a2:	009b      	lsls	r3, r3, #2
 80035a4:	4413      	add	r3, r2
 80035a6:	00da      	lsls	r2, r3, #3
 80035a8:	1ad3      	subs	r3, r2, r3
 80035aa:	0d1b      	lsrs	r3, r3, #20
 80035ac:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80035ae:	fb02 f303 	mul.w	r3, r2, r3
 80035b2:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80035b4:	e060      	b.n	8003678 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80035b6:	68bb      	ldr	r3, [r7, #8]
 80035b8:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 80035bc:	d107      	bne.n	80035ce <SPI_WaitFifoStateUntilTimeout+0x62>
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d104      	bne.n	80035ce <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80035c4:	69fb      	ldr	r3, [r7, #28]
 80035c6:	781b      	ldrb	r3, [r3, #0]
 80035c8:	b2db      	uxtb	r3, r3
 80035ca:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80035cc:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 80035ce:	683b      	ldr	r3, [r7, #0]
 80035d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035d4:	d050      	beq.n	8003678 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80035d6:	f7fe f893 	bl	8001700 <HAL_GetTick>
 80035da:	4602      	mov	r2, r0
 80035dc:	6a3b      	ldr	r3, [r7, #32]
 80035de:	1ad3      	subs	r3, r2, r3
 80035e0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80035e2:	429a      	cmp	r2, r3
 80035e4:	d902      	bls.n	80035ec <SPI_WaitFifoStateUntilTimeout+0x80>
 80035e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d13d      	bne.n	8003668 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	685a      	ldr	r2, [r3, #4]
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80035fa:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	685b      	ldr	r3, [r3, #4]
 8003600:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003604:	d111      	bne.n	800362a <SPI_WaitFifoStateUntilTimeout+0xbe>
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	689b      	ldr	r3, [r3, #8]
 800360a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800360e:	d004      	beq.n	800361a <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	689b      	ldr	r3, [r3, #8]
 8003614:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003618:	d107      	bne.n	800362a <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	681a      	ldr	r2, [r3, #0]
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003628:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800362e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003632:	d10f      	bne.n	8003654 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	681a      	ldr	r2, [r3, #0]
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003642:	601a      	str	r2, [r3, #0]
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	681a      	ldr	r2, [r3, #0]
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003652:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	2201      	movs	r2, #1
 8003658:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	2200      	movs	r2, #0
 8003660:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8003664:	2303      	movs	r3, #3
 8003666:	e010      	b.n	800368a <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003668:	69bb      	ldr	r3, [r7, #24]
 800366a:	2b00      	cmp	r3, #0
 800366c:	d101      	bne.n	8003672 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800366e:	2300      	movs	r3, #0
 8003670:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8003672:	69bb      	ldr	r3, [r7, #24]
 8003674:	3b01      	subs	r3, #1
 8003676:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	689a      	ldr	r2, [r3, #8]
 800367e:	68bb      	ldr	r3, [r7, #8]
 8003680:	4013      	ands	r3, r2
 8003682:	687a      	ldr	r2, [r7, #4]
 8003684:	429a      	cmp	r2, r3
 8003686:	d196      	bne.n	80035b6 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8003688:	2300      	movs	r3, #0
}
 800368a:	4618      	mov	r0, r3
 800368c:	3728      	adds	r7, #40	@ 0x28
 800368e:	46bd      	mov	sp, r7
 8003690:	bd80      	pop	{r7, pc}
 8003692:	bf00      	nop
 8003694:	20000014 	.word	0x20000014

08003698 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003698:	b580      	push	{r7, lr}
 800369a:	b088      	sub	sp, #32
 800369c:	af02      	add	r7, sp, #8
 800369e:	60f8      	str	r0, [r7, #12]
 80036a0:	60b9      	str	r1, [r7, #8]
 80036a2:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	9300      	str	r3, [sp, #0]
 80036a8:	68bb      	ldr	r3, [r7, #8]
 80036aa:	2200      	movs	r2, #0
 80036ac:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 80036b0:	68f8      	ldr	r0, [r7, #12]
 80036b2:	f7ff ff5b 	bl	800356c <SPI_WaitFifoStateUntilTimeout>
 80036b6:	4603      	mov	r3, r0
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d007      	beq.n	80036cc <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80036c0:	f043 0220 	orr.w	r2, r3, #32
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80036c8:	2303      	movs	r3, #3
 80036ca:	e046      	b.n	800375a <SPI_EndRxTxTransaction+0xc2>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80036cc:	4b25      	ldr	r3, [pc, #148]	@ (8003764 <SPI_EndRxTxTransaction+0xcc>)
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	4a25      	ldr	r2, [pc, #148]	@ (8003768 <SPI_EndRxTxTransaction+0xd0>)
 80036d2:	fba2 2303 	umull	r2, r3, r2, r3
 80036d6:	0d5b      	lsrs	r3, r3, #21
 80036d8:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80036dc:	fb02 f303 	mul.w	r3, r2, r3
 80036e0:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	685b      	ldr	r3, [r3, #4]
 80036e6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80036ea:	d112      	bne.n	8003712 <SPI_EndRxTxTransaction+0x7a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	9300      	str	r3, [sp, #0]
 80036f0:	68bb      	ldr	r3, [r7, #8]
 80036f2:	2200      	movs	r2, #0
 80036f4:	2180      	movs	r1, #128	@ 0x80
 80036f6:	68f8      	ldr	r0, [r7, #12]
 80036f8:	f7ff feb0 	bl	800345c <SPI_WaitFlagStateUntilTimeout>
 80036fc:	4603      	mov	r3, r0
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d016      	beq.n	8003730 <SPI_EndRxTxTransaction+0x98>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003706:	f043 0220 	orr.w	r2, r3, #32
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 800370e:	2303      	movs	r3, #3
 8003710:	e023      	b.n	800375a <SPI_EndRxTxTransaction+0xc2>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8003712:	697b      	ldr	r3, [r7, #20]
 8003714:	2b00      	cmp	r3, #0
 8003716:	d00a      	beq.n	800372e <SPI_EndRxTxTransaction+0x96>
      {
        break;
      }
      count--;
 8003718:	697b      	ldr	r3, [r7, #20]
 800371a:	3b01      	subs	r3, #1
 800371c:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	689b      	ldr	r3, [r3, #8]
 8003724:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003728:	2b80      	cmp	r3, #128	@ 0x80
 800372a:	d0f2      	beq.n	8003712 <SPI_EndRxTxTransaction+0x7a>
 800372c:	e000      	b.n	8003730 <SPI_EndRxTxTransaction+0x98>
        break;
 800372e:	bf00      	nop
  }


  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	9300      	str	r3, [sp, #0]
 8003734:	68bb      	ldr	r3, [r7, #8]
 8003736:	2200      	movs	r2, #0
 8003738:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 800373c:	68f8      	ldr	r0, [r7, #12]
 800373e:	f7ff ff15 	bl	800356c <SPI_WaitFifoStateUntilTimeout>
 8003742:	4603      	mov	r3, r0
 8003744:	2b00      	cmp	r3, #0
 8003746:	d007      	beq.n	8003758 <SPI_EndRxTxTransaction+0xc0>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800374c:	f043 0220 	orr.w	r2, r3, #32
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8003754:	2303      	movs	r3, #3
 8003756:	e000      	b.n	800375a <SPI_EndRxTxTransaction+0xc2>
  }

  return HAL_OK;
 8003758:	2300      	movs	r3, #0
}
 800375a:	4618      	mov	r0, r3
 800375c:	3718      	adds	r7, #24
 800375e:	46bd      	mov	sp, r7
 8003760:	bd80      	pop	{r7, pc}
 8003762:	bf00      	nop
 8003764:	20000014 	.word	0x20000014
 8003768:	165e9f81 	.word	0x165e9f81

0800376c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800376c:	b580      	push	{r7, lr}
 800376e:	b082      	sub	sp, #8
 8003770:	af00      	add	r7, sp, #0
 8003772:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	2b00      	cmp	r3, #0
 8003778:	d101      	bne.n	800377e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800377a:	2301      	movs	r3, #1
 800377c:	e049      	b.n	8003812 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003784:	b2db      	uxtb	r3, r3
 8003786:	2b00      	cmp	r3, #0
 8003788:	d106      	bne.n	8003798 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	2200      	movs	r2, #0
 800378e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003792:	6878      	ldr	r0, [r7, #4]
 8003794:	f7fd fe86 	bl	80014a4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	2202      	movs	r2, #2
 800379c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681a      	ldr	r2, [r3, #0]
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	3304      	adds	r3, #4
 80037a8:	4619      	mov	r1, r3
 80037aa:	4610      	mov	r0, r2
 80037ac:	f000 fa46 	bl	8003c3c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	2201      	movs	r2, #1
 80037b4:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	2201      	movs	r2, #1
 80037bc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	2201      	movs	r2, #1
 80037c4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	2201      	movs	r2, #1
 80037cc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	2201      	movs	r2, #1
 80037d4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	2201      	movs	r2, #1
 80037dc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	2201      	movs	r2, #1
 80037e4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	2201      	movs	r2, #1
 80037ec:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	2201      	movs	r2, #1
 80037f4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	2201      	movs	r2, #1
 80037fc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	2201      	movs	r2, #1
 8003804:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	2201      	movs	r2, #1
 800380c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003810:	2300      	movs	r3, #0
}
 8003812:	4618      	mov	r0, r3
 8003814:	3708      	adds	r7, #8
 8003816:	46bd      	mov	sp, r7
 8003818:	bd80      	pop	{r7, pc}

0800381a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800381a:	b580      	push	{r7, lr}
 800381c:	b082      	sub	sp, #8
 800381e:	af00      	add	r7, sp, #0
 8003820:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	691b      	ldr	r3, [r3, #16]
 8003828:	f003 0302 	and.w	r3, r3, #2
 800382c:	2b02      	cmp	r3, #2
 800382e:	d122      	bne.n	8003876 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	68db      	ldr	r3, [r3, #12]
 8003836:	f003 0302 	and.w	r3, r3, #2
 800383a:	2b02      	cmp	r3, #2
 800383c:	d11b      	bne.n	8003876 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	f06f 0202 	mvn.w	r2, #2
 8003846:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	2201      	movs	r2, #1
 800384c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	699b      	ldr	r3, [r3, #24]
 8003854:	f003 0303 	and.w	r3, r3, #3
 8003858:	2b00      	cmp	r3, #0
 800385a:	d003      	beq.n	8003864 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800385c:	6878      	ldr	r0, [r7, #4]
 800385e:	f000 f9cf 	bl	8003c00 <HAL_TIM_IC_CaptureCallback>
 8003862:	e005      	b.n	8003870 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003864:	6878      	ldr	r0, [r7, #4]
 8003866:	f000 f9c1 	bl	8003bec <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800386a:	6878      	ldr	r0, [r7, #4]
 800386c:	f000 f9d2 	bl	8003c14 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	2200      	movs	r2, #0
 8003874:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	691b      	ldr	r3, [r3, #16]
 800387c:	f003 0304 	and.w	r3, r3, #4
 8003880:	2b04      	cmp	r3, #4
 8003882:	d122      	bne.n	80038ca <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	68db      	ldr	r3, [r3, #12]
 800388a:	f003 0304 	and.w	r3, r3, #4
 800388e:	2b04      	cmp	r3, #4
 8003890:	d11b      	bne.n	80038ca <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	f06f 0204 	mvn.w	r2, #4
 800389a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	2202      	movs	r2, #2
 80038a0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	699b      	ldr	r3, [r3, #24]
 80038a8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d003      	beq.n	80038b8 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80038b0:	6878      	ldr	r0, [r7, #4]
 80038b2:	f000 f9a5 	bl	8003c00 <HAL_TIM_IC_CaptureCallback>
 80038b6:	e005      	b.n	80038c4 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80038b8:	6878      	ldr	r0, [r7, #4]
 80038ba:	f000 f997 	bl	8003bec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80038be:	6878      	ldr	r0, [r7, #4]
 80038c0:	f000 f9a8 	bl	8003c14 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	2200      	movs	r2, #0
 80038c8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	691b      	ldr	r3, [r3, #16]
 80038d0:	f003 0308 	and.w	r3, r3, #8
 80038d4:	2b08      	cmp	r3, #8
 80038d6:	d122      	bne.n	800391e <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	68db      	ldr	r3, [r3, #12]
 80038de:	f003 0308 	and.w	r3, r3, #8
 80038e2:	2b08      	cmp	r3, #8
 80038e4:	d11b      	bne.n	800391e <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	f06f 0208 	mvn.w	r2, #8
 80038ee:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	2204      	movs	r2, #4
 80038f4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	69db      	ldr	r3, [r3, #28]
 80038fc:	f003 0303 	and.w	r3, r3, #3
 8003900:	2b00      	cmp	r3, #0
 8003902:	d003      	beq.n	800390c <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003904:	6878      	ldr	r0, [r7, #4]
 8003906:	f000 f97b 	bl	8003c00 <HAL_TIM_IC_CaptureCallback>
 800390a:	e005      	b.n	8003918 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800390c:	6878      	ldr	r0, [r7, #4]
 800390e:	f000 f96d 	bl	8003bec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003912:	6878      	ldr	r0, [r7, #4]
 8003914:	f000 f97e 	bl	8003c14 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	2200      	movs	r2, #0
 800391c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	691b      	ldr	r3, [r3, #16]
 8003924:	f003 0310 	and.w	r3, r3, #16
 8003928:	2b10      	cmp	r3, #16
 800392a:	d122      	bne.n	8003972 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	68db      	ldr	r3, [r3, #12]
 8003932:	f003 0310 	and.w	r3, r3, #16
 8003936:	2b10      	cmp	r3, #16
 8003938:	d11b      	bne.n	8003972 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	f06f 0210 	mvn.w	r2, #16
 8003942:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	2208      	movs	r2, #8
 8003948:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	69db      	ldr	r3, [r3, #28]
 8003950:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003954:	2b00      	cmp	r3, #0
 8003956:	d003      	beq.n	8003960 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003958:	6878      	ldr	r0, [r7, #4]
 800395a:	f000 f951 	bl	8003c00 <HAL_TIM_IC_CaptureCallback>
 800395e:	e005      	b.n	800396c <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003960:	6878      	ldr	r0, [r7, #4]
 8003962:	f000 f943 	bl	8003bec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003966:	6878      	ldr	r0, [r7, #4]
 8003968:	f000 f954 	bl	8003c14 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	2200      	movs	r2, #0
 8003970:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	691b      	ldr	r3, [r3, #16]
 8003978:	f003 0301 	and.w	r3, r3, #1
 800397c:	2b01      	cmp	r3, #1
 800397e:	d10e      	bne.n	800399e <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	68db      	ldr	r3, [r3, #12]
 8003986:	f003 0301 	and.w	r3, r3, #1
 800398a:	2b01      	cmp	r3, #1
 800398c:	d107      	bne.n	800399e <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	f06f 0201 	mvn.w	r2, #1
 8003996:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003998:	6878      	ldr	r0, [r7, #4]
 800399a:	f7fd fbb1 	bl	8001100 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	691b      	ldr	r3, [r3, #16]
 80039a4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80039a8:	2b80      	cmp	r3, #128	@ 0x80
 80039aa:	d10e      	bne.n	80039ca <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	68db      	ldr	r3, [r3, #12]
 80039b2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80039b6:	2b80      	cmp	r3, #128	@ 0x80
 80039b8:	d107      	bne.n	80039ca <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80039c2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80039c4:	6878      	ldr	r0, [r7, #4]
 80039c6:	f000 fb0b 	bl	8003fe0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	691b      	ldr	r3, [r3, #16]
 80039d0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80039d4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80039d8:	d10e      	bne.n	80039f8 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	68db      	ldr	r3, [r3, #12]
 80039e0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80039e4:	2b80      	cmp	r3, #128	@ 0x80
 80039e6:	d107      	bne.n	80039f8 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80039f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80039f2:	6878      	ldr	r0, [r7, #4]
 80039f4:	f000 fafe 	bl	8003ff4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	691b      	ldr	r3, [r3, #16]
 80039fe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003a02:	2b40      	cmp	r3, #64	@ 0x40
 8003a04:	d10e      	bne.n	8003a24 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	68db      	ldr	r3, [r3, #12]
 8003a0c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003a10:	2b40      	cmp	r3, #64	@ 0x40
 8003a12:	d107      	bne.n	8003a24 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003a1c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003a1e:	6878      	ldr	r0, [r7, #4]
 8003a20:	f000 f902 	bl	8003c28 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	691b      	ldr	r3, [r3, #16]
 8003a2a:	f003 0320 	and.w	r3, r3, #32
 8003a2e:	2b20      	cmp	r3, #32
 8003a30:	d10e      	bne.n	8003a50 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	68db      	ldr	r3, [r3, #12]
 8003a38:	f003 0320 	and.w	r3, r3, #32
 8003a3c:	2b20      	cmp	r3, #32
 8003a3e:	d107      	bne.n	8003a50 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	f06f 0220 	mvn.w	r2, #32
 8003a48:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003a4a:	6878      	ldr	r0, [r7, #4]
 8003a4c:	f000 fabe 	bl	8003fcc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003a50:	bf00      	nop
 8003a52:	3708      	adds	r7, #8
 8003a54:	46bd      	mov	sp, r7
 8003a56:	bd80      	pop	{r7, pc}

08003a58 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003a58:	b580      	push	{r7, lr}
 8003a5a:	b084      	sub	sp, #16
 8003a5c:	af00      	add	r7, sp, #0
 8003a5e:	6078      	str	r0, [r7, #4]
 8003a60:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003a62:	2300      	movs	r3, #0
 8003a64:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003a6c:	2b01      	cmp	r3, #1
 8003a6e:	d101      	bne.n	8003a74 <HAL_TIM_ConfigClockSource+0x1c>
 8003a70:	2302      	movs	r3, #2
 8003a72:	e0b4      	b.n	8003bde <HAL_TIM_ConfigClockSource+0x186>
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	2201      	movs	r2, #1
 8003a78:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	2202      	movs	r2, #2
 8003a80:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	689b      	ldr	r3, [r3, #8]
 8003a8a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003a8c:	68ba      	ldr	r2, [r7, #8]
 8003a8e:	4b56      	ldr	r3, [pc, #344]	@ (8003be8 <HAL_TIM_ConfigClockSource+0x190>)
 8003a90:	4013      	ands	r3, r2
 8003a92:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003a94:	68bb      	ldr	r3, [r7, #8]
 8003a96:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003a9a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	68ba      	ldr	r2, [r7, #8]
 8003aa2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003aa4:	683b      	ldr	r3, [r7, #0]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003aac:	d03e      	beq.n	8003b2c <HAL_TIM_ConfigClockSource+0xd4>
 8003aae:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003ab2:	f200 8087 	bhi.w	8003bc4 <HAL_TIM_ConfigClockSource+0x16c>
 8003ab6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003aba:	f000 8086 	beq.w	8003bca <HAL_TIM_ConfigClockSource+0x172>
 8003abe:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003ac2:	d87f      	bhi.n	8003bc4 <HAL_TIM_ConfigClockSource+0x16c>
 8003ac4:	2b70      	cmp	r3, #112	@ 0x70
 8003ac6:	d01a      	beq.n	8003afe <HAL_TIM_ConfigClockSource+0xa6>
 8003ac8:	2b70      	cmp	r3, #112	@ 0x70
 8003aca:	d87b      	bhi.n	8003bc4 <HAL_TIM_ConfigClockSource+0x16c>
 8003acc:	2b60      	cmp	r3, #96	@ 0x60
 8003ace:	d050      	beq.n	8003b72 <HAL_TIM_ConfigClockSource+0x11a>
 8003ad0:	2b60      	cmp	r3, #96	@ 0x60
 8003ad2:	d877      	bhi.n	8003bc4 <HAL_TIM_ConfigClockSource+0x16c>
 8003ad4:	2b50      	cmp	r3, #80	@ 0x50
 8003ad6:	d03c      	beq.n	8003b52 <HAL_TIM_ConfigClockSource+0xfa>
 8003ad8:	2b50      	cmp	r3, #80	@ 0x50
 8003ada:	d873      	bhi.n	8003bc4 <HAL_TIM_ConfigClockSource+0x16c>
 8003adc:	2b40      	cmp	r3, #64	@ 0x40
 8003ade:	d058      	beq.n	8003b92 <HAL_TIM_ConfigClockSource+0x13a>
 8003ae0:	2b40      	cmp	r3, #64	@ 0x40
 8003ae2:	d86f      	bhi.n	8003bc4 <HAL_TIM_ConfigClockSource+0x16c>
 8003ae4:	2b30      	cmp	r3, #48	@ 0x30
 8003ae6:	d064      	beq.n	8003bb2 <HAL_TIM_ConfigClockSource+0x15a>
 8003ae8:	2b30      	cmp	r3, #48	@ 0x30
 8003aea:	d86b      	bhi.n	8003bc4 <HAL_TIM_ConfigClockSource+0x16c>
 8003aec:	2b20      	cmp	r3, #32
 8003aee:	d060      	beq.n	8003bb2 <HAL_TIM_ConfigClockSource+0x15a>
 8003af0:	2b20      	cmp	r3, #32
 8003af2:	d867      	bhi.n	8003bc4 <HAL_TIM_ConfigClockSource+0x16c>
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d05c      	beq.n	8003bb2 <HAL_TIM_ConfigClockSource+0x15a>
 8003af8:	2b10      	cmp	r3, #16
 8003afa:	d05a      	beq.n	8003bb2 <HAL_TIM_ConfigClockSource+0x15a>
 8003afc:	e062      	b.n	8003bc4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003b02:	683b      	ldr	r3, [r7, #0]
 8003b04:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003b06:	683b      	ldr	r3, [r7, #0]
 8003b08:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003b0a:	683b      	ldr	r3, [r7, #0]
 8003b0c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003b0e:	f000 f9af 	bl	8003e70 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	689b      	ldr	r3, [r3, #8]
 8003b18:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003b1a:	68bb      	ldr	r3, [r7, #8]
 8003b1c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8003b20:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	68ba      	ldr	r2, [r7, #8]
 8003b28:	609a      	str	r2, [r3, #8]
      break;
 8003b2a:	e04f      	b.n	8003bcc <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003b30:	683b      	ldr	r3, [r7, #0]
 8003b32:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003b34:	683b      	ldr	r3, [r7, #0]
 8003b36:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003b38:	683b      	ldr	r3, [r7, #0]
 8003b3a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003b3c:	f000 f998 	bl	8003e70 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	689a      	ldr	r2, [r3, #8]
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003b4e:	609a      	str	r2, [r3, #8]
      break;
 8003b50:	e03c      	b.n	8003bcc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003b56:	683b      	ldr	r3, [r7, #0]
 8003b58:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003b5a:	683b      	ldr	r3, [r7, #0]
 8003b5c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003b5e:	461a      	mov	r2, r3
 8003b60:	f000 f90c 	bl	8003d7c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	2150      	movs	r1, #80	@ 0x50
 8003b6a:	4618      	mov	r0, r3
 8003b6c:	f000 f965 	bl	8003e3a <TIM_ITRx_SetConfig>
      break;
 8003b70:	e02c      	b.n	8003bcc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003b76:	683b      	ldr	r3, [r7, #0]
 8003b78:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003b7a:	683b      	ldr	r3, [r7, #0]
 8003b7c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003b7e:	461a      	mov	r2, r3
 8003b80:	f000 f92b 	bl	8003dda <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	2160      	movs	r1, #96	@ 0x60
 8003b8a:	4618      	mov	r0, r3
 8003b8c:	f000 f955 	bl	8003e3a <TIM_ITRx_SetConfig>
      break;
 8003b90:	e01c      	b.n	8003bcc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003b96:	683b      	ldr	r3, [r7, #0]
 8003b98:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003b9a:	683b      	ldr	r3, [r7, #0]
 8003b9c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003b9e:	461a      	mov	r2, r3
 8003ba0:	f000 f8ec 	bl	8003d7c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	2140      	movs	r1, #64	@ 0x40
 8003baa:	4618      	mov	r0, r3
 8003bac:	f000 f945 	bl	8003e3a <TIM_ITRx_SetConfig>
      break;
 8003bb0:	e00c      	b.n	8003bcc <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681a      	ldr	r2, [r3, #0]
 8003bb6:	683b      	ldr	r3, [r7, #0]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	4619      	mov	r1, r3
 8003bbc:	4610      	mov	r0, r2
 8003bbe:	f000 f93c 	bl	8003e3a <TIM_ITRx_SetConfig>
      break;
 8003bc2:	e003      	b.n	8003bcc <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003bc4:	2301      	movs	r3, #1
 8003bc6:	73fb      	strb	r3, [r7, #15]
      break;
 8003bc8:	e000      	b.n	8003bcc <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003bca:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	2201      	movs	r2, #1
 8003bd0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	2200      	movs	r2, #0
 8003bd8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003bdc:	7bfb      	ldrb	r3, [r7, #15]
}
 8003bde:	4618      	mov	r0, r3
 8003be0:	3710      	adds	r7, #16
 8003be2:	46bd      	mov	sp, r7
 8003be4:	bd80      	pop	{r7, pc}
 8003be6:	bf00      	nop
 8003be8:	fffeff88 	.word	0xfffeff88

08003bec <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003bec:	b480      	push	{r7}
 8003bee:	b083      	sub	sp, #12
 8003bf0:	af00      	add	r7, sp, #0
 8003bf2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003bf4:	bf00      	nop
 8003bf6:	370c      	adds	r7, #12
 8003bf8:	46bd      	mov	sp, r7
 8003bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bfe:	4770      	bx	lr

08003c00 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003c00:	b480      	push	{r7}
 8003c02:	b083      	sub	sp, #12
 8003c04:	af00      	add	r7, sp, #0
 8003c06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003c08:	bf00      	nop
 8003c0a:	370c      	adds	r7, #12
 8003c0c:	46bd      	mov	sp, r7
 8003c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c12:	4770      	bx	lr

08003c14 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003c14:	b480      	push	{r7}
 8003c16:	b083      	sub	sp, #12
 8003c18:	af00      	add	r7, sp, #0
 8003c1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003c1c:	bf00      	nop
 8003c1e:	370c      	adds	r7, #12
 8003c20:	46bd      	mov	sp, r7
 8003c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c26:	4770      	bx	lr

08003c28 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003c28:	b480      	push	{r7}
 8003c2a:	b083      	sub	sp, #12
 8003c2c:	af00      	add	r7, sp, #0
 8003c2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003c30:	bf00      	nop
 8003c32:	370c      	adds	r7, #12
 8003c34:	46bd      	mov	sp, r7
 8003c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c3a:	4770      	bx	lr

08003c3c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003c3c:	b480      	push	{r7}
 8003c3e:	b085      	sub	sp, #20
 8003c40:	af00      	add	r7, sp, #0
 8003c42:	6078      	str	r0, [r7, #4]
 8003c44:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	4a40      	ldr	r2, [pc, #256]	@ (8003d50 <TIM_Base_SetConfig+0x114>)
 8003c50:	4293      	cmp	r3, r2
 8003c52:	d013      	beq.n	8003c7c <TIM_Base_SetConfig+0x40>
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003c5a:	d00f      	beq.n	8003c7c <TIM_Base_SetConfig+0x40>
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	4a3d      	ldr	r2, [pc, #244]	@ (8003d54 <TIM_Base_SetConfig+0x118>)
 8003c60:	4293      	cmp	r3, r2
 8003c62:	d00b      	beq.n	8003c7c <TIM_Base_SetConfig+0x40>
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	4a3c      	ldr	r2, [pc, #240]	@ (8003d58 <TIM_Base_SetConfig+0x11c>)
 8003c68:	4293      	cmp	r3, r2
 8003c6a:	d007      	beq.n	8003c7c <TIM_Base_SetConfig+0x40>
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	4a3b      	ldr	r2, [pc, #236]	@ (8003d5c <TIM_Base_SetConfig+0x120>)
 8003c70:	4293      	cmp	r3, r2
 8003c72:	d003      	beq.n	8003c7c <TIM_Base_SetConfig+0x40>
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	4a3a      	ldr	r2, [pc, #232]	@ (8003d60 <TIM_Base_SetConfig+0x124>)
 8003c78:	4293      	cmp	r3, r2
 8003c7a:	d108      	bne.n	8003c8e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003c82:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003c84:	683b      	ldr	r3, [r7, #0]
 8003c86:	685b      	ldr	r3, [r3, #4]
 8003c88:	68fa      	ldr	r2, [r7, #12]
 8003c8a:	4313      	orrs	r3, r2
 8003c8c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	4a2f      	ldr	r2, [pc, #188]	@ (8003d50 <TIM_Base_SetConfig+0x114>)
 8003c92:	4293      	cmp	r3, r2
 8003c94:	d02b      	beq.n	8003cee <TIM_Base_SetConfig+0xb2>
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003c9c:	d027      	beq.n	8003cee <TIM_Base_SetConfig+0xb2>
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	4a2c      	ldr	r2, [pc, #176]	@ (8003d54 <TIM_Base_SetConfig+0x118>)
 8003ca2:	4293      	cmp	r3, r2
 8003ca4:	d023      	beq.n	8003cee <TIM_Base_SetConfig+0xb2>
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	4a2b      	ldr	r2, [pc, #172]	@ (8003d58 <TIM_Base_SetConfig+0x11c>)
 8003caa:	4293      	cmp	r3, r2
 8003cac:	d01f      	beq.n	8003cee <TIM_Base_SetConfig+0xb2>
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	4a2a      	ldr	r2, [pc, #168]	@ (8003d5c <TIM_Base_SetConfig+0x120>)
 8003cb2:	4293      	cmp	r3, r2
 8003cb4:	d01b      	beq.n	8003cee <TIM_Base_SetConfig+0xb2>
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	4a29      	ldr	r2, [pc, #164]	@ (8003d60 <TIM_Base_SetConfig+0x124>)
 8003cba:	4293      	cmp	r3, r2
 8003cbc:	d017      	beq.n	8003cee <TIM_Base_SetConfig+0xb2>
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	4a28      	ldr	r2, [pc, #160]	@ (8003d64 <TIM_Base_SetConfig+0x128>)
 8003cc2:	4293      	cmp	r3, r2
 8003cc4:	d013      	beq.n	8003cee <TIM_Base_SetConfig+0xb2>
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	4a27      	ldr	r2, [pc, #156]	@ (8003d68 <TIM_Base_SetConfig+0x12c>)
 8003cca:	4293      	cmp	r3, r2
 8003ccc:	d00f      	beq.n	8003cee <TIM_Base_SetConfig+0xb2>
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	4a26      	ldr	r2, [pc, #152]	@ (8003d6c <TIM_Base_SetConfig+0x130>)
 8003cd2:	4293      	cmp	r3, r2
 8003cd4:	d00b      	beq.n	8003cee <TIM_Base_SetConfig+0xb2>
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	4a25      	ldr	r2, [pc, #148]	@ (8003d70 <TIM_Base_SetConfig+0x134>)
 8003cda:	4293      	cmp	r3, r2
 8003cdc:	d007      	beq.n	8003cee <TIM_Base_SetConfig+0xb2>
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	4a24      	ldr	r2, [pc, #144]	@ (8003d74 <TIM_Base_SetConfig+0x138>)
 8003ce2:	4293      	cmp	r3, r2
 8003ce4:	d003      	beq.n	8003cee <TIM_Base_SetConfig+0xb2>
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	4a23      	ldr	r2, [pc, #140]	@ (8003d78 <TIM_Base_SetConfig+0x13c>)
 8003cea:	4293      	cmp	r3, r2
 8003cec:	d108      	bne.n	8003d00 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003cf4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003cf6:	683b      	ldr	r3, [r7, #0]
 8003cf8:	68db      	ldr	r3, [r3, #12]
 8003cfa:	68fa      	ldr	r2, [r7, #12]
 8003cfc:	4313      	orrs	r3, r2
 8003cfe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003d06:	683b      	ldr	r3, [r7, #0]
 8003d08:	695b      	ldr	r3, [r3, #20]
 8003d0a:	4313      	orrs	r3, r2
 8003d0c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	68fa      	ldr	r2, [r7, #12]
 8003d12:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003d14:	683b      	ldr	r3, [r7, #0]
 8003d16:	689a      	ldr	r2, [r3, #8]
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003d1c:	683b      	ldr	r3, [r7, #0]
 8003d1e:	681a      	ldr	r2, [r3, #0]
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	4a0a      	ldr	r2, [pc, #40]	@ (8003d50 <TIM_Base_SetConfig+0x114>)
 8003d28:	4293      	cmp	r3, r2
 8003d2a:	d003      	beq.n	8003d34 <TIM_Base_SetConfig+0xf8>
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	4a0c      	ldr	r2, [pc, #48]	@ (8003d60 <TIM_Base_SetConfig+0x124>)
 8003d30:	4293      	cmp	r3, r2
 8003d32:	d103      	bne.n	8003d3c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003d34:	683b      	ldr	r3, [r7, #0]
 8003d36:	691a      	ldr	r2, [r3, #16]
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	2201      	movs	r2, #1
 8003d40:	615a      	str	r2, [r3, #20]
}
 8003d42:	bf00      	nop
 8003d44:	3714      	adds	r7, #20
 8003d46:	46bd      	mov	sp, r7
 8003d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d4c:	4770      	bx	lr
 8003d4e:	bf00      	nop
 8003d50:	40010000 	.word	0x40010000
 8003d54:	40000400 	.word	0x40000400
 8003d58:	40000800 	.word	0x40000800
 8003d5c:	40000c00 	.word	0x40000c00
 8003d60:	40010400 	.word	0x40010400
 8003d64:	40014000 	.word	0x40014000
 8003d68:	40014400 	.word	0x40014400
 8003d6c:	40014800 	.word	0x40014800
 8003d70:	40001800 	.word	0x40001800
 8003d74:	40001c00 	.word	0x40001c00
 8003d78:	40002000 	.word	0x40002000

08003d7c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003d7c:	b480      	push	{r7}
 8003d7e:	b087      	sub	sp, #28
 8003d80:	af00      	add	r7, sp, #0
 8003d82:	60f8      	str	r0, [r7, #12]
 8003d84:	60b9      	str	r1, [r7, #8]
 8003d86:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	6a1b      	ldr	r3, [r3, #32]
 8003d8c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	6a1b      	ldr	r3, [r3, #32]
 8003d92:	f023 0201 	bic.w	r2, r3, #1
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	699b      	ldr	r3, [r3, #24]
 8003d9e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003da0:	693b      	ldr	r3, [r7, #16]
 8003da2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003da6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	011b      	lsls	r3, r3, #4
 8003dac:	693a      	ldr	r2, [r7, #16]
 8003dae:	4313      	orrs	r3, r2
 8003db0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003db2:	697b      	ldr	r3, [r7, #20]
 8003db4:	f023 030a 	bic.w	r3, r3, #10
 8003db8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003dba:	697a      	ldr	r2, [r7, #20]
 8003dbc:	68bb      	ldr	r3, [r7, #8]
 8003dbe:	4313      	orrs	r3, r2
 8003dc0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	693a      	ldr	r2, [r7, #16]
 8003dc6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	697a      	ldr	r2, [r7, #20]
 8003dcc:	621a      	str	r2, [r3, #32]
}
 8003dce:	bf00      	nop
 8003dd0:	371c      	adds	r7, #28
 8003dd2:	46bd      	mov	sp, r7
 8003dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd8:	4770      	bx	lr

08003dda <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003dda:	b480      	push	{r7}
 8003ddc:	b087      	sub	sp, #28
 8003dde:	af00      	add	r7, sp, #0
 8003de0:	60f8      	str	r0, [r7, #12]
 8003de2:	60b9      	str	r1, [r7, #8]
 8003de4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	6a1b      	ldr	r3, [r3, #32]
 8003dea:	f023 0210 	bic.w	r2, r3, #16
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	699b      	ldr	r3, [r3, #24]
 8003df6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	6a1b      	ldr	r3, [r3, #32]
 8003dfc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003dfe:	697b      	ldr	r3, [r7, #20]
 8003e00:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003e04:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	031b      	lsls	r3, r3, #12
 8003e0a:	697a      	ldr	r2, [r7, #20]
 8003e0c:	4313      	orrs	r3, r2
 8003e0e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003e10:	693b      	ldr	r3, [r7, #16]
 8003e12:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8003e16:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003e18:	68bb      	ldr	r3, [r7, #8]
 8003e1a:	011b      	lsls	r3, r3, #4
 8003e1c:	693a      	ldr	r2, [r7, #16]
 8003e1e:	4313      	orrs	r3, r2
 8003e20:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	697a      	ldr	r2, [r7, #20]
 8003e26:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	693a      	ldr	r2, [r7, #16]
 8003e2c:	621a      	str	r2, [r3, #32]
}
 8003e2e:	bf00      	nop
 8003e30:	371c      	adds	r7, #28
 8003e32:	46bd      	mov	sp, r7
 8003e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e38:	4770      	bx	lr

08003e3a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003e3a:	b480      	push	{r7}
 8003e3c:	b085      	sub	sp, #20
 8003e3e:	af00      	add	r7, sp, #0
 8003e40:	6078      	str	r0, [r7, #4]
 8003e42:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	689b      	ldr	r3, [r3, #8]
 8003e48:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003e50:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003e52:	683a      	ldr	r2, [r7, #0]
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	4313      	orrs	r3, r2
 8003e58:	f043 0307 	orr.w	r3, r3, #7
 8003e5c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	68fa      	ldr	r2, [r7, #12]
 8003e62:	609a      	str	r2, [r3, #8]
}
 8003e64:	bf00      	nop
 8003e66:	3714      	adds	r7, #20
 8003e68:	46bd      	mov	sp, r7
 8003e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e6e:	4770      	bx	lr

08003e70 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003e70:	b480      	push	{r7}
 8003e72:	b087      	sub	sp, #28
 8003e74:	af00      	add	r7, sp, #0
 8003e76:	60f8      	str	r0, [r7, #12]
 8003e78:	60b9      	str	r1, [r7, #8]
 8003e7a:	607a      	str	r2, [r7, #4]
 8003e7c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	689b      	ldr	r3, [r3, #8]
 8003e82:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003e84:	697b      	ldr	r3, [r7, #20]
 8003e86:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003e8a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003e8c:	683b      	ldr	r3, [r7, #0]
 8003e8e:	021a      	lsls	r2, r3, #8
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	431a      	orrs	r2, r3
 8003e94:	68bb      	ldr	r3, [r7, #8]
 8003e96:	4313      	orrs	r3, r2
 8003e98:	697a      	ldr	r2, [r7, #20]
 8003e9a:	4313      	orrs	r3, r2
 8003e9c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	697a      	ldr	r2, [r7, #20]
 8003ea2:	609a      	str	r2, [r3, #8]
}
 8003ea4:	bf00      	nop
 8003ea6:	371c      	adds	r7, #28
 8003ea8:	46bd      	mov	sp, r7
 8003eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eae:	4770      	bx	lr

08003eb0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003eb0:	b480      	push	{r7}
 8003eb2:	b085      	sub	sp, #20
 8003eb4:	af00      	add	r7, sp, #0
 8003eb6:	6078      	str	r0, [r7, #4]
 8003eb8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003ec0:	2b01      	cmp	r3, #1
 8003ec2:	d101      	bne.n	8003ec8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003ec4:	2302      	movs	r3, #2
 8003ec6:	e06d      	b.n	8003fa4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	2201      	movs	r2, #1
 8003ecc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	2202      	movs	r2, #2
 8003ed4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	685b      	ldr	r3, [r3, #4]
 8003ede:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	689b      	ldr	r3, [r3, #8]
 8003ee6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	4a30      	ldr	r2, [pc, #192]	@ (8003fb0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8003eee:	4293      	cmp	r3, r2
 8003ef0:	d004      	beq.n	8003efc <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	4a2f      	ldr	r2, [pc, #188]	@ (8003fb4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8003ef8:	4293      	cmp	r3, r2
 8003efa:	d108      	bne.n	8003f0e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8003f02:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003f04:	683b      	ldr	r3, [r7, #0]
 8003f06:	685b      	ldr	r3, [r3, #4]
 8003f08:	68fa      	ldr	r2, [r7, #12]
 8003f0a:	4313      	orrs	r3, r2
 8003f0c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003f14:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003f16:	683b      	ldr	r3, [r7, #0]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	68fa      	ldr	r2, [r7, #12]
 8003f1c:	4313      	orrs	r3, r2
 8003f1e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	68fa      	ldr	r2, [r7, #12]
 8003f26:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	4a20      	ldr	r2, [pc, #128]	@ (8003fb0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8003f2e:	4293      	cmp	r3, r2
 8003f30:	d022      	beq.n	8003f78 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003f3a:	d01d      	beq.n	8003f78 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	4a1d      	ldr	r2, [pc, #116]	@ (8003fb8 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8003f42:	4293      	cmp	r3, r2
 8003f44:	d018      	beq.n	8003f78 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	4a1c      	ldr	r2, [pc, #112]	@ (8003fbc <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8003f4c:	4293      	cmp	r3, r2
 8003f4e:	d013      	beq.n	8003f78 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	4a1a      	ldr	r2, [pc, #104]	@ (8003fc0 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8003f56:	4293      	cmp	r3, r2
 8003f58:	d00e      	beq.n	8003f78 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	4a15      	ldr	r2, [pc, #84]	@ (8003fb4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8003f60:	4293      	cmp	r3, r2
 8003f62:	d009      	beq.n	8003f78 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	4a16      	ldr	r2, [pc, #88]	@ (8003fc4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8003f6a:	4293      	cmp	r3, r2
 8003f6c:	d004      	beq.n	8003f78 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	4a15      	ldr	r2, [pc, #84]	@ (8003fc8 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8003f74:	4293      	cmp	r3, r2
 8003f76:	d10c      	bne.n	8003f92 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003f78:	68bb      	ldr	r3, [r7, #8]
 8003f7a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003f7e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003f80:	683b      	ldr	r3, [r7, #0]
 8003f82:	689b      	ldr	r3, [r3, #8]
 8003f84:	68ba      	ldr	r2, [r7, #8]
 8003f86:	4313      	orrs	r3, r2
 8003f88:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	68ba      	ldr	r2, [r7, #8]
 8003f90:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	2201      	movs	r2, #1
 8003f96:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	2200      	movs	r2, #0
 8003f9e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003fa2:	2300      	movs	r3, #0
}
 8003fa4:	4618      	mov	r0, r3
 8003fa6:	3714      	adds	r7, #20
 8003fa8:	46bd      	mov	sp, r7
 8003faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fae:	4770      	bx	lr
 8003fb0:	40010000 	.word	0x40010000
 8003fb4:	40010400 	.word	0x40010400
 8003fb8:	40000400 	.word	0x40000400
 8003fbc:	40000800 	.word	0x40000800
 8003fc0:	40000c00 	.word	0x40000c00
 8003fc4:	40014000 	.word	0x40014000
 8003fc8:	40001800 	.word	0x40001800

08003fcc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003fcc:	b480      	push	{r7}
 8003fce:	b083      	sub	sp, #12
 8003fd0:	af00      	add	r7, sp, #0
 8003fd2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003fd4:	bf00      	nop
 8003fd6:	370c      	adds	r7, #12
 8003fd8:	46bd      	mov	sp, r7
 8003fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fde:	4770      	bx	lr

08003fe0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003fe0:	b480      	push	{r7}
 8003fe2:	b083      	sub	sp, #12
 8003fe4:	af00      	add	r7, sp, #0
 8003fe6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003fe8:	bf00      	nop
 8003fea:	370c      	adds	r7, #12
 8003fec:	46bd      	mov	sp, r7
 8003fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff2:	4770      	bx	lr

08003ff4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003ff4:	b480      	push	{r7}
 8003ff6:	b083      	sub	sp, #12
 8003ff8:	af00      	add	r7, sp, #0
 8003ffa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003ffc:	bf00      	nop
 8003ffe:	370c      	adds	r7, #12
 8004000:	46bd      	mov	sp, r7
 8004002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004006:	4770      	bx	lr

08004008 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004008:	b580      	push	{r7, lr}
 800400a:	b082      	sub	sp, #8
 800400c:	af00      	add	r7, sp, #0
 800400e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	2b00      	cmp	r3, #0
 8004014:	d101      	bne.n	800401a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004016:	2301      	movs	r3, #1
 8004018:	e040      	b.n	800409c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800401e:	2b00      	cmp	r3, #0
 8004020:	d106      	bne.n	8004030 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	2200      	movs	r2, #0
 8004026:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800402a:	6878      	ldr	r0, [r7, #4]
 800402c:	f7fd fa8e 	bl	800154c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	2224      	movs	r2, #36	@ 0x24
 8004034:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	681a      	ldr	r2, [r3, #0]
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	f022 0201 	bic.w	r2, r2, #1
 8004044:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004046:	6878      	ldr	r0, [r7, #4]
 8004048:	f000 f8b0 	bl	80041ac <UART_SetConfig>
 800404c:	4603      	mov	r3, r0
 800404e:	2b01      	cmp	r3, #1
 8004050:	d101      	bne.n	8004056 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004052:	2301      	movs	r3, #1
 8004054:	e022      	b.n	800409c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800405a:	2b00      	cmp	r3, #0
 800405c:	d002      	beq.n	8004064 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800405e:	6878      	ldr	r0, [r7, #4]
 8004060:	f000 fb08 	bl	8004674 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	685a      	ldr	r2, [r3, #4]
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004072:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	689a      	ldr	r2, [r3, #8]
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004082:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	681a      	ldr	r2, [r3, #0]
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	f042 0201 	orr.w	r2, r2, #1
 8004092:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004094:	6878      	ldr	r0, [r7, #4]
 8004096:	f000 fb8f 	bl	80047b8 <UART_CheckIdleState>
 800409a:	4603      	mov	r3, r0
}
 800409c:	4618      	mov	r0, r3
 800409e:	3708      	adds	r7, #8
 80040a0:	46bd      	mov	sp, r7
 80040a2:	bd80      	pop	{r7, pc}

080040a4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80040a4:	b580      	push	{r7, lr}
 80040a6:	b08a      	sub	sp, #40	@ 0x28
 80040a8:	af02      	add	r7, sp, #8
 80040aa:	60f8      	str	r0, [r7, #12]
 80040ac:	60b9      	str	r1, [r7, #8]
 80040ae:	603b      	str	r3, [r7, #0]
 80040b0:	4613      	mov	r3, r2
 80040b2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80040b8:	2b20      	cmp	r3, #32
 80040ba:	d171      	bne.n	80041a0 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 80040bc:	68bb      	ldr	r3, [r7, #8]
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d002      	beq.n	80040c8 <HAL_UART_Transmit+0x24>
 80040c2:	88fb      	ldrh	r3, [r7, #6]
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d101      	bne.n	80040cc <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80040c8:	2301      	movs	r3, #1
 80040ca:	e06a      	b.n	80041a2 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	2200      	movs	r2, #0
 80040d0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	2221      	movs	r2, #33	@ 0x21
 80040d8:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80040da:	f7fd fb11 	bl	8001700 <HAL_GetTick>
 80040de:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	88fa      	ldrh	r2, [r7, #6]
 80040e4:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	88fa      	ldrh	r2, [r7, #6]
 80040ec:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	689b      	ldr	r3, [r3, #8]
 80040f4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80040f8:	d108      	bne.n	800410c <HAL_UART_Transmit+0x68>
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	691b      	ldr	r3, [r3, #16]
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d104      	bne.n	800410c <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8004102:	2300      	movs	r3, #0
 8004104:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004106:	68bb      	ldr	r3, [r7, #8]
 8004108:	61bb      	str	r3, [r7, #24]
 800410a:	e003      	b.n	8004114 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 800410c:	68bb      	ldr	r3, [r7, #8]
 800410e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004110:	2300      	movs	r3, #0
 8004112:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004114:	e02c      	b.n	8004170 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004116:	683b      	ldr	r3, [r7, #0]
 8004118:	9300      	str	r3, [sp, #0]
 800411a:	697b      	ldr	r3, [r7, #20]
 800411c:	2200      	movs	r2, #0
 800411e:	2180      	movs	r1, #128	@ 0x80
 8004120:	68f8      	ldr	r0, [r7, #12]
 8004122:	f000 fb96 	bl	8004852 <UART_WaitOnFlagUntilTimeout>
 8004126:	4603      	mov	r3, r0
 8004128:	2b00      	cmp	r3, #0
 800412a:	d001      	beq.n	8004130 <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 800412c:	2303      	movs	r3, #3
 800412e:	e038      	b.n	80041a2 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8004130:	69fb      	ldr	r3, [r7, #28]
 8004132:	2b00      	cmp	r3, #0
 8004134:	d10b      	bne.n	800414e <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004136:	69bb      	ldr	r3, [r7, #24]
 8004138:	881b      	ldrh	r3, [r3, #0]
 800413a:	461a      	mov	r2, r3
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004144:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8004146:	69bb      	ldr	r3, [r7, #24]
 8004148:	3302      	adds	r3, #2
 800414a:	61bb      	str	r3, [r7, #24]
 800414c:	e007      	b.n	800415e <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800414e:	69fb      	ldr	r3, [r7, #28]
 8004150:	781a      	ldrb	r2, [r3, #0]
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8004158:	69fb      	ldr	r3, [r7, #28]
 800415a:	3301      	adds	r3, #1
 800415c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8004164:	b29b      	uxth	r3, r3
 8004166:	3b01      	subs	r3, #1
 8004168:	b29a      	uxth	r2, r3
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8004176:	b29b      	uxth	r3, r3
 8004178:	2b00      	cmp	r3, #0
 800417a:	d1cc      	bne.n	8004116 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800417c:	683b      	ldr	r3, [r7, #0]
 800417e:	9300      	str	r3, [sp, #0]
 8004180:	697b      	ldr	r3, [r7, #20]
 8004182:	2200      	movs	r2, #0
 8004184:	2140      	movs	r1, #64	@ 0x40
 8004186:	68f8      	ldr	r0, [r7, #12]
 8004188:	f000 fb63 	bl	8004852 <UART_WaitOnFlagUntilTimeout>
 800418c:	4603      	mov	r3, r0
 800418e:	2b00      	cmp	r3, #0
 8004190:	d001      	beq.n	8004196 <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 8004192:	2303      	movs	r3, #3
 8004194:	e005      	b.n	80041a2 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	2220      	movs	r2, #32
 800419a:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 800419c:	2300      	movs	r3, #0
 800419e:	e000      	b.n	80041a2 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 80041a0:	2302      	movs	r3, #2
  }
}
 80041a2:	4618      	mov	r0, r3
 80041a4:	3720      	adds	r7, #32
 80041a6:	46bd      	mov	sp, r7
 80041a8:	bd80      	pop	{r7, pc}
	...

080041ac <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80041ac:	b580      	push	{r7, lr}
 80041ae:	b088      	sub	sp, #32
 80041b0:	af00      	add	r7, sp, #0
 80041b2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80041b4:	2300      	movs	r3, #0
 80041b6:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	689a      	ldr	r2, [r3, #8]
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	691b      	ldr	r3, [r3, #16]
 80041c0:	431a      	orrs	r2, r3
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	695b      	ldr	r3, [r3, #20]
 80041c6:	431a      	orrs	r2, r3
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	69db      	ldr	r3, [r3, #28]
 80041cc:	4313      	orrs	r3, r2
 80041ce:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	681a      	ldr	r2, [r3, #0]
 80041d6:	4ba6      	ldr	r3, [pc, #664]	@ (8004470 <UART_SetConfig+0x2c4>)
 80041d8:	4013      	ands	r3, r2
 80041da:	687a      	ldr	r2, [r7, #4]
 80041dc:	6812      	ldr	r2, [r2, #0]
 80041de:	6979      	ldr	r1, [r7, #20]
 80041e0:	430b      	orrs	r3, r1
 80041e2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	685b      	ldr	r3, [r3, #4]
 80041ea:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	68da      	ldr	r2, [r3, #12]
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	430a      	orrs	r2, r1
 80041f8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	699b      	ldr	r3, [r3, #24]
 80041fe:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	6a1b      	ldr	r3, [r3, #32]
 8004204:	697a      	ldr	r2, [r7, #20]
 8004206:	4313      	orrs	r3, r2
 8004208:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	689b      	ldr	r3, [r3, #8]
 8004210:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	697a      	ldr	r2, [r7, #20]
 800421a:	430a      	orrs	r2, r1
 800421c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	4a94      	ldr	r2, [pc, #592]	@ (8004474 <UART_SetConfig+0x2c8>)
 8004224:	4293      	cmp	r3, r2
 8004226:	d120      	bne.n	800426a <UART_SetConfig+0xbe>
 8004228:	4b93      	ldr	r3, [pc, #588]	@ (8004478 <UART_SetConfig+0x2cc>)
 800422a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800422e:	f003 0303 	and.w	r3, r3, #3
 8004232:	2b03      	cmp	r3, #3
 8004234:	d816      	bhi.n	8004264 <UART_SetConfig+0xb8>
 8004236:	a201      	add	r2, pc, #4	@ (adr r2, 800423c <UART_SetConfig+0x90>)
 8004238:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800423c:	0800424d 	.word	0x0800424d
 8004240:	08004259 	.word	0x08004259
 8004244:	08004253 	.word	0x08004253
 8004248:	0800425f 	.word	0x0800425f
 800424c:	2301      	movs	r3, #1
 800424e:	77fb      	strb	r3, [r7, #31]
 8004250:	e150      	b.n	80044f4 <UART_SetConfig+0x348>
 8004252:	2302      	movs	r3, #2
 8004254:	77fb      	strb	r3, [r7, #31]
 8004256:	e14d      	b.n	80044f4 <UART_SetConfig+0x348>
 8004258:	2304      	movs	r3, #4
 800425a:	77fb      	strb	r3, [r7, #31]
 800425c:	e14a      	b.n	80044f4 <UART_SetConfig+0x348>
 800425e:	2308      	movs	r3, #8
 8004260:	77fb      	strb	r3, [r7, #31]
 8004262:	e147      	b.n	80044f4 <UART_SetConfig+0x348>
 8004264:	2310      	movs	r3, #16
 8004266:	77fb      	strb	r3, [r7, #31]
 8004268:	e144      	b.n	80044f4 <UART_SetConfig+0x348>
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	4a83      	ldr	r2, [pc, #524]	@ (800447c <UART_SetConfig+0x2d0>)
 8004270:	4293      	cmp	r3, r2
 8004272:	d132      	bne.n	80042da <UART_SetConfig+0x12e>
 8004274:	4b80      	ldr	r3, [pc, #512]	@ (8004478 <UART_SetConfig+0x2cc>)
 8004276:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800427a:	f003 030c 	and.w	r3, r3, #12
 800427e:	2b0c      	cmp	r3, #12
 8004280:	d828      	bhi.n	80042d4 <UART_SetConfig+0x128>
 8004282:	a201      	add	r2, pc, #4	@ (adr r2, 8004288 <UART_SetConfig+0xdc>)
 8004284:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004288:	080042bd 	.word	0x080042bd
 800428c:	080042d5 	.word	0x080042d5
 8004290:	080042d5 	.word	0x080042d5
 8004294:	080042d5 	.word	0x080042d5
 8004298:	080042c9 	.word	0x080042c9
 800429c:	080042d5 	.word	0x080042d5
 80042a0:	080042d5 	.word	0x080042d5
 80042a4:	080042d5 	.word	0x080042d5
 80042a8:	080042c3 	.word	0x080042c3
 80042ac:	080042d5 	.word	0x080042d5
 80042b0:	080042d5 	.word	0x080042d5
 80042b4:	080042d5 	.word	0x080042d5
 80042b8:	080042cf 	.word	0x080042cf
 80042bc:	2300      	movs	r3, #0
 80042be:	77fb      	strb	r3, [r7, #31]
 80042c0:	e118      	b.n	80044f4 <UART_SetConfig+0x348>
 80042c2:	2302      	movs	r3, #2
 80042c4:	77fb      	strb	r3, [r7, #31]
 80042c6:	e115      	b.n	80044f4 <UART_SetConfig+0x348>
 80042c8:	2304      	movs	r3, #4
 80042ca:	77fb      	strb	r3, [r7, #31]
 80042cc:	e112      	b.n	80044f4 <UART_SetConfig+0x348>
 80042ce:	2308      	movs	r3, #8
 80042d0:	77fb      	strb	r3, [r7, #31]
 80042d2:	e10f      	b.n	80044f4 <UART_SetConfig+0x348>
 80042d4:	2310      	movs	r3, #16
 80042d6:	77fb      	strb	r3, [r7, #31]
 80042d8:	e10c      	b.n	80044f4 <UART_SetConfig+0x348>
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	4a68      	ldr	r2, [pc, #416]	@ (8004480 <UART_SetConfig+0x2d4>)
 80042e0:	4293      	cmp	r3, r2
 80042e2:	d120      	bne.n	8004326 <UART_SetConfig+0x17a>
 80042e4:	4b64      	ldr	r3, [pc, #400]	@ (8004478 <UART_SetConfig+0x2cc>)
 80042e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80042ea:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80042ee:	2b30      	cmp	r3, #48	@ 0x30
 80042f0:	d013      	beq.n	800431a <UART_SetConfig+0x16e>
 80042f2:	2b30      	cmp	r3, #48	@ 0x30
 80042f4:	d814      	bhi.n	8004320 <UART_SetConfig+0x174>
 80042f6:	2b20      	cmp	r3, #32
 80042f8:	d009      	beq.n	800430e <UART_SetConfig+0x162>
 80042fa:	2b20      	cmp	r3, #32
 80042fc:	d810      	bhi.n	8004320 <UART_SetConfig+0x174>
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d002      	beq.n	8004308 <UART_SetConfig+0x15c>
 8004302:	2b10      	cmp	r3, #16
 8004304:	d006      	beq.n	8004314 <UART_SetConfig+0x168>
 8004306:	e00b      	b.n	8004320 <UART_SetConfig+0x174>
 8004308:	2300      	movs	r3, #0
 800430a:	77fb      	strb	r3, [r7, #31]
 800430c:	e0f2      	b.n	80044f4 <UART_SetConfig+0x348>
 800430e:	2302      	movs	r3, #2
 8004310:	77fb      	strb	r3, [r7, #31]
 8004312:	e0ef      	b.n	80044f4 <UART_SetConfig+0x348>
 8004314:	2304      	movs	r3, #4
 8004316:	77fb      	strb	r3, [r7, #31]
 8004318:	e0ec      	b.n	80044f4 <UART_SetConfig+0x348>
 800431a:	2308      	movs	r3, #8
 800431c:	77fb      	strb	r3, [r7, #31]
 800431e:	e0e9      	b.n	80044f4 <UART_SetConfig+0x348>
 8004320:	2310      	movs	r3, #16
 8004322:	77fb      	strb	r3, [r7, #31]
 8004324:	e0e6      	b.n	80044f4 <UART_SetConfig+0x348>
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	4a56      	ldr	r2, [pc, #344]	@ (8004484 <UART_SetConfig+0x2d8>)
 800432c:	4293      	cmp	r3, r2
 800432e:	d120      	bne.n	8004372 <UART_SetConfig+0x1c6>
 8004330:	4b51      	ldr	r3, [pc, #324]	@ (8004478 <UART_SetConfig+0x2cc>)
 8004332:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004336:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800433a:	2bc0      	cmp	r3, #192	@ 0xc0
 800433c:	d013      	beq.n	8004366 <UART_SetConfig+0x1ba>
 800433e:	2bc0      	cmp	r3, #192	@ 0xc0
 8004340:	d814      	bhi.n	800436c <UART_SetConfig+0x1c0>
 8004342:	2b80      	cmp	r3, #128	@ 0x80
 8004344:	d009      	beq.n	800435a <UART_SetConfig+0x1ae>
 8004346:	2b80      	cmp	r3, #128	@ 0x80
 8004348:	d810      	bhi.n	800436c <UART_SetConfig+0x1c0>
 800434a:	2b00      	cmp	r3, #0
 800434c:	d002      	beq.n	8004354 <UART_SetConfig+0x1a8>
 800434e:	2b40      	cmp	r3, #64	@ 0x40
 8004350:	d006      	beq.n	8004360 <UART_SetConfig+0x1b4>
 8004352:	e00b      	b.n	800436c <UART_SetConfig+0x1c0>
 8004354:	2300      	movs	r3, #0
 8004356:	77fb      	strb	r3, [r7, #31]
 8004358:	e0cc      	b.n	80044f4 <UART_SetConfig+0x348>
 800435a:	2302      	movs	r3, #2
 800435c:	77fb      	strb	r3, [r7, #31]
 800435e:	e0c9      	b.n	80044f4 <UART_SetConfig+0x348>
 8004360:	2304      	movs	r3, #4
 8004362:	77fb      	strb	r3, [r7, #31]
 8004364:	e0c6      	b.n	80044f4 <UART_SetConfig+0x348>
 8004366:	2308      	movs	r3, #8
 8004368:	77fb      	strb	r3, [r7, #31]
 800436a:	e0c3      	b.n	80044f4 <UART_SetConfig+0x348>
 800436c:	2310      	movs	r3, #16
 800436e:	77fb      	strb	r3, [r7, #31]
 8004370:	e0c0      	b.n	80044f4 <UART_SetConfig+0x348>
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	4a44      	ldr	r2, [pc, #272]	@ (8004488 <UART_SetConfig+0x2dc>)
 8004378:	4293      	cmp	r3, r2
 800437a:	d125      	bne.n	80043c8 <UART_SetConfig+0x21c>
 800437c:	4b3e      	ldr	r3, [pc, #248]	@ (8004478 <UART_SetConfig+0x2cc>)
 800437e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004382:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004386:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800438a:	d017      	beq.n	80043bc <UART_SetConfig+0x210>
 800438c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004390:	d817      	bhi.n	80043c2 <UART_SetConfig+0x216>
 8004392:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004396:	d00b      	beq.n	80043b0 <UART_SetConfig+0x204>
 8004398:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800439c:	d811      	bhi.n	80043c2 <UART_SetConfig+0x216>
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d003      	beq.n	80043aa <UART_SetConfig+0x1fe>
 80043a2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80043a6:	d006      	beq.n	80043b6 <UART_SetConfig+0x20a>
 80043a8:	e00b      	b.n	80043c2 <UART_SetConfig+0x216>
 80043aa:	2300      	movs	r3, #0
 80043ac:	77fb      	strb	r3, [r7, #31]
 80043ae:	e0a1      	b.n	80044f4 <UART_SetConfig+0x348>
 80043b0:	2302      	movs	r3, #2
 80043b2:	77fb      	strb	r3, [r7, #31]
 80043b4:	e09e      	b.n	80044f4 <UART_SetConfig+0x348>
 80043b6:	2304      	movs	r3, #4
 80043b8:	77fb      	strb	r3, [r7, #31]
 80043ba:	e09b      	b.n	80044f4 <UART_SetConfig+0x348>
 80043bc:	2308      	movs	r3, #8
 80043be:	77fb      	strb	r3, [r7, #31]
 80043c0:	e098      	b.n	80044f4 <UART_SetConfig+0x348>
 80043c2:	2310      	movs	r3, #16
 80043c4:	77fb      	strb	r3, [r7, #31]
 80043c6:	e095      	b.n	80044f4 <UART_SetConfig+0x348>
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	4a2f      	ldr	r2, [pc, #188]	@ (800448c <UART_SetConfig+0x2e0>)
 80043ce:	4293      	cmp	r3, r2
 80043d0:	d125      	bne.n	800441e <UART_SetConfig+0x272>
 80043d2:	4b29      	ldr	r3, [pc, #164]	@ (8004478 <UART_SetConfig+0x2cc>)
 80043d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80043d8:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80043dc:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80043e0:	d017      	beq.n	8004412 <UART_SetConfig+0x266>
 80043e2:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80043e6:	d817      	bhi.n	8004418 <UART_SetConfig+0x26c>
 80043e8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80043ec:	d00b      	beq.n	8004406 <UART_SetConfig+0x25a>
 80043ee:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80043f2:	d811      	bhi.n	8004418 <UART_SetConfig+0x26c>
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d003      	beq.n	8004400 <UART_SetConfig+0x254>
 80043f8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80043fc:	d006      	beq.n	800440c <UART_SetConfig+0x260>
 80043fe:	e00b      	b.n	8004418 <UART_SetConfig+0x26c>
 8004400:	2301      	movs	r3, #1
 8004402:	77fb      	strb	r3, [r7, #31]
 8004404:	e076      	b.n	80044f4 <UART_SetConfig+0x348>
 8004406:	2302      	movs	r3, #2
 8004408:	77fb      	strb	r3, [r7, #31]
 800440a:	e073      	b.n	80044f4 <UART_SetConfig+0x348>
 800440c:	2304      	movs	r3, #4
 800440e:	77fb      	strb	r3, [r7, #31]
 8004410:	e070      	b.n	80044f4 <UART_SetConfig+0x348>
 8004412:	2308      	movs	r3, #8
 8004414:	77fb      	strb	r3, [r7, #31]
 8004416:	e06d      	b.n	80044f4 <UART_SetConfig+0x348>
 8004418:	2310      	movs	r3, #16
 800441a:	77fb      	strb	r3, [r7, #31]
 800441c:	e06a      	b.n	80044f4 <UART_SetConfig+0x348>
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	4a1b      	ldr	r2, [pc, #108]	@ (8004490 <UART_SetConfig+0x2e4>)
 8004424:	4293      	cmp	r3, r2
 8004426:	d138      	bne.n	800449a <UART_SetConfig+0x2ee>
 8004428:	4b13      	ldr	r3, [pc, #76]	@ (8004478 <UART_SetConfig+0x2cc>)
 800442a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800442e:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8004432:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004436:	d017      	beq.n	8004468 <UART_SetConfig+0x2bc>
 8004438:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800443c:	d82a      	bhi.n	8004494 <UART_SetConfig+0x2e8>
 800443e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004442:	d00b      	beq.n	800445c <UART_SetConfig+0x2b0>
 8004444:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004448:	d824      	bhi.n	8004494 <UART_SetConfig+0x2e8>
 800444a:	2b00      	cmp	r3, #0
 800444c:	d003      	beq.n	8004456 <UART_SetConfig+0x2aa>
 800444e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004452:	d006      	beq.n	8004462 <UART_SetConfig+0x2b6>
 8004454:	e01e      	b.n	8004494 <UART_SetConfig+0x2e8>
 8004456:	2300      	movs	r3, #0
 8004458:	77fb      	strb	r3, [r7, #31]
 800445a:	e04b      	b.n	80044f4 <UART_SetConfig+0x348>
 800445c:	2302      	movs	r3, #2
 800445e:	77fb      	strb	r3, [r7, #31]
 8004460:	e048      	b.n	80044f4 <UART_SetConfig+0x348>
 8004462:	2304      	movs	r3, #4
 8004464:	77fb      	strb	r3, [r7, #31]
 8004466:	e045      	b.n	80044f4 <UART_SetConfig+0x348>
 8004468:	2308      	movs	r3, #8
 800446a:	77fb      	strb	r3, [r7, #31]
 800446c:	e042      	b.n	80044f4 <UART_SetConfig+0x348>
 800446e:	bf00      	nop
 8004470:	efff69f3 	.word	0xefff69f3
 8004474:	40011000 	.word	0x40011000
 8004478:	40023800 	.word	0x40023800
 800447c:	40004400 	.word	0x40004400
 8004480:	40004800 	.word	0x40004800
 8004484:	40004c00 	.word	0x40004c00
 8004488:	40005000 	.word	0x40005000
 800448c:	40011400 	.word	0x40011400
 8004490:	40007800 	.word	0x40007800
 8004494:	2310      	movs	r3, #16
 8004496:	77fb      	strb	r3, [r7, #31]
 8004498:	e02c      	b.n	80044f4 <UART_SetConfig+0x348>
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	4a72      	ldr	r2, [pc, #456]	@ (8004668 <UART_SetConfig+0x4bc>)
 80044a0:	4293      	cmp	r3, r2
 80044a2:	d125      	bne.n	80044f0 <UART_SetConfig+0x344>
 80044a4:	4b71      	ldr	r3, [pc, #452]	@ (800466c <UART_SetConfig+0x4c0>)
 80044a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80044aa:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80044ae:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 80044b2:	d017      	beq.n	80044e4 <UART_SetConfig+0x338>
 80044b4:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 80044b8:	d817      	bhi.n	80044ea <UART_SetConfig+0x33e>
 80044ba:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80044be:	d00b      	beq.n	80044d8 <UART_SetConfig+0x32c>
 80044c0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80044c4:	d811      	bhi.n	80044ea <UART_SetConfig+0x33e>
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d003      	beq.n	80044d2 <UART_SetConfig+0x326>
 80044ca:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80044ce:	d006      	beq.n	80044de <UART_SetConfig+0x332>
 80044d0:	e00b      	b.n	80044ea <UART_SetConfig+0x33e>
 80044d2:	2300      	movs	r3, #0
 80044d4:	77fb      	strb	r3, [r7, #31]
 80044d6:	e00d      	b.n	80044f4 <UART_SetConfig+0x348>
 80044d8:	2302      	movs	r3, #2
 80044da:	77fb      	strb	r3, [r7, #31]
 80044dc:	e00a      	b.n	80044f4 <UART_SetConfig+0x348>
 80044de:	2304      	movs	r3, #4
 80044e0:	77fb      	strb	r3, [r7, #31]
 80044e2:	e007      	b.n	80044f4 <UART_SetConfig+0x348>
 80044e4:	2308      	movs	r3, #8
 80044e6:	77fb      	strb	r3, [r7, #31]
 80044e8:	e004      	b.n	80044f4 <UART_SetConfig+0x348>
 80044ea:	2310      	movs	r3, #16
 80044ec:	77fb      	strb	r3, [r7, #31]
 80044ee:	e001      	b.n	80044f4 <UART_SetConfig+0x348>
 80044f0:	2310      	movs	r3, #16
 80044f2:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	69db      	ldr	r3, [r3, #28]
 80044f8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80044fc:	d15b      	bne.n	80045b6 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 80044fe:	7ffb      	ldrb	r3, [r7, #31]
 8004500:	2b08      	cmp	r3, #8
 8004502:	d828      	bhi.n	8004556 <UART_SetConfig+0x3aa>
 8004504:	a201      	add	r2, pc, #4	@ (adr r2, 800450c <UART_SetConfig+0x360>)
 8004506:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800450a:	bf00      	nop
 800450c:	08004531 	.word	0x08004531
 8004510:	08004539 	.word	0x08004539
 8004514:	08004541 	.word	0x08004541
 8004518:	08004557 	.word	0x08004557
 800451c:	08004547 	.word	0x08004547
 8004520:	08004557 	.word	0x08004557
 8004524:	08004557 	.word	0x08004557
 8004528:	08004557 	.word	0x08004557
 800452c:	0800454f 	.word	0x0800454f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004530:	f7fe f92a 	bl	8002788 <HAL_RCC_GetPCLK1Freq>
 8004534:	61b8      	str	r0, [r7, #24]
        break;
 8004536:	e013      	b.n	8004560 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004538:	f7fe f93a 	bl	80027b0 <HAL_RCC_GetPCLK2Freq>
 800453c:	61b8      	str	r0, [r7, #24]
        break;
 800453e:	e00f      	b.n	8004560 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004540:	4b4b      	ldr	r3, [pc, #300]	@ (8004670 <UART_SetConfig+0x4c4>)
 8004542:	61bb      	str	r3, [r7, #24]
        break;
 8004544:	e00c      	b.n	8004560 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004546:	f7fe f80d 	bl	8002564 <HAL_RCC_GetSysClockFreq>
 800454a:	61b8      	str	r0, [r7, #24]
        break;
 800454c:	e008      	b.n	8004560 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800454e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004552:	61bb      	str	r3, [r7, #24]
        break;
 8004554:	e004      	b.n	8004560 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8004556:	2300      	movs	r3, #0
 8004558:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800455a:	2301      	movs	r3, #1
 800455c:	77bb      	strb	r3, [r7, #30]
        break;
 800455e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004560:	69bb      	ldr	r3, [r7, #24]
 8004562:	2b00      	cmp	r3, #0
 8004564:	d074      	beq.n	8004650 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004566:	69bb      	ldr	r3, [r7, #24]
 8004568:	005a      	lsls	r2, r3, #1
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	685b      	ldr	r3, [r3, #4]
 800456e:	085b      	lsrs	r3, r3, #1
 8004570:	441a      	add	r2, r3
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	685b      	ldr	r3, [r3, #4]
 8004576:	fbb2 f3f3 	udiv	r3, r2, r3
 800457a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800457c:	693b      	ldr	r3, [r7, #16]
 800457e:	2b0f      	cmp	r3, #15
 8004580:	d916      	bls.n	80045b0 <UART_SetConfig+0x404>
 8004582:	693b      	ldr	r3, [r7, #16]
 8004584:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004588:	d212      	bcs.n	80045b0 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800458a:	693b      	ldr	r3, [r7, #16]
 800458c:	b29b      	uxth	r3, r3
 800458e:	f023 030f 	bic.w	r3, r3, #15
 8004592:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004594:	693b      	ldr	r3, [r7, #16]
 8004596:	085b      	lsrs	r3, r3, #1
 8004598:	b29b      	uxth	r3, r3
 800459a:	f003 0307 	and.w	r3, r3, #7
 800459e:	b29a      	uxth	r2, r3
 80045a0:	89fb      	ldrh	r3, [r7, #14]
 80045a2:	4313      	orrs	r3, r2
 80045a4:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	89fa      	ldrh	r2, [r7, #14]
 80045ac:	60da      	str	r2, [r3, #12]
 80045ae:	e04f      	b.n	8004650 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80045b0:	2301      	movs	r3, #1
 80045b2:	77bb      	strb	r3, [r7, #30]
 80045b4:	e04c      	b.n	8004650 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 80045b6:	7ffb      	ldrb	r3, [r7, #31]
 80045b8:	2b08      	cmp	r3, #8
 80045ba:	d828      	bhi.n	800460e <UART_SetConfig+0x462>
 80045bc:	a201      	add	r2, pc, #4	@ (adr r2, 80045c4 <UART_SetConfig+0x418>)
 80045be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045c2:	bf00      	nop
 80045c4:	080045e9 	.word	0x080045e9
 80045c8:	080045f1 	.word	0x080045f1
 80045cc:	080045f9 	.word	0x080045f9
 80045d0:	0800460f 	.word	0x0800460f
 80045d4:	080045ff 	.word	0x080045ff
 80045d8:	0800460f 	.word	0x0800460f
 80045dc:	0800460f 	.word	0x0800460f
 80045e0:	0800460f 	.word	0x0800460f
 80045e4:	08004607 	.word	0x08004607
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80045e8:	f7fe f8ce 	bl	8002788 <HAL_RCC_GetPCLK1Freq>
 80045ec:	61b8      	str	r0, [r7, #24]
        break;
 80045ee:	e013      	b.n	8004618 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80045f0:	f7fe f8de 	bl	80027b0 <HAL_RCC_GetPCLK2Freq>
 80045f4:	61b8      	str	r0, [r7, #24]
        break;
 80045f6:	e00f      	b.n	8004618 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80045f8:	4b1d      	ldr	r3, [pc, #116]	@ (8004670 <UART_SetConfig+0x4c4>)
 80045fa:	61bb      	str	r3, [r7, #24]
        break;
 80045fc:	e00c      	b.n	8004618 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80045fe:	f7fd ffb1 	bl	8002564 <HAL_RCC_GetSysClockFreq>
 8004602:	61b8      	str	r0, [r7, #24]
        break;
 8004604:	e008      	b.n	8004618 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004606:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800460a:	61bb      	str	r3, [r7, #24]
        break;
 800460c:	e004      	b.n	8004618 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 800460e:	2300      	movs	r3, #0
 8004610:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004612:	2301      	movs	r3, #1
 8004614:	77bb      	strb	r3, [r7, #30]
        break;
 8004616:	bf00      	nop
    }

    if (pclk != 0U)
 8004618:	69bb      	ldr	r3, [r7, #24]
 800461a:	2b00      	cmp	r3, #0
 800461c:	d018      	beq.n	8004650 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	685b      	ldr	r3, [r3, #4]
 8004622:	085a      	lsrs	r2, r3, #1
 8004624:	69bb      	ldr	r3, [r7, #24]
 8004626:	441a      	add	r2, r3
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	685b      	ldr	r3, [r3, #4]
 800462c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004630:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004632:	693b      	ldr	r3, [r7, #16]
 8004634:	2b0f      	cmp	r3, #15
 8004636:	d909      	bls.n	800464c <UART_SetConfig+0x4a0>
 8004638:	693b      	ldr	r3, [r7, #16]
 800463a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800463e:	d205      	bcs.n	800464c <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004640:	693b      	ldr	r3, [r7, #16]
 8004642:	b29a      	uxth	r2, r3
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	60da      	str	r2, [r3, #12]
 800464a:	e001      	b.n	8004650 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800464c:	2301      	movs	r3, #1
 800464e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	2200      	movs	r2, #0
 8004654:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	2200      	movs	r2, #0
 800465a:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 800465c:	7fbb      	ldrb	r3, [r7, #30]
}
 800465e:	4618      	mov	r0, r3
 8004660:	3720      	adds	r7, #32
 8004662:	46bd      	mov	sp, r7
 8004664:	bd80      	pop	{r7, pc}
 8004666:	bf00      	nop
 8004668:	40007c00 	.word	0x40007c00
 800466c:	40023800 	.word	0x40023800
 8004670:	00f42400 	.word	0x00f42400

08004674 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004674:	b480      	push	{r7}
 8004676:	b083      	sub	sp, #12
 8004678:	af00      	add	r7, sp, #0
 800467a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004680:	f003 0301 	and.w	r3, r3, #1
 8004684:	2b00      	cmp	r3, #0
 8004686:	d00a      	beq.n	800469e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	685b      	ldr	r3, [r3, #4]
 800468e:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	430a      	orrs	r2, r1
 800469c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046a2:	f003 0302 	and.w	r3, r3, #2
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d00a      	beq.n	80046c0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	685b      	ldr	r3, [r3, #4]
 80046b0:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	430a      	orrs	r2, r1
 80046be:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046c4:	f003 0304 	and.w	r3, r3, #4
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d00a      	beq.n	80046e2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	685b      	ldr	r3, [r3, #4]
 80046d2:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	430a      	orrs	r2, r1
 80046e0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046e6:	f003 0308 	and.w	r3, r3, #8
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d00a      	beq.n	8004704 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	685b      	ldr	r3, [r3, #4]
 80046f4:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	430a      	orrs	r2, r1
 8004702:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004708:	f003 0310 	and.w	r3, r3, #16
 800470c:	2b00      	cmp	r3, #0
 800470e:	d00a      	beq.n	8004726 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	689b      	ldr	r3, [r3, #8]
 8004716:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	430a      	orrs	r2, r1
 8004724:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800472a:	f003 0320 	and.w	r3, r3, #32
 800472e:	2b00      	cmp	r3, #0
 8004730:	d00a      	beq.n	8004748 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	689b      	ldr	r3, [r3, #8]
 8004738:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	430a      	orrs	r2, r1
 8004746:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800474c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004750:	2b00      	cmp	r3, #0
 8004752:	d01a      	beq.n	800478a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	685b      	ldr	r3, [r3, #4]
 800475a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	430a      	orrs	r2, r1
 8004768:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800476e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004772:	d10a      	bne.n	800478a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	685b      	ldr	r3, [r3, #4]
 800477a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	430a      	orrs	r2, r1
 8004788:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800478e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004792:	2b00      	cmp	r3, #0
 8004794:	d00a      	beq.n	80047ac <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	685b      	ldr	r3, [r3, #4]
 800479c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	430a      	orrs	r2, r1
 80047aa:	605a      	str	r2, [r3, #4]
  }
}
 80047ac:	bf00      	nop
 80047ae:	370c      	adds	r7, #12
 80047b0:	46bd      	mov	sp, r7
 80047b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b6:	4770      	bx	lr

080047b8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80047b8:	b580      	push	{r7, lr}
 80047ba:	b086      	sub	sp, #24
 80047bc:	af02      	add	r7, sp, #8
 80047be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	2200      	movs	r2, #0
 80047c4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80047c8:	f7fc ff9a 	bl	8001700 <HAL_GetTick>
 80047cc:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	f003 0308 	and.w	r3, r3, #8
 80047d8:	2b08      	cmp	r3, #8
 80047da:	d10e      	bne.n	80047fa <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80047dc:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80047e0:	9300      	str	r3, [sp, #0]
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	2200      	movs	r2, #0
 80047e6:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80047ea:	6878      	ldr	r0, [r7, #4]
 80047ec:	f000 f831 	bl	8004852 <UART_WaitOnFlagUntilTimeout>
 80047f0:	4603      	mov	r3, r0
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d001      	beq.n	80047fa <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80047f6:	2303      	movs	r3, #3
 80047f8:	e027      	b.n	800484a <UART_CheckIdleState+0x92>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	f003 0304 	and.w	r3, r3, #4
 8004804:	2b04      	cmp	r3, #4
 8004806:	d10e      	bne.n	8004826 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004808:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800480c:	9300      	str	r3, [sp, #0]
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	2200      	movs	r2, #0
 8004812:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8004816:	6878      	ldr	r0, [r7, #4]
 8004818:	f000 f81b 	bl	8004852 <UART_WaitOnFlagUntilTimeout>
 800481c:	4603      	mov	r3, r0
 800481e:	2b00      	cmp	r3, #0
 8004820:	d001      	beq.n	8004826 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004822:	2303      	movs	r3, #3
 8004824:	e011      	b.n	800484a <UART_CheckIdleState+0x92>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	2220      	movs	r2, #32
 800482a:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	2220      	movs	r2, #32
 8004830:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	2200      	movs	r2, #0
 8004838:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	2200      	movs	r2, #0
 800483e:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	2200      	movs	r2, #0
 8004844:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8004848:	2300      	movs	r3, #0
}
 800484a:	4618      	mov	r0, r3
 800484c:	3710      	adds	r7, #16
 800484e:	46bd      	mov	sp, r7
 8004850:	bd80      	pop	{r7, pc}

08004852 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004852:	b580      	push	{r7, lr}
 8004854:	b09c      	sub	sp, #112	@ 0x70
 8004856:	af00      	add	r7, sp, #0
 8004858:	60f8      	str	r0, [r7, #12]
 800485a:	60b9      	str	r1, [r7, #8]
 800485c:	603b      	str	r3, [r7, #0]
 800485e:	4613      	mov	r3, r2
 8004860:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004862:	e0a7      	b.n	80049b4 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004864:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004866:	f1b3 3fff 	cmp.w	r3, #4294967295
 800486a:	f000 80a3 	beq.w	80049b4 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800486e:	f7fc ff47 	bl	8001700 <HAL_GetTick>
 8004872:	4602      	mov	r2, r0
 8004874:	683b      	ldr	r3, [r7, #0]
 8004876:	1ad3      	subs	r3, r2, r3
 8004878:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 800487a:	429a      	cmp	r2, r3
 800487c:	d302      	bcc.n	8004884 <UART_WaitOnFlagUntilTimeout+0x32>
 800487e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004880:	2b00      	cmp	r3, #0
 8004882:	d13f      	bne.n	8004904 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	653b      	str	r3, [r7, #80]	@ 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800488a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800488c:	e853 3f00 	ldrex	r3, [r3]
 8004890:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8004892:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004894:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 8004898:	667b      	str	r3, [r7, #100]	@ 0x64
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	461a      	mov	r2, r3
 80048a0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80048a2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80048a4:	65ba      	str	r2, [r7, #88]	@ 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048a6:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 80048a8:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80048aa:	e841 2300 	strex	r3, r2, [r1]
 80048ae:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 80048b0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d1e6      	bne.n	8004884 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	3308      	adds	r3, #8
 80048bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048be:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80048c0:	e853 3f00 	ldrex	r3, [r3]
 80048c4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80048c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80048c8:	f023 0301 	bic.w	r3, r3, #1
 80048cc:	663b      	str	r3, [r7, #96]	@ 0x60
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	3308      	adds	r3, #8
 80048d4:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80048d6:	64ba      	str	r2, [r7, #72]	@ 0x48
 80048d8:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048da:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80048dc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80048de:	e841 2300 	strex	r3, r2, [r1]
 80048e2:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 80048e4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d1e5      	bne.n	80048b6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	2220      	movs	r2, #32
 80048ee:	67da      	str	r2, [r3, #124]	@ 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	2220      	movs	r2, #32
 80048f4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

        __HAL_UNLOCK(huart);
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	2200      	movs	r2, #0
 80048fc:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

        return HAL_TIMEOUT;
 8004900:	2303      	movs	r3, #3
 8004902:	e068      	b.n	80049d6 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	f003 0304 	and.w	r3, r3, #4
 800490e:	2b00      	cmp	r3, #0
 8004910:	d050      	beq.n	80049b4 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	69db      	ldr	r3, [r3, #28]
 8004918:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800491c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004920:	d148      	bne.n	80049b4 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800492a:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004932:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004934:	e853 3f00 	ldrex	r3, [r3]
 8004938:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800493a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800493c:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 8004940:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	461a      	mov	r2, r3
 8004948:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800494a:	637b      	str	r3, [r7, #52]	@ 0x34
 800494c:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800494e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8004950:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004952:	e841 2300 	strex	r3, r2, [r1]
 8004956:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8004958:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800495a:	2b00      	cmp	r3, #0
 800495c:	d1e6      	bne.n	800492c <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	3308      	adds	r3, #8
 8004964:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004966:	697b      	ldr	r3, [r7, #20]
 8004968:	e853 3f00 	ldrex	r3, [r3]
 800496c:	613b      	str	r3, [r7, #16]
   return(result);
 800496e:	693b      	ldr	r3, [r7, #16]
 8004970:	f023 0301 	bic.w	r3, r3, #1
 8004974:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	3308      	adds	r3, #8
 800497c:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800497e:	623a      	str	r2, [r7, #32]
 8004980:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004982:	69f9      	ldr	r1, [r7, #28]
 8004984:	6a3a      	ldr	r2, [r7, #32]
 8004986:	e841 2300 	strex	r3, r2, [r1]
 800498a:	61bb      	str	r3, [r7, #24]
   return(result);
 800498c:	69bb      	ldr	r3, [r7, #24]
 800498e:	2b00      	cmp	r3, #0
 8004990:	d1e5      	bne.n	800495e <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	2220      	movs	r2, #32
 8004996:	67da      	str	r2, [r3, #124]	@ 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	2220      	movs	r2, #32
 800499c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	2220      	movs	r2, #32
 80049a4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	2200      	movs	r2, #0
 80049ac:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 80049b0:	2303      	movs	r3, #3
 80049b2:	e010      	b.n	80049d6 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	69da      	ldr	r2, [r3, #28]
 80049ba:	68bb      	ldr	r3, [r7, #8]
 80049bc:	4013      	ands	r3, r2
 80049be:	68ba      	ldr	r2, [r7, #8]
 80049c0:	429a      	cmp	r2, r3
 80049c2:	bf0c      	ite	eq
 80049c4:	2301      	moveq	r3, #1
 80049c6:	2300      	movne	r3, #0
 80049c8:	b2db      	uxtb	r3, r3
 80049ca:	461a      	mov	r2, r3
 80049cc:	79fb      	ldrb	r3, [r7, #7]
 80049ce:	429a      	cmp	r2, r3
 80049d0:	f43f af48 	beq.w	8004864 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80049d4:	2300      	movs	r3, #0
}
 80049d6:	4618      	mov	r0, r3
 80049d8:	3770      	adds	r7, #112	@ 0x70
 80049da:	46bd      	mov	sp, r7
 80049dc:	bd80      	pop	{r7, pc}

080049de <_vsniprintf_r>:
 80049de:	b530      	push	{r4, r5, lr}
 80049e0:	4614      	mov	r4, r2
 80049e2:	2c00      	cmp	r4, #0
 80049e4:	b09b      	sub	sp, #108	@ 0x6c
 80049e6:	4605      	mov	r5, r0
 80049e8:	461a      	mov	r2, r3
 80049ea:	da05      	bge.n	80049f8 <_vsniprintf_r+0x1a>
 80049ec:	238b      	movs	r3, #139	@ 0x8b
 80049ee:	6003      	str	r3, [r0, #0]
 80049f0:	f04f 30ff 	mov.w	r0, #4294967295
 80049f4:	b01b      	add	sp, #108	@ 0x6c
 80049f6:	bd30      	pop	{r4, r5, pc}
 80049f8:	f44f 7302 	mov.w	r3, #520	@ 0x208
 80049fc:	f8ad 300c 	strh.w	r3, [sp, #12]
 8004a00:	f04f 0300 	mov.w	r3, #0
 8004a04:	9319      	str	r3, [sp, #100]	@ 0x64
 8004a06:	bf14      	ite	ne
 8004a08:	f104 33ff 	addne.w	r3, r4, #4294967295
 8004a0c:	4623      	moveq	r3, r4
 8004a0e:	9302      	str	r3, [sp, #8]
 8004a10:	9305      	str	r3, [sp, #20]
 8004a12:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8004a16:	9100      	str	r1, [sp, #0]
 8004a18:	9104      	str	r1, [sp, #16]
 8004a1a:	f8ad 300e 	strh.w	r3, [sp, #14]
 8004a1e:	4669      	mov	r1, sp
 8004a20:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8004a22:	f000 f9a1 	bl	8004d68 <_svfiprintf_r>
 8004a26:	1c43      	adds	r3, r0, #1
 8004a28:	bfbc      	itt	lt
 8004a2a:	238b      	movlt	r3, #139	@ 0x8b
 8004a2c:	602b      	strlt	r3, [r5, #0]
 8004a2e:	2c00      	cmp	r4, #0
 8004a30:	d0e0      	beq.n	80049f4 <_vsniprintf_r+0x16>
 8004a32:	9b00      	ldr	r3, [sp, #0]
 8004a34:	2200      	movs	r2, #0
 8004a36:	701a      	strb	r2, [r3, #0]
 8004a38:	e7dc      	b.n	80049f4 <_vsniprintf_r+0x16>
	...

08004a3c <vsniprintf>:
 8004a3c:	b507      	push	{r0, r1, r2, lr}
 8004a3e:	9300      	str	r3, [sp, #0]
 8004a40:	4613      	mov	r3, r2
 8004a42:	460a      	mov	r2, r1
 8004a44:	4601      	mov	r1, r0
 8004a46:	4803      	ldr	r0, [pc, #12]	@ (8004a54 <vsniprintf+0x18>)
 8004a48:	6800      	ldr	r0, [r0, #0]
 8004a4a:	f7ff ffc8 	bl	80049de <_vsniprintf_r>
 8004a4e:	b003      	add	sp, #12
 8004a50:	f85d fb04 	ldr.w	pc, [sp], #4
 8004a54:	20000020 	.word	0x20000020

08004a58 <memset>:
 8004a58:	4402      	add	r2, r0
 8004a5a:	4603      	mov	r3, r0
 8004a5c:	4293      	cmp	r3, r2
 8004a5e:	d100      	bne.n	8004a62 <memset+0xa>
 8004a60:	4770      	bx	lr
 8004a62:	f803 1b01 	strb.w	r1, [r3], #1
 8004a66:	e7f9      	b.n	8004a5c <memset+0x4>

08004a68 <__errno>:
 8004a68:	4b01      	ldr	r3, [pc, #4]	@ (8004a70 <__errno+0x8>)
 8004a6a:	6818      	ldr	r0, [r3, #0]
 8004a6c:	4770      	bx	lr
 8004a6e:	bf00      	nop
 8004a70:	20000020 	.word	0x20000020

08004a74 <__libc_init_array>:
 8004a74:	b570      	push	{r4, r5, r6, lr}
 8004a76:	4d0d      	ldr	r5, [pc, #52]	@ (8004aac <__libc_init_array+0x38>)
 8004a78:	4c0d      	ldr	r4, [pc, #52]	@ (8004ab0 <__libc_init_array+0x3c>)
 8004a7a:	1b64      	subs	r4, r4, r5
 8004a7c:	10a4      	asrs	r4, r4, #2
 8004a7e:	2600      	movs	r6, #0
 8004a80:	42a6      	cmp	r6, r4
 8004a82:	d109      	bne.n	8004a98 <__libc_init_array+0x24>
 8004a84:	4d0b      	ldr	r5, [pc, #44]	@ (8004ab4 <__libc_init_array+0x40>)
 8004a86:	4c0c      	ldr	r4, [pc, #48]	@ (8004ab8 <__libc_init_array+0x44>)
 8004a88:	f000 fc64 	bl	8005354 <_init>
 8004a8c:	1b64      	subs	r4, r4, r5
 8004a8e:	10a4      	asrs	r4, r4, #2
 8004a90:	2600      	movs	r6, #0
 8004a92:	42a6      	cmp	r6, r4
 8004a94:	d105      	bne.n	8004aa2 <__libc_init_array+0x2e>
 8004a96:	bd70      	pop	{r4, r5, r6, pc}
 8004a98:	f855 3b04 	ldr.w	r3, [r5], #4
 8004a9c:	4798      	blx	r3
 8004a9e:	3601      	adds	r6, #1
 8004aa0:	e7ee      	b.n	8004a80 <__libc_init_array+0xc>
 8004aa2:	f855 3b04 	ldr.w	r3, [r5], #4
 8004aa6:	4798      	blx	r3
 8004aa8:	3601      	adds	r6, #1
 8004aaa:	e7f2      	b.n	8004a92 <__libc_init_array+0x1e>
 8004aac:	080054fc 	.word	0x080054fc
 8004ab0:	080054fc 	.word	0x080054fc
 8004ab4:	080054fc 	.word	0x080054fc
 8004ab8:	08005500 	.word	0x08005500

08004abc <__retarget_lock_acquire_recursive>:
 8004abc:	4770      	bx	lr

08004abe <__retarget_lock_release_recursive>:
 8004abe:	4770      	bx	lr

08004ac0 <_free_r>:
 8004ac0:	b538      	push	{r3, r4, r5, lr}
 8004ac2:	4605      	mov	r5, r0
 8004ac4:	2900      	cmp	r1, #0
 8004ac6:	d041      	beq.n	8004b4c <_free_r+0x8c>
 8004ac8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004acc:	1f0c      	subs	r4, r1, #4
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	bfb8      	it	lt
 8004ad2:	18e4      	addlt	r4, r4, r3
 8004ad4:	f000 f8e0 	bl	8004c98 <__malloc_lock>
 8004ad8:	4a1d      	ldr	r2, [pc, #116]	@ (8004b50 <_free_r+0x90>)
 8004ada:	6813      	ldr	r3, [r2, #0]
 8004adc:	b933      	cbnz	r3, 8004aec <_free_r+0x2c>
 8004ade:	6063      	str	r3, [r4, #4]
 8004ae0:	6014      	str	r4, [r2, #0]
 8004ae2:	4628      	mov	r0, r5
 8004ae4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004ae8:	f000 b8dc 	b.w	8004ca4 <__malloc_unlock>
 8004aec:	42a3      	cmp	r3, r4
 8004aee:	d908      	bls.n	8004b02 <_free_r+0x42>
 8004af0:	6820      	ldr	r0, [r4, #0]
 8004af2:	1821      	adds	r1, r4, r0
 8004af4:	428b      	cmp	r3, r1
 8004af6:	bf01      	itttt	eq
 8004af8:	6819      	ldreq	r1, [r3, #0]
 8004afa:	685b      	ldreq	r3, [r3, #4]
 8004afc:	1809      	addeq	r1, r1, r0
 8004afe:	6021      	streq	r1, [r4, #0]
 8004b00:	e7ed      	b.n	8004ade <_free_r+0x1e>
 8004b02:	461a      	mov	r2, r3
 8004b04:	685b      	ldr	r3, [r3, #4]
 8004b06:	b10b      	cbz	r3, 8004b0c <_free_r+0x4c>
 8004b08:	42a3      	cmp	r3, r4
 8004b0a:	d9fa      	bls.n	8004b02 <_free_r+0x42>
 8004b0c:	6811      	ldr	r1, [r2, #0]
 8004b0e:	1850      	adds	r0, r2, r1
 8004b10:	42a0      	cmp	r0, r4
 8004b12:	d10b      	bne.n	8004b2c <_free_r+0x6c>
 8004b14:	6820      	ldr	r0, [r4, #0]
 8004b16:	4401      	add	r1, r0
 8004b18:	1850      	adds	r0, r2, r1
 8004b1a:	4283      	cmp	r3, r0
 8004b1c:	6011      	str	r1, [r2, #0]
 8004b1e:	d1e0      	bne.n	8004ae2 <_free_r+0x22>
 8004b20:	6818      	ldr	r0, [r3, #0]
 8004b22:	685b      	ldr	r3, [r3, #4]
 8004b24:	6053      	str	r3, [r2, #4]
 8004b26:	4408      	add	r0, r1
 8004b28:	6010      	str	r0, [r2, #0]
 8004b2a:	e7da      	b.n	8004ae2 <_free_r+0x22>
 8004b2c:	d902      	bls.n	8004b34 <_free_r+0x74>
 8004b2e:	230c      	movs	r3, #12
 8004b30:	602b      	str	r3, [r5, #0]
 8004b32:	e7d6      	b.n	8004ae2 <_free_r+0x22>
 8004b34:	6820      	ldr	r0, [r4, #0]
 8004b36:	1821      	adds	r1, r4, r0
 8004b38:	428b      	cmp	r3, r1
 8004b3a:	bf04      	itt	eq
 8004b3c:	6819      	ldreq	r1, [r3, #0]
 8004b3e:	685b      	ldreq	r3, [r3, #4]
 8004b40:	6063      	str	r3, [r4, #4]
 8004b42:	bf04      	itt	eq
 8004b44:	1809      	addeq	r1, r1, r0
 8004b46:	6021      	streq	r1, [r4, #0]
 8004b48:	6054      	str	r4, [r2, #4]
 8004b4a:	e7ca      	b.n	8004ae2 <_free_r+0x22>
 8004b4c:	bd38      	pop	{r3, r4, r5, pc}
 8004b4e:	bf00      	nop
 8004b50:	20000340 	.word	0x20000340

08004b54 <sbrk_aligned>:
 8004b54:	b570      	push	{r4, r5, r6, lr}
 8004b56:	4e0f      	ldr	r6, [pc, #60]	@ (8004b94 <sbrk_aligned+0x40>)
 8004b58:	460c      	mov	r4, r1
 8004b5a:	6831      	ldr	r1, [r6, #0]
 8004b5c:	4605      	mov	r5, r0
 8004b5e:	b911      	cbnz	r1, 8004b66 <sbrk_aligned+0x12>
 8004b60:	f000 fba4 	bl	80052ac <_sbrk_r>
 8004b64:	6030      	str	r0, [r6, #0]
 8004b66:	4621      	mov	r1, r4
 8004b68:	4628      	mov	r0, r5
 8004b6a:	f000 fb9f 	bl	80052ac <_sbrk_r>
 8004b6e:	1c43      	adds	r3, r0, #1
 8004b70:	d103      	bne.n	8004b7a <sbrk_aligned+0x26>
 8004b72:	f04f 34ff 	mov.w	r4, #4294967295
 8004b76:	4620      	mov	r0, r4
 8004b78:	bd70      	pop	{r4, r5, r6, pc}
 8004b7a:	1cc4      	adds	r4, r0, #3
 8004b7c:	f024 0403 	bic.w	r4, r4, #3
 8004b80:	42a0      	cmp	r0, r4
 8004b82:	d0f8      	beq.n	8004b76 <sbrk_aligned+0x22>
 8004b84:	1a21      	subs	r1, r4, r0
 8004b86:	4628      	mov	r0, r5
 8004b88:	f000 fb90 	bl	80052ac <_sbrk_r>
 8004b8c:	3001      	adds	r0, #1
 8004b8e:	d1f2      	bne.n	8004b76 <sbrk_aligned+0x22>
 8004b90:	e7ef      	b.n	8004b72 <sbrk_aligned+0x1e>
 8004b92:	bf00      	nop
 8004b94:	2000033c 	.word	0x2000033c

08004b98 <_malloc_r>:
 8004b98:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004b9c:	1ccd      	adds	r5, r1, #3
 8004b9e:	f025 0503 	bic.w	r5, r5, #3
 8004ba2:	3508      	adds	r5, #8
 8004ba4:	2d0c      	cmp	r5, #12
 8004ba6:	bf38      	it	cc
 8004ba8:	250c      	movcc	r5, #12
 8004baa:	2d00      	cmp	r5, #0
 8004bac:	4606      	mov	r6, r0
 8004bae:	db01      	blt.n	8004bb4 <_malloc_r+0x1c>
 8004bb0:	42a9      	cmp	r1, r5
 8004bb2:	d904      	bls.n	8004bbe <_malloc_r+0x26>
 8004bb4:	230c      	movs	r3, #12
 8004bb6:	6033      	str	r3, [r6, #0]
 8004bb8:	2000      	movs	r0, #0
 8004bba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004bbe:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004c94 <_malloc_r+0xfc>
 8004bc2:	f000 f869 	bl	8004c98 <__malloc_lock>
 8004bc6:	f8d8 3000 	ldr.w	r3, [r8]
 8004bca:	461c      	mov	r4, r3
 8004bcc:	bb44      	cbnz	r4, 8004c20 <_malloc_r+0x88>
 8004bce:	4629      	mov	r1, r5
 8004bd0:	4630      	mov	r0, r6
 8004bd2:	f7ff ffbf 	bl	8004b54 <sbrk_aligned>
 8004bd6:	1c43      	adds	r3, r0, #1
 8004bd8:	4604      	mov	r4, r0
 8004bda:	d158      	bne.n	8004c8e <_malloc_r+0xf6>
 8004bdc:	f8d8 4000 	ldr.w	r4, [r8]
 8004be0:	4627      	mov	r7, r4
 8004be2:	2f00      	cmp	r7, #0
 8004be4:	d143      	bne.n	8004c6e <_malloc_r+0xd6>
 8004be6:	2c00      	cmp	r4, #0
 8004be8:	d04b      	beq.n	8004c82 <_malloc_r+0xea>
 8004bea:	6823      	ldr	r3, [r4, #0]
 8004bec:	4639      	mov	r1, r7
 8004bee:	4630      	mov	r0, r6
 8004bf0:	eb04 0903 	add.w	r9, r4, r3
 8004bf4:	f000 fb5a 	bl	80052ac <_sbrk_r>
 8004bf8:	4581      	cmp	r9, r0
 8004bfa:	d142      	bne.n	8004c82 <_malloc_r+0xea>
 8004bfc:	6821      	ldr	r1, [r4, #0]
 8004bfe:	1a6d      	subs	r5, r5, r1
 8004c00:	4629      	mov	r1, r5
 8004c02:	4630      	mov	r0, r6
 8004c04:	f7ff ffa6 	bl	8004b54 <sbrk_aligned>
 8004c08:	3001      	adds	r0, #1
 8004c0a:	d03a      	beq.n	8004c82 <_malloc_r+0xea>
 8004c0c:	6823      	ldr	r3, [r4, #0]
 8004c0e:	442b      	add	r3, r5
 8004c10:	6023      	str	r3, [r4, #0]
 8004c12:	f8d8 3000 	ldr.w	r3, [r8]
 8004c16:	685a      	ldr	r2, [r3, #4]
 8004c18:	bb62      	cbnz	r2, 8004c74 <_malloc_r+0xdc>
 8004c1a:	f8c8 7000 	str.w	r7, [r8]
 8004c1e:	e00f      	b.n	8004c40 <_malloc_r+0xa8>
 8004c20:	6822      	ldr	r2, [r4, #0]
 8004c22:	1b52      	subs	r2, r2, r5
 8004c24:	d420      	bmi.n	8004c68 <_malloc_r+0xd0>
 8004c26:	2a0b      	cmp	r2, #11
 8004c28:	d917      	bls.n	8004c5a <_malloc_r+0xc2>
 8004c2a:	1961      	adds	r1, r4, r5
 8004c2c:	42a3      	cmp	r3, r4
 8004c2e:	6025      	str	r5, [r4, #0]
 8004c30:	bf18      	it	ne
 8004c32:	6059      	strne	r1, [r3, #4]
 8004c34:	6863      	ldr	r3, [r4, #4]
 8004c36:	bf08      	it	eq
 8004c38:	f8c8 1000 	streq.w	r1, [r8]
 8004c3c:	5162      	str	r2, [r4, r5]
 8004c3e:	604b      	str	r3, [r1, #4]
 8004c40:	4630      	mov	r0, r6
 8004c42:	f000 f82f 	bl	8004ca4 <__malloc_unlock>
 8004c46:	f104 000b 	add.w	r0, r4, #11
 8004c4a:	1d23      	adds	r3, r4, #4
 8004c4c:	f020 0007 	bic.w	r0, r0, #7
 8004c50:	1ac2      	subs	r2, r0, r3
 8004c52:	bf1c      	itt	ne
 8004c54:	1a1b      	subne	r3, r3, r0
 8004c56:	50a3      	strne	r3, [r4, r2]
 8004c58:	e7af      	b.n	8004bba <_malloc_r+0x22>
 8004c5a:	6862      	ldr	r2, [r4, #4]
 8004c5c:	42a3      	cmp	r3, r4
 8004c5e:	bf0c      	ite	eq
 8004c60:	f8c8 2000 	streq.w	r2, [r8]
 8004c64:	605a      	strne	r2, [r3, #4]
 8004c66:	e7eb      	b.n	8004c40 <_malloc_r+0xa8>
 8004c68:	4623      	mov	r3, r4
 8004c6a:	6864      	ldr	r4, [r4, #4]
 8004c6c:	e7ae      	b.n	8004bcc <_malloc_r+0x34>
 8004c6e:	463c      	mov	r4, r7
 8004c70:	687f      	ldr	r7, [r7, #4]
 8004c72:	e7b6      	b.n	8004be2 <_malloc_r+0x4a>
 8004c74:	461a      	mov	r2, r3
 8004c76:	685b      	ldr	r3, [r3, #4]
 8004c78:	42a3      	cmp	r3, r4
 8004c7a:	d1fb      	bne.n	8004c74 <_malloc_r+0xdc>
 8004c7c:	2300      	movs	r3, #0
 8004c7e:	6053      	str	r3, [r2, #4]
 8004c80:	e7de      	b.n	8004c40 <_malloc_r+0xa8>
 8004c82:	230c      	movs	r3, #12
 8004c84:	6033      	str	r3, [r6, #0]
 8004c86:	4630      	mov	r0, r6
 8004c88:	f000 f80c 	bl	8004ca4 <__malloc_unlock>
 8004c8c:	e794      	b.n	8004bb8 <_malloc_r+0x20>
 8004c8e:	6005      	str	r5, [r0, #0]
 8004c90:	e7d6      	b.n	8004c40 <_malloc_r+0xa8>
 8004c92:	bf00      	nop
 8004c94:	20000340 	.word	0x20000340

08004c98 <__malloc_lock>:
 8004c98:	4801      	ldr	r0, [pc, #4]	@ (8004ca0 <__malloc_lock+0x8>)
 8004c9a:	f7ff bf0f 	b.w	8004abc <__retarget_lock_acquire_recursive>
 8004c9e:	bf00      	nop
 8004ca0:	20000338 	.word	0x20000338

08004ca4 <__malloc_unlock>:
 8004ca4:	4801      	ldr	r0, [pc, #4]	@ (8004cac <__malloc_unlock+0x8>)
 8004ca6:	f7ff bf0a 	b.w	8004abe <__retarget_lock_release_recursive>
 8004caa:	bf00      	nop
 8004cac:	20000338 	.word	0x20000338

08004cb0 <__ssputs_r>:
 8004cb0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004cb4:	688e      	ldr	r6, [r1, #8]
 8004cb6:	461f      	mov	r7, r3
 8004cb8:	42be      	cmp	r6, r7
 8004cba:	680b      	ldr	r3, [r1, #0]
 8004cbc:	4682      	mov	sl, r0
 8004cbe:	460c      	mov	r4, r1
 8004cc0:	4690      	mov	r8, r2
 8004cc2:	d82d      	bhi.n	8004d20 <__ssputs_r+0x70>
 8004cc4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8004cc8:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8004ccc:	d026      	beq.n	8004d1c <__ssputs_r+0x6c>
 8004cce:	6965      	ldr	r5, [r4, #20]
 8004cd0:	6909      	ldr	r1, [r1, #16]
 8004cd2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004cd6:	eba3 0901 	sub.w	r9, r3, r1
 8004cda:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004cde:	1c7b      	adds	r3, r7, #1
 8004ce0:	444b      	add	r3, r9
 8004ce2:	106d      	asrs	r5, r5, #1
 8004ce4:	429d      	cmp	r5, r3
 8004ce6:	bf38      	it	cc
 8004ce8:	461d      	movcc	r5, r3
 8004cea:	0553      	lsls	r3, r2, #21
 8004cec:	d527      	bpl.n	8004d3e <__ssputs_r+0x8e>
 8004cee:	4629      	mov	r1, r5
 8004cf0:	f7ff ff52 	bl	8004b98 <_malloc_r>
 8004cf4:	4606      	mov	r6, r0
 8004cf6:	b360      	cbz	r0, 8004d52 <__ssputs_r+0xa2>
 8004cf8:	6921      	ldr	r1, [r4, #16]
 8004cfa:	464a      	mov	r2, r9
 8004cfc:	f000 fae6 	bl	80052cc <memcpy>
 8004d00:	89a3      	ldrh	r3, [r4, #12]
 8004d02:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8004d06:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004d0a:	81a3      	strh	r3, [r4, #12]
 8004d0c:	6126      	str	r6, [r4, #16]
 8004d0e:	6165      	str	r5, [r4, #20]
 8004d10:	444e      	add	r6, r9
 8004d12:	eba5 0509 	sub.w	r5, r5, r9
 8004d16:	6026      	str	r6, [r4, #0]
 8004d18:	60a5      	str	r5, [r4, #8]
 8004d1a:	463e      	mov	r6, r7
 8004d1c:	42be      	cmp	r6, r7
 8004d1e:	d900      	bls.n	8004d22 <__ssputs_r+0x72>
 8004d20:	463e      	mov	r6, r7
 8004d22:	6820      	ldr	r0, [r4, #0]
 8004d24:	4632      	mov	r2, r6
 8004d26:	4641      	mov	r1, r8
 8004d28:	f000 faa6 	bl	8005278 <memmove>
 8004d2c:	68a3      	ldr	r3, [r4, #8]
 8004d2e:	1b9b      	subs	r3, r3, r6
 8004d30:	60a3      	str	r3, [r4, #8]
 8004d32:	6823      	ldr	r3, [r4, #0]
 8004d34:	4433      	add	r3, r6
 8004d36:	6023      	str	r3, [r4, #0]
 8004d38:	2000      	movs	r0, #0
 8004d3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004d3e:	462a      	mov	r2, r5
 8004d40:	f000 fad2 	bl	80052e8 <_realloc_r>
 8004d44:	4606      	mov	r6, r0
 8004d46:	2800      	cmp	r0, #0
 8004d48:	d1e0      	bne.n	8004d0c <__ssputs_r+0x5c>
 8004d4a:	6921      	ldr	r1, [r4, #16]
 8004d4c:	4650      	mov	r0, sl
 8004d4e:	f7ff feb7 	bl	8004ac0 <_free_r>
 8004d52:	230c      	movs	r3, #12
 8004d54:	f8ca 3000 	str.w	r3, [sl]
 8004d58:	89a3      	ldrh	r3, [r4, #12]
 8004d5a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004d5e:	81a3      	strh	r3, [r4, #12]
 8004d60:	f04f 30ff 	mov.w	r0, #4294967295
 8004d64:	e7e9      	b.n	8004d3a <__ssputs_r+0x8a>
	...

08004d68 <_svfiprintf_r>:
 8004d68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004d6c:	4698      	mov	r8, r3
 8004d6e:	898b      	ldrh	r3, [r1, #12]
 8004d70:	061b      	lsls	r3, r3, #24
 8004d72:	b09d      	sub	sp, #116	@ 0x74
 8004d74:	4607      	mov	r7, r0
 8004d76:	460d      	mov	r5, r1
 8004d78:	4614      	mov	r4, r2
 8004d7a:	d510      	bpl.n	8004d9e <_svfiprintf_r+0x36>
 8004d7c:	690b      	ldr	r3, [r1, #16]
 8004d7e:	b973      	cbnz	r3, 8004d9e <_svfiprintf_r+0x36>
 8004d80:	2140      	movs	r1, #64	@ 0x40
 8004d82:	f7ff ff09 	bl	8004b98 <_malloc_r>
 8004d86:	6028      	str	r0, [r5, #0]
 8004d88:	6128      	str	r0, [r5, #16]
 8004d8a:	b930      	cbnz	r0, 8004d9a <_svfiprintf_r+0x32>
 8004d8c:	230c      	movs	r3, #12
 8004d8e:	603b      	str	r3, [r7, #0]
 8004d90:	f04f 30ff 	mov.w	r0, #4294967295
 8004d94:	b01d      	add	sp, #116	@ 0x74
 8004d96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004d9a:	2340      	movs	r3, #64	@ 0x40
 8004d9c:	616b      	str	r3, [r5, #20]
 8004d9e:	2300      	movs	r3, #0
 8004da0:	9309      	str	r3, [sp, #36]	@ 0x24
 8004da2:	2320      	movs	r3, #32
 8004da4:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8004da8:	f8cd 800c 	str.w	r8, [sp, #12]
 8004dac:	2330      	movs	r3, #48	@ 0x30
 8004dae:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8004f4c <_svfiprintf_r+0x1e4>
 8004db2:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8004db6:	f04f 0901 	mov.w	r9, #1
 8004dba:	4623      	mov	r3, r4
 8004dbc:	469a      	mov	sl, r3
 8004dbe:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004dc2:	b10a      	cbz	r2, 8004dc8 <_svfiprintf_r+0x60>
 8004dc4:	2a25      	cmp	r2, #37	@ 0x25
 8004dc6:	d1f9      	bne.n	8004dbc <_svfiprintf_r+0x54>
 8004dc8:	ebba 0b04 	subs.w	fp, sl, r4
 8004dcc:	d00b      	beq.n	8004de6 <_svfiprintf_r+0x7e>
 8004dce:	465b      	mov	r3, fp
 8004dd0:	4622      	mov	r2, r4
 8004dd2:	4629      	mov	r1, r5
 8004dd4:	4638      	mov	r0, r7
 8004dd6:	f7ff ff6b 	bl	8004cb0 <__ssputs_r>
 8004dda:	3001      	adds	r0, #1
 8004ddc:	f000 80a7 	beq.w	8004f2e <_svfiprintf_r+0x1c6>
 8004de0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004de2:	445a      	add	r2, fp
 8004de4:	9209      	str	r2, [sp, #36]	@ 0x24
 8004de6:	f89a 3000 	ldrb.w	r3, [sl]
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	f000 809f 	beq.w	8004f2e <_svfiprintf_r+0x1c6>
 8004df0:	2300      	movs	r3, #0
 8004df2:	f04f 32ff 	mov.w	r2, #4294967295
 8004df6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004dfa:	f10a 0a01 	add.w	sl, sl, #1
 8004dfe:	9304      	str	r3, [sp, #16]
 8004e00:	9307      	str	r3, [sp, #28]
 8004e02:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8004e06:	931a      	str	r3, [sp, #104]	@ 0x68
 8004e08:	4654      	mov	r4, sl
 8004e0a:	2205      	movs	r2, #5
 8004e0c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004e10:	484e      	ldr	r0, [pc, #312]	@ (8004f4c <_svfiprintf_r+0x1e4>)
 8004e12:	f7fb fa1d 	bl	8000250 <memchr>
 8004e16:	9a04      	ldr	r2, [sp, #16]
 8004e18:	b9d8      	cbnz	r0, 8004e52 <_svfiprintf_r+0xea>
 8004e1a:	06d0      	lsls	r0, r2, #27
 8004e1c:	bf44      	itt	mi
 8004e1e:	2320      	movmi	r3, #32
 8004e20:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004e24:	0711      	lsls	r1, r2, #28
 8004e26:	bf44      	itt	mi
 8004e28:	232b      	movmi	r3, #43	@ 0x2b
 8004e2a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004e2e:	f89a 3000 	ldrb.w	r3, [sl]
 8004e32:	2b2a      	cmp	r3, #42	@ 0x2a
 8004e34:	d015      	beq.n	8004e62 <_svfiprintf_r+0xfa>
 8004e36:	9a07      	ldr	r2, [sp, #28]
 8004e38:	4654      	mov	r4, sl
 8004e3a:	2000      	movs	r0, #0
 8004e3c:	f04f 0c0a 	mov.w	ip, #10
 8004e40:	4621      	mov	r1, r4
 8004e42:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004e46:	3b30      	subs	r3, #48	@ 0x30
 8004e48:	2b09      	cmp	r3, #9
 8004e4a:	d94b      	bls.n	8004ee4 <_svfiprintf_r+0x17c>
 8004e4c:	b1b0      	cbz	r0, 8004e7c <_svfiprintf_r+0x114>
 8004e4e:	9207      	str	r2, [sp, #28]
 8004e50:	e014      	b.n	8004e7c <_svfiprintf_r+0x114>
 8004e52:	eba0 0308 	sub.w	r3, r0, r8
 8004e56:	fa09 f303 	lsl.w	r3, r9, r3
 8004e5a:	4313      	orrs	r3, r2
 8004e5c:	9304      	str	r3, [sp, #16]
 8004e5e:	46a2      	mov	sl, r4
 8004e60:	e7d2      	b.n	8004e08 <_svfiprintf_r+0xa0>
 8004e62:	9b03      	ldr	r3, [sp, #12]
 8004e64:	1d19      	adds	r1, r3, #4
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	9103      	str	r1, [sp, #12]
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	bfbb      	ittet	lt
 8004e6e:	425b      	neglt	r3, r3
 8004e70:	f042 0202 	orrlt.w	r2, r2, #2
 8004e74:	9307      	strge	r3, [sp, #28]
 8004e76:	9307      	strlt	r3, [sp, #28]
 8004e78:	bfb8      	it	lt
 8004e7a:	9204      	strlt	r2, [sp, #16]
 8004e7c:	7823      	ldrb	r3, [r4, #0]
 8004e7e:	2b2e      	cmp	r3, #46	@ 0x2e
 8004e80:	d10a      	bne.n	8004e98 <_svfiprintf_r+0x130>
 8004e82:	7863      	ldrb	r3, [r4, #1]
 8004e84:	2b2a      	cmp	r3, #42	@ 0x2a
 8004e86:	d132      	bne.n	8004eee <_svfiprintf_r+0x186>
 8004e88:	9b03      	ldr	r3, [sp, #12]
 8004e8a:	1d1a      	adds	r2, r3, #4
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	9203      	str	r2, [sp, #12]
 8004e90:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8004e94:	3402      	adds	r4, #2
 8004e96:	9305      	str	r3, [sp, #20]
 8004e98:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8004f5c <_svfiprintf_r+0x1f4>
 8004e9c:	7821      	ldrb	r1, [r4, #0]
 8004e9e:	2203      	movs	r2, #3
 8004ea0:	4650      	mov	r0, sl
 8004ea2:	f7fb f9d5 	bl	8000250 <memchr>
 8004ea6:	b138      	cbz	r0, 8004eb8 <_svfiprintf_r+0x150>
 8004ea8:	9b04      	ldr	r3, [sp, #16]
 8004eaa:	eba0 000a 	sub.w	r0, r0, sl
 8004eae:	2240      	movs	r2, #64	@ 0x40
 8004eb0:	4082      	lsls	r2, r0
 8004eb2:	4313      	orrs	r3, r2
 8004eb4:	3401      	adds	r4, #1
 8004eb6:	9304      	str	r3, [sp, #16]
 8004eb8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004ebc:	4824      	ldr	r0, [pc, #144]	@ (8004f50 <_svfiprintf_r+0x1e8>)
 8004ebe:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8004ec2:	2206      	movs	r2, #6
 8004ec4:	f7fb f9c4 	bl	8000250 <memchr>
 8004ec8:	2800      	cmp	r0, #0
 8004eca:	d036      	beq.n	8004f3a <_svfiprintf_r+0x1d2>
 8004ecc:	4b21      	ldr	r3, [pc, #132]	@ (8004f54 <_svfiprintf_r+0x1ec>)
 8004ece:	bb1b      	cbnz	r3, 8004f18 <_svfiprintf_r+0x1b0>
 8004ed0:	9b03      	ldr	r3, [sp, #12]
 8004ed2:	3307      	adds	r3, #7
 8004ed4:	f023 0307 	bic.w	r3, r3, #7
 8004ed8:	3308      	adds	r3, #8
 8004eda:	9303      	str	r3, [sp, #12]
 8004edc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004ede:	4433      	add	r3, r6
 8004ee0:	9309      	str	r3, [sp, #36]	@ 0x24
 8004ee2:	e76a      	b.n	8004dba <_svfiprintf_r+0x52>
 8004ee4:	fb0c 3202 	mla	r2, ip, r2, r3
 8004ee8:	460c      	mov	r4, r1
 8004eea:	2001      	movs	r0, #1
 8004eec:	e7a8      	b.n	8004e40 <_svfiprintf_r+0xd8>
 8004eee:	2300      	movs	r3, #0
 8004ef0:	3401      	adds	r4, #1
 8004ef2:	9305      	str	r3, [sp, #20]
 8004ef4:	4619      	mov	r1, r3
 8004ef6:	f04f 0c0a 	mov.w	ip, #10
 8004efa:	4620      	mov	r0, r4
 8004efc:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004f00:	3a30      	subs	r2, #48	@ 0x30
 8004f02:	2a09      	cmp	r2, #9
 8004f04:	d903      	bls.n	8004f0e <_svfiprintf_r+0x1a6>
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d0c6      	beq.n	8004e98 <_svfiprintf_r+0x130>
 8004f0a:	9105      	str	r1, [sp, #20]
 8004f0c:	e7c4      	b.n	8004e98 <_svfiprintf_r+0x130>
 8004f0e:	fb0c 2101 	mla	r1, ip, r1, r2
 8004f12:	4604      	mov	r4, r0
 8004f14:	2301      	movs	r3, #1
 8004f16:	e7f0      	b.n	8004efa <_svfiprintf_r+0x192>
 8004f18:	ab03      	add	r3, sp, #12
 8004f1a:	9300      	str	r3, [sp, #0]
 8004f1c:	462a      	mov	r2, r5
 8004f1e:	4b0e      	ldr	r3, [pc, #56]	@ (8004f58 <_svfiprintf_r+0x1f0>)
 8004f20:	a904      	add	r1, sp, #16
 8004f22:	4638      	mov	r0, r7
 8004f24:	f3af 8000 	nop.w
 8004f28:	1c42      	adds	r2, r0, #1
 8004f2a:	4606      	mov	r6, r0
 8004f2c:	d1d6      	bne.n	8004edc <_svfiprintf_r+0x174>
 8004f2e:	89ab      	ldrh	r3, [r5, #12]
 8004f30:	065b      	lsls	r3, r3, #25
 8004f32:	f53f af2d 	bmi.w	8004d90 <_svfiprintf_r+0x28>
 8004f36:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004f38:	e72c      	b.n	8004d94 <_svfiprintf_r+0x2c>
 8004f3a:	ab03      	add	r3, sp, #12
 8004f3c:	9300      	str	r3, [sp, #0]
 8004f3e:	462a      	mov	r2, r5
 8004f40:	4b05      	ldr	r3, [pc, #20]	@ (8004f58 <_svfiprintf_r+0x1f0>)
 8004f42:	a904      	add	r1, sp, #16
 8004f44:	4638      	mov	r0, r7
 8004f46:	f000 f879 	bl	800503c <_printf_i>
 8004f4a:	e7ed      	b.n	8004f28 <_svfiprintf_r+0x1c0>
 8004f4c:	080054c0 	.word	0x080054c0
 8004f50:	080054ca 	.word	0x080054ca
 8004f54:	00000000 	.word	0x00000000
 8004f58:	08004cb1 	.word	0x08004cb1
 8004f5c:	080054c6 	.word	0x080054c6

08004f60 <_printf_common>:
 8004f60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004f64:	4616      	mov	r6, r2
 8004f66:	4698      	mov	r8, r3
 8004f68:	688a      	ldr	r2, [r1, #8]
 8004f6a:	690b      	ldr	r3, [r1, #16]
 8004f6c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004f70:	4293      	cmp	r3, r2
 8004f72:	bfb8      	it	lt
 8004f74:	4613      	movlt	r3, r2
 8004f76:	6033      	str	r3, [r6, #0]
 8004f78:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004f7c:	4607      	mov	r7, r0
 8004f7e:	460c      	mov	r4, r1
 8004f80:	b10a      	cbz	r2, 8004f86 <_printf_common+0x26>
 8004f82:	3301      	adds	r3, #1
 8004f84:	6033      	str	r3, [r6, #0]
 8004f86:	6823      	ldr	r3, [r4, #0]
 8004f88:	0699      	lsls	r1, r3, #26
 8004f8a:	bf42      	ittt	mi
 8004f8c:	6833      	ldrmi	r3, [r6, #0]
 8004f8e:	3302      	addmi	r3, #2
 8004f90:	6033      	strmi	r3, [r6, #0]
 8004f92:	6825      	ldr	r5, [r4, #0]
 8004f94:	f015 0506 	ands.w	r5, r5, #6
 8004f98:	d106      	bne.n	8004fa8 <_printf_common+0x48>
 8004f9a:	f104 0a19 	add.w	sl, r4, #25
 8004f9e:	68e3      	ldr	r3, [r4, #12]
 8004fa0:	6832      	ldr	r2, [r6, #0]
 8004fa2:	1a9b      	subs	r3, r3, r2
 8004fa4:	42ab      	cmp	r3, r5
 8004fa6:	dc26      	bgt.n	8004ff6 <_printf_common+0x96>
 8004fa8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004fac:	6822      	ldr	r2, [r4, #0]
 8004fae:	3b00      	subs	r3, #0
 8004fb0:	bf18      	it	ne
 8004fb2:	2301      	movne	r3, #1
 8004fb4:	0692      	lsls	r2, r2, #26
 8004fb6:	d42b      	bmi.n	8005010 <_printf_common+0xb0>
 8004fb8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004fbc:	4641      	mov	r1, r8
 8004fbe:	4638      	mov	r0, r7
 8004fc0:	47c8      	blx	r9
 8004fc2:	3001      	adds	r0, #1
 8004fc4:	d01e      	beq.n	8005004 <_printf_common+0xa4>
 8004fc6:	6823      	ldr	r3, [r4, #0]
 8004fc8:	6922      	ldr	r2, [r4, #16]
 8004fca:	f003 0306 	and.w	r3, r3, #6
 8004fce:	2b04      	cmp	r3, #4
 8004fd0:	bf02      	ittt	eq
 8004fd2:	68e5      	ldreq	r5, [r4, #12]
 8004fd4:	6833      	ldreq	r3, [r6, #0]
 8004fd6:	1aed      	subeq	r5, r5, r3
 8004fd8:	68a3      	ldr	r3, [r4, #8]
 8004fda:	bf0c      	ite	eq
 8004fdc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004fe0:	2500      	movne	r5, #0
 8004fe2:	4293      	cmp	r3, r2
 8004fe4:	bfc4      	itt	gt
 8004fe6:	1a9b      	subgt	r3, r3, r2
 8004fe8:	18ed      	addgt	r5, r5, r3
 8004fea:	2600      	movs	r6, #0
 8004fec:	341a      	adds	r4, #26
 8004fee:	42b5      	cmp	r5, r6
 8004ff0:	d11a      	bne.n	8005028 <_printf_common+0xc8>
 8004ff2:	2000      	movs	r0, #0
 8004ff4:	e008      	b.n	8005008 <_printf_common+0xa8>
 8004ff6:	2301      	movs	r3, #1
 8004ff8:	4652      	mov	r2, sl
 8004ffa:	4641      	mov	r1, r8
 8004ffc:	4638      	mov	r0, r7
 8004ffe:	47c8      	blx	r9
 8005000:	3001      	adds	r0, #1
 8005002:	d103      	bne.n	800500c <_printf_common+0xac>
 8005004:	f04f 30ff 	mov.w	r0, #4294967295
 8005008:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800500c:	3501      	adds	r5, #1
 800500e:	e7c6      	b.n	8004f9e <_printf_common+0x3e>
 8005010:	18e1      	adds	r1, r4, r3
 8005012:	1c5a      	adds	r2, r3, #1
 8005014:	2030      	movs	r0, #48	@ 0x30
 8005016:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800501a:	4422      	add	r2, r4
 800501c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005020:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005024:	3302      	adds	r3, #2
 8005026:	e7c7      	b.n	8004fb8 <_printf_common+0x58>
 8005028:	2301      	movs	r3, #1
 800502a:	4622      	mov	r2, r4
 800502c:	4641      	mov	r1, r8
 800502e:	4638      	mov	r0, r7
 8005030:	47c8      	blx	r9
 8005032:	3001      	adds	r0, #1
 8005034:	d0e6      	beq.n	8005004 <_printf_common+0xa4>
 8005036:	3601      	adds	r6, #1
 8005038:	e7d9      	b.n	8004fee <_printf_common+0x8e>
	...

0800503c <_printf_i>:
 800503c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005040:	7e0f      	ldrb	r7, [r1, #24]
 8005042:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005044:	2f78      	cmp	r7, #120	@ 0x78
 8005046:	4691      	mov	r9, r2
 8005048:	4680      	mov	r8, r0
 800504a:	460c      	mov	r4, r1
 800504c:	469a      	mov	sl, r3
 800504e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8005052:	d807      	bhi.n	8005064 <_printf_i+0x28>
 8005054:	2f62      	cmp	r7, #98	@ 0x62
 8005056:	d80a      	bhi.n	800506e <_printf_i+0x32>
 8005058:	2f00      	cmp	r7, #0
 800505a:	f000 80d1 	beq.w	8005200 <_printf_i+0x1c4>
 800505e:	2f58      	cmp	r7, #88	@ 0x58
 8005060:	f000 80b8 	beq.w	80051d4 <_printf_i+0x198>
 8005064:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005068:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800506c:	e03a      	b.n	80050e4 <_printf_i+0xa8>
 800506e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8005072:	2b15      	cmp	r3, #21
 8005074:	d8f6      	bhi.n	8005064 <_printf_i+0x28>
 8005076:	a101      	add	r1, pc, #4	@ (adr r1, 800507c <_printf_i+0x40>)
 8005078:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800507c:	080050d5 	.word	0x080050d5
 8005080:	080050e9 	.word	0x080050e9
 8005084:	08005065 	.word	0x08005065
 8005088:	08005065 	.word	0x08005065
 800508c:	08005065 	.word	0x08005065
 8005090:	08005065 	.word	0x08005065
 8005094:	080050e9 	.word	0x080050e9
 8005098:	08005065 	.word	0x08005065
 800509c:	08005065 	.word	0x08005065
 80050a0:	08005065 	.word	0x08005065
 80050a4:	08005065 	.word	0x08005065
 80050a8:	080051e7 	.word	0x080051e7
 80050ac:	08005113 	.word	0x08005113
 80050b0:	080051a1 	.word	0x080051a1
 80050b4:	08005065 	.word	0x08005065
 80050b8:	08005065 	.word	0x08005065
 80050bc:	08005209 	.word	0x08005209
 80050c0:	08005065 	.word	0x08005065
 80050c4:	08005113 	.word	0x08005113
 80050c8:	08005065 	.word	0x08005065
 80050cc:	08005065 	.word	0x08005065
 80050d0:	080051a9 	.word	0x080051a9
 80050d4:	6833      	ldr	r3, [r6, #0]
 80050d6:	1d1a      	adds	r2, r3, #4
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	6032      	str	r2, [r6, #0]
 80050dc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80050e0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80050e4:	2301      	movs	r3, #1
 80050e6:	e09c      	b.n	8005222 <_printf_i+0x1e6>
 80050e8:	6833      	ldr	r3, [r6, #0]
 80050ea:	6820      	ldr	r0, [r4, #0]
 80050ec:	1d19      	adds	r1, r3, #4
 80050ee:	6031      	str	r1, [r6, #0]
 80050f0:	0606      	lsls	r6, r0, #24
 80050f2:	d501      	bpl.n	80050f8 <_printf_i+0xbc>
 80050f4:	681d      	ldr	r5, [r3, #0]
 80050f6:	e003      	b.n	8005100 <_printf_i+0xc4>
 80050f8:	0645      	lsls	r5, r0, #25
 80050fa:	d5fb      	bpl.n	80050f4 <_printf_i+0xb8>
 80050fc:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005100:	2d00      	cmp	r5, #0
 8005102:	da03      	bge.n	800510c <_printf_i+0xd0>
 8005104:	232d      	movs	r3, #45	@ 0x2d
 8005106:	426d      	negs	r5, r5
 8005108:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800510c:	4858      	ldr	r0, [pc, #352]	@ (8005270 <_printf_i+0x234>)
 800510e:	230a      	movs	r3, #10
 8005110:	e011      	b.n	8005136 <_printf_i+0xfa>
 8005112:	6821      	ldr	r1, [r4, #0]
 8005114:	6833      	ldr	r3, [r6, #0]
 8005116:	0608      	lsls	r0, r1, #24
 8005118:	f853 5b04 	ldr.w	r5, [r3], #4
 800511c:	d402      	bmi.n	8005124 <_printf_i+0xe8>
 800511e:	0649      	lsls	r1, r1, #25
 8005120:	bf48      	it	mi
 8005122:	b2ad      	uxthmi	r5, r5
 8005124:	2f6f      	cmp	r7, #111	@ 0x6f
 8005126:	4852      	ldr	r0, [pc, #328]	@ (8005270 <_printf_i+0x234>)
 8005128:	6033      	str	r3, [r6, #0]
 800512a:	bf14      	ite	ne
 800512c:	230a      	movne	r3, #10
 800512e:	2308      	moveq	r3, #8
 8005130:	2100      	movs	r1, #0
 8005132:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8005136:	6866      	ldr	r6, [r4, #4]
 8005138:	60a6      	str	r6, [r4, #8]
 800513a:	2e00      	cmp	r6, #0
 800513c:	db05      	blt.n	800514a <_printf_i+0x10e>
 800513e:	6821      	ldr	r1, [r4, #0]
 8005140:	432e      	orrs	r6, r5
 8005142:	f021 0104 	bic.w	r1, r1, #4
 8005146:	6021      	str	r1, [r4, #0]
 8005148:	d04b      	beq.n	80051e2 <_printf_i+0x1a6>
 800514a:	4616      	mov	r6, r2
 800514c:	fbb5 f1f3 	udiv	r1, r5, r3
 8005150:	fb03 5711 	mls	r7, r3, r1, r5
 8005154:	5dc7      	ldrb	r7, [r0, r7]
 8005156:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800515a:	462f      	mov	r7, r5
 800515c:	42bb      	cmp	r3, r7
 800515e:	460d      	mov	r5, r1
 8005160:	d9f4      	bls.n	800514c <_printf_i+0x110>
 8005162:	2b08      	cmp	r3, #8
 8005164:	d10b      	bne.n	800517e <_printf_i+0x142>
 8005166:	6823      	ldr	r3, [r4, #0]
 8005168:	07df      	lsls	r7, r3, #31
 800516a:	d508      	bpl.n	800517e <_printf_i+0x142>
 800516c:	6923      	ldr	r3, [r4, #16]
 800516e:	6861      	ldr	r1, [r4, #4]
 8005170:	4299      	cmp	r1, r3
 8005172:	bfde      	ittt	le
 8005174:	2330      	movle	r3, #48	@ 0x30
 8005176:	f806 3c01 	strble.w	r3, [r6, #-1]
 800517a:	f106 36ff 	addle.w	r6, r6, #4294967295
 800517e:	1b92      	subs	r2, r2, r6
 8005180:	6122      	str	r2, [r4, #16]
 8005182:	f8cd a000 	str.w	sl, [sp]
 8005186:	464b      	mov	r3, r9
 8005188:	aa03      	add	r2, sp, #12
 800518a:	4621      	mov	r1, r4
 800518c:	4640      	mov	r0, r8
 800518e:	f7ff fee7 	bl	8004f60 <_printf_common>
 8005192:	3001      	adds	r0, #1
 8005194:	d14a      	bne.n	800522c <_printf_i+0x1f0>
 8005196:	f04f 30ff 	mov.w	r0, #4294967295
 800519a:	b004      	add	sp, #16
 800519c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80051a0:	6823      	ldr	r3, [r4, #0]
 80051a2:	f043 0320 	orr.w	r3, r3, #32
 80051a6:	6023      	str	r3, [r4, #0]
 80051a8:	4832      	ldr	r0, [pc, #200]	@ (8005274 <_printf_i+0x238>)
 80051aa:	2778      	movs	r7, #120	@ 0x78
 80051ac:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80051b0:	6823      	ldr	r3, [r4, #0]
 80051b2:	6831      	ldr	r1, [r6, #0]
 80051b4:	061f      	lsls	r7, r3, #24
 80051b6:	f851 5b04 	ldr.w	r5, [r1], #4
 80051ba:	d402      	bmi.n	80051c2 <_printf_i+0x186>
 80051bc:	065f      	lsls	r7, r3, #25
 80051be:	bf48      	it	mi
 80051c0:	b2ad      	uxthmi	r5, r5
 80051c2:	6031      	str	r1, [r6, #0]
 80051c4:	07d9      	lsls	r1, r3, #31
 80051c6:	bf44      	itt	mi
 80051c8:	f043 0320 	orrmi.w	r3, r3, #32
 80051cc:	6023      	strmi	r3, [r4, #0]
 80051ce:	b11d      	cbz	r5, 80051d8 <_printf_i+0x19c>
 80051d0:	2310      	movs	r3, #16
 80051d2:	e7ad      	b.n	8005130 <_printf_i+0xf4>
 80051d4:	4826      	ldr	r0, [pc, #152]	@ (8005270 <_printf_i+0x234>)
 80051d6:	e7e9      	b.n	80051ac <_printf_i+0x170>
 80051d8:	6823      	ldr	r3, [r4, #0]
 80051da:	f023 0320 	bic.w	r3, r3, #32
 80051de:	6023      	str	r3, [r4, #0]
 80051e0:	e7f6      	b.n	80051d0 <_printf_i+0x194>
 80051e2:	4616      	mov	r6, r2
 80051e4:	e7bd      	b.n	8005162 <_printf_i+0x126>
 80051e6:	6833      	ldr	r3, [r6, #0]
 80051e8:	6825      	ldr	r5, [r4, #0]
 80051ea:	6961      	ldr	r1, [r4, #20]
 80051ec:	1d18      	adds	r0, r3, #4
 80051ee:	6030      	str	r0, [r6, #0]
 80051f0:	062e      	lsls	r6, r5, #24
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	d501      	bpl.n	80051fa <_printf_i+0x1be>
 80051f6:	6019      	str	r1, [r3, #0]
 80051f8:	e002      	b.n	8005200 <_printf_i+0x1c4>
 80051fa:	0668      	lsls	r0, r5, #25
 80051fc:	d5fb      	bpl.n	80051f6 <_printf_i+0x1ba>
 80051fe:	8019      	strh	r1, [r3, #0]
 8005200:	2300      	movs	r3, #0
 8005202:	6123      	str	r3, [r4, #16]
 8005204:	4616      	mov	r6, r2
 8005206:	e7bc      	b.n	8005182 <_printf_i+0x146>
 8005208:	6833      	ldr	r3, [r6, #0]
 800520a:	1d1a      	adds	r2, r3, #4
 800520c:	6032      	str	r2, [r6, #0]
 800520e:	681e      	ldr	r6, [r3, #0]
 8005210:	6862      	ldr	r2, [r4, #4]
 8005212:	2100      	movs	r1, #0
 8005214:	4630      	mov	r0, r6
 8005216:	f7fb f81b 	bl	8000250 <memchr>
 800521a:	b108      	cbz	r0, 8005220 <_printf_i+0x1e4>
 800521c:	1b80      	subs	r0, r0, r6
 800521e:	6060      	str	r0, [r4, #4]
 8005220:	6863      	ldr	r3, [r4, #4]
 8005222:	6123      	str	r3, [r4, #16]
 8005224:	2300      	movs	r3, #0
 8005226:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800522a:	e7aa      	b.n	8005182 <_printf_i+0x146>
 800522c:	6923      	ldr	r3, [r4, #16]
 800522e:	4632      	mov	r2, r6
 8005230:	4649      	mov	r1, r9
 8005232:	4640      	mov	r0, r8
 8005234:	47d0      	blx	sl
 8005236:	3001      	adds	r0, #1
 8005238:	d0ad      	beq.n	8005196 <_printf_i+0x15a>
 800523a:	6823      	ldr	r3, [r4, #0]
 800523c:	079b      	lsls	r3, r3, #30
 800523e:	d413      	bmi.n	8005268 <_printf_i+0x22c>
 8005240:	68e0      	ldr	r0, [r4, #12]
 8005242:	9b03      	ldr	r3, [sp, #12]
 8005244:	4298      	cmp	r0, r3
 8005246:	bfb8      	it	lt
 8005248:	4618      	movlt	r0, r3
 800524a:	e7a6      	b.n	800519a <_printf_i+0x15e>
 800524c:	2301      	movs	r3, #1
 800524e:	4632      	mov	r2, r6
 8005250:	4649      	mov	r1, r9
 8005252:	4640      	mov	r0, r8
 8005254:	47d0      	blx	sl
 8005256:	3001      	adds	r0, #1
 8005258:	d09d      	beq.n	8005196 <_printf_i+0x15a>
 800525a:	3501      	adds	r5, #1
 800525c:	68e3      	ldr	r3, [r4, #12]
 800525e:	9903      	ldr	r1, [sp, #12]
 8005260:	1a5b      	subs	r3, r3, r1
 8005262:	42ab      	cmp	r3, r5
 8005264:	dcf2      	bgt.n	800524c <_printf_i+0x210>
 8005266:	e7eb      	b.n	8005240 <_printf_i+0x204>
 8005268:	2500      	movs	r5, #0
 800526a:	f104 0619 	add.w	r6, r4, #25
 800526e:	e7f5      	b.n	800525c <_printf_i+0x220>
 8005270:	080054d1 	.word	0x080054d1
 8005274:	080054e2 	.word	0x080054e2

08005278 <memmove>:
 8005278:	4288      	cmp	r0, r1
 800527a:	b510      	push	{r4, lr}
 800527c:	eb01 0402 	add.w	r4, r1, r2
 8005280:	d902      	bls.n	8005288 <memmove+0x10>
 8005282:	4284      	cmp	r4, r0
 8005284:	4623      	mov	r3, r4
 8005286:	d807      	bhi.n	8005298 <memmove+0x20>
 8005288:	1e43      	subs	r3, r0, #1
 800528a:	42a1      	cmp	r1, r4
 800528c:	d008      	beq.n	80052a0 <memmove+0x28>
 800528e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005292:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005296:	e7f8      	b.n	800528a <memmove+0x12>
 8005298:	4402      	add	r2, r0
 800529a:	4601      	mov	r1, r0
 800529c:	428a      	cmp	r2, r1
 800529e:	d100      	bne.n	80052a2 <memmove+0x2a>
 80052a0:	bd10      	pop	{r4, pc}
 80052a2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80052a6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80052aa:	e7f7      	b.n	800529c <memmove+0x24>

080052ac <_sbrk_r>:
 80052ac:	b538      	push	{r3, r4, r5, lr}
 80052ae:	4d06      	ldr	r5, [pc, #24]	@ (80052c8 <_sbrk_r+0x1c>)
 80052b0:	2300      	movs	r3, #0
 80052b2:	4604      	mov	r4, r0
 80052b4:	4608      	mov	r0, r1
 80052b6:	602b      	str	r3, [r5, #0]
 80052b8:	f7fc f85e 	bl	8001378 <_sbrk>
 80052bc:	1c43      	adds	r3, r0, #1
 80052be:	d102      	bne.n	80052c6 <_sbrk_r+0x1a>
 80052c0:	682b      	ldr	r3, [r5, #0]
 80052c2:	b103      	cbz	r3, 80052c6 <_sbrk_r+0x1a>
 80052c4:	6023      	str	r3, [r4, #0]
 80052c6:	bd38      	pop	{r3, r4, r5, pc}
 80052c8:	20000334 	.word	0x20000334

080052cc <memcpy>:
 80052cc:	440a      	add	r2, r1
 80052ce:	4291      	cmp	r1, r2
 80052d0:	f100 33ff 	add.w	r3, r0, #4294967295
 80052d4:	d100      	bne.n	80052d8 <memcpy+0xc>
 80052d6:	4770      	bx	lr
 80052d8:	b510      	push	{r4, lr}
 80052da:	f811 4b01 	ldrb.w	r4, [r1], #1
 80052de:	f803 4f01 	strb.w	r4, [r3, #1]!
 80052e2:	4291      	cmp	r1, r2
 80052e4:	d1f9      	bne.n	80052da <memcpy+0xe>
 80052e6:	bd10      	pop	{r4, pc}

080052e8 <_realloc_r>:
 80052e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80052ec:	4607      	mov	r7, r0
 80052ee:	4614      	mov	r4, r2
 80052f0:	460d      	mov	r5, r1
 80052f2:	b921      	cbnz	r1, 80052fe <_realloc_r+0x16>
 80052f4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80052f8:	4611      	mov	r1, r2
 80052fa:	f7ff bc4d 	b.w	8004b98 <_malloc_r>
 80052fe:	b92a      	cbnz	r2, 800530c <_realloc_r+0x24>
 8005300:	f7ff fbde 	bl	8004ac0 <_free_r>
 8005304:	4625      	mov	r5, r4
 8005306:	4628      	mov	r0, r5
 8005308:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800530c:	f000 f81a 	bl	8005344 <_malloc_usable_size_r>
 8005310:	4284      	cmp	r4, r0
 8005312:	4606      	mov	r6, r0
 8005314:	d802      	bhi.n	800531c <_realloc_r+0x34>
 8005316:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800531a:	d8f4      	bhi.n	8005306 <_realloc_r+0x1e>
 800531c:	4621      	mov	r1, r4
 800531e:	4638      	mov	r0, r7
 8005320:	f7ff fc3a 	bl	8004b98 <_malloc_r>
 8005324:	4680      	mov	r8, r0
 8005326:	b908      	cbnz	r0, 800532c <_realloc_r+0x44>
 8005328:	4645      	mov	r5, r8
 800532a:	e7ec      	b.n	8005306 <_realloc_r+0x1e>
 800532c:	42b4      	cmp	r4, r6
 800532e:	4622      	mov	r2, r4
 8005330:	4629      	mov	r1, r5
 8005332:	bf28      	it	cs
 8005334:	4632      	movcs	r2, r6
 8005336:	f7ff ffc9 	bl	80052cc <memcpy>
 800533a:	4629      	mov	r1, r5
 800533c:	4638      	mov	r0, r7
 800533e:	f7ff fbbf 	bl	8004ac0 <_free_r>
 8005342:	e7f1      	b.n	8005328 <_realloc_r+0x40>

08005344 <_malloc_usable_size_r>:
 8005344:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005348:	1f18      	subs	r0, r3, #4
 800534a:	2b00      	cmp	r3, #0
 800534c:	bfbc      	itt	lt
 800534e:	580b      	ldrlt	r3, [r1, r0]
 8005350:	18c0      	addlt	r0, r0, r3
 8005352:	4770      	bx	lr

08005354 <_init>:
 8005354:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005356:	bf00      	nop
 8005358:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800535a:	bc08      	pop	{r3}
 800535c:	469e      	mov	lr, r3
 800535e:	4770      	bx	lr

08005360 <_fini>:
 8005360:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005362:	bf00      	nop
 8005364:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005366:	bc08      	pop	{r3}
 8005368:	469e      	mov	lr, r3
 800536a:	4770      	bx	lr
