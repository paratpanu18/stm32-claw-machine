
stm32-claw-machine.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000069e8  08000200  08000200  00001200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001008  08006be8  08006be8  00007be8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007bf0  08007bf0  00009074  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08007bf0  08007bf0  00008bf0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007bf8  08007bf8  00009074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007bf8  08007bf8  00008bf8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007bfc  08007bfc  00008bfc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000074  20000000  08007c00  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000320  20000074  08007c74  00009074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000394  08007c74  00009394  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00009074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015a13  00000000  00000000  000090a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002e7a  00000000  00000000  0001eab5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001170  00000000  00000000  00021930  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000d9b  00000000  00000000  00022aa0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00029b68  00000000  00000000  0002383b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00017951  00000000  00000000  0004d3a3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ff18c  00000000  00000000  00064cf4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00163e80  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004c9c  00000000  00000000  00163ec4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000078  00000000  00000000  00168b60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	@ (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	@ (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	@ (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000074 	.word	0x20000074
 800021c:	00000000 	.word	0x00000000
 8000220:	08006bd0 	.word	0x08006bd0

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	@ (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	@ (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	@ (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000078 	.word	0x20000078
 800023c:	08006bd0 	.word	0x08006bd0

08000240 <strlen>:
 8000240:	4603      	mov	r3, r0
 8000242:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000246:	2a00      	cmp	r2, #0
 8000248:	d1fb      	bne.n	8000242 <strlen+0x2>
 800024a:	1a18      	subs	r0, r3, r0
 800024c:	3801      	subs	r0, #1
 800024e:	4770      	bx	lr

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000300:	f04f 30ff 	movne.w	r0, #4294967295
 8000304:	f000 b988 	b.w	8000618 <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9d08      	ldr	r5, [sp, #32]
 8000326:	468e      	mov	lr, r1
 8000328:	4604      	mov	r4, r0
 800032a:	4688      	mov	r8, r1
 800032c:	2b00      	cmp	r3, #0
 800032e:	d14a      	bne.n	80003c6 <__udivmoddi4+0xa6>
 8000330:	428a      	cmp	r2, r1
 8000332:	4617      	mov	r7, r2
 8000334:	d962      	bls.n	80003fc <__udivmoddi4+0xdc>
 8000336:	fab2 f682 	clz	r6, r2
 800033a:	b14e      	cbz	r6, 8000350 <__udivmoddi4+0x30>
 800033c:	f1c6 0320 	rsb	r3, r6, #32
 8000340:	fa01 f806 	lsl.w	r8, r1, r6
 8000344:	fa20 f303 	lsr.w	r3, r0, r3
 8000348:	40b7      	lsls	r7, r6
 800034a:	ea43 0808 	orr.w	r8, r3, r8
 800034e:	40b4      	lsls	r4, r6
 8000350:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000354:	fa1f fc87 	uxth.w	ip, r7
 8000358:	fbb8 f1fe 	udiv	r1, r8, lr
 800035c:	0c23      	lsrs	r3, r4, #16
 800035e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000362:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000366:	fb01 f20c 	mul.w	r2, r1, ip
 800036a:	429a      	cmp	r2, r3
 800036c:	d909      	bls.n	8000382 <__udivmoddi4+0x62>
 800036e:	18fb      	adds	r3, r7, r3
 8000370:	f101 30ff 	add.w	r0, r1, #4294967295
 8000374:	f080 80ea 	bcs.w	800054c <__udivmoddi4+0x22c>
 8000378:	429a      	cmp	r2, r3
 800037a:	f240 80e7 	bls.w	800054c <__udivmoddi4+0x22c>
 800037e:	3902      	subs	r1, #2
 8000380:	443b      	add	r3, r7
 8000382:	1a9a      	subs	r2, r3, r2
 8000384:	b2a3      	uxth	r3, r4
 8000386:	fbb2 f0fe 	udiv	r0, r2, lr
 800038a:	fb0e 2210 	mls	r2, lr, r0, r2
 800038e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000392:	fb00 fc0c 	mul.w	ip, r0, ip
 8000396:	459c      	cmp	ip, r3
 8000398:	d909      	bls.n	80003ae <__udivmoddi4+0x8e>
 800039a:	18fb      	adds	r3, r7, r3
 800039c:	f100 32ff 	add.w	r2, r0, #4294967295
 80003a0:	f080 80d6 	bcs.w	8000550 <__udivmoddi4+0x230>
 80003a4:	459c      	cmp	ip, r3
 80003a6:	f240 80d3 	bls.w	8000550 <__udivmoddi4+0x230>
 80003aa:	443b      	add	r3, r7
 80003ac:	3802      	subs	r0, #2
 80003ae:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80003b2:	eba3 030c 	sub.w	r3, r3, ip
 80003b6:	2100      	movs	r1, #0
 80003b8:	b11d      	cbz	r5, 80003c2 <__udivmoddi4+0xa2>
 80003ba:	40f3      	lsrs	r3, r6
 80003bc:	2200      	movs	r2, #0
 80003be:	e9c5 3200 	strd	r3, r2, [r5]
 80003c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d905      	bls.n	80003d6 <__udivmoddi4+0xb6>
 80003ca:	b10d      	cbz	r5, 80003d0 <__udivmoddi4+0xb0>
 80003cc:	e9c5 0100 	strd	r0, r1, [r5]
 80003d0:	2100      	movs	r1, #0
 80003d2:	4608      	mov	r0, r1
 80003d4:	e7f5      	b.n	80003c2 <__udivmoddi4+0xa2>
 80003d6:	fab3 f183 	clz	r1, r3
 80003da:	2900      	cmp	r1, #0
 80003dc:	d146      	bne.n	800046c <__udivmoddi4+0x14c>
 80003de:	4573      	cmp	r3, lr
 80003e0:	d302      	bcc.n	80003e8 <__udivmoddi4+0xc8>
 80003e2:	4282      	cmp	r2, r0
 80003e4:	f200 8105 	bhi.w	80005f2 <__udivmoddi4+0x2d2>
 80003e8:	1a84      	subs	r4, r0, r2
 80003ea:	eb6e 0203 	sbc.w	r2, lr, r3
 80003ee:	2001      	movs	r0, #1
 80003f0:	4690      	mov	r8, r2
 80003f2:	2d00      	cmp	r5, #0
 80003f4:	d0e5      	beq.n	80003c2 <__udivmoddi4+0xa2>
 80003f6:	e9c5 4800 	strd	r4, r8, [r5]
 80003fa:	e7e2      	b.n	80003c2 <__udivmoddi4+0xa2>
 80003fc:	2a00      	cmp	r2, #0
 80003fe:	f000 8090 	beq.w	8000522 <__udivmoddi4+0x202>
 8000402:	fab2 f682 	clz	r6, r2
 8000406:	2e00      	cmp	r6, #0
 8000408:	f040 80a4 	bne.w	8000554 <__udivmoddi4+0x234>
 800040c:	1a8a      	subs	r2, r1, r2
 800040e:	0c03      	lsrs	r3, r0, #16
 8000410:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000414:	b280      	uxth	r0, r0
 8000416:	b2bc      	uxth	r4, r7
 8000418:	2101      	movs	r1, #1
 800041a:	fbb2 fcfe 	udiv	ip, r2, lr
 800041e:	fb0e 221c 	mls	r2, lr, ip, r2
 8000422:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000426:	fb04 f20c 	mul.w	r2, r4, ip
 800042a:	429a      	cmp	r2, r3
 800042c:	d907      	bls.n	800043e <__udivmoddi4+0x11e>
 800042e:	18fb      	adds	r3, r7, r3
 8000430:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000434:	d202      	bcs.n	800043c <__udivmoddi4+0x11c>
 8000436:	429a      	cmp	r2, r3
 8000438:	f200 80e0 	bhi.w	80005fc <__udivmoddi4+0x2dc>
 800043c:	46c4      	mov	ip, r8
 800043e:	1a9b      	subs	r3, r3, r2
 8000440:	fbb3 f2fe 	udiv	r2, r3, lr
 8000444:	fb0e 3312 	mls	r3, lr, r2, r3
 8000448:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800044c:	fb02 f404 	mul.w	r4, r2, r4
 8000450:	429c      	cmp	r4, r3
 8000452:	d907      	bls.n	8000464 <__udivmoddi4+0x144>
 8000454:	18fb      	adds	r3, r7, r3
 8000456:	f102 30ff 	add.w	r0, r2, #4294967295
 800045a:	d202      	bcs.n	8000462 <__udivmoddi4+0x142>
 800045c:	429c      	cmp	r4, r3
 800045e:	f200 80ca 	bhi.w	80005f6 <__udivmoddi4+0x2d6>
 8000462:	4602      	mov	r2, r0
 8000464:	1b1b      	subs	r3, r3, r4
 8000466:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800046a:	e7a5      	b.n	80003b8 <__udivmoddi4+0x98>
 800046c:	f1c1 0620 	rsb	r6, r1, #32
 8000470:	408b      	lsls	r3, r1
 8000472:	fa22 f706 	lsr.w	r7, r2, r6
 8000476:	431f      	orrs	r7, r3
 8000478:	fa0e f401 	lsl.w	r4, lr, r1
 800047c:	fa20 f306 	lsr.w	r3, r0, r6
 8000480:	fa2e fe06 	lsr.w	lr, lr, r6
 8000484:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000488:	4323      	orrs	r3, r4
 800048a:	fa00 f801 	lsl.w	r8, r0, r1
 800048e:	fa1f fc87 	uxth.w	ip, r7
 8000492:	fbbe f0f9 	udiv	r0, lr, r9
 8000496:	0c1c      	lsrs	r4, r3, #16
 8000498:	fb09 ee10 	mls	lr, r9, r0, lr
 800049c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 80004a0:	fb00 fe0c 	mul.w	lr, r0, ip
 80004a4:	45a6      	cmp	lr, r4
 80004a6:	fa02 f201 	lsl.w	r2, r2, r1
 80004aa:	d909      	bls.n	80004c0 <__udivmoddi4+0x1a0>
 80004ac:	193c      	adds	r4, r7, r4
 80004ae:	f100 3aff 	add.w	sl, r0, #4294967295
 80004b2:	f080 809c 	bcs.w	80005ee <__udivmoddi4+0x2ce>
 80004b6:	45a6      	cmp	lr, r4
 80004b8:	f240 8099 	bls.w	80005ee <__udivmoddi4+0x2ce>
 80004bc:	3802      	subs	r0, #2
 80004be:	443c      	add	r4, r7
 80004c0:	eba4 040e 	sub.w	r4, r4, lr
 80004c4:	fa1f fe83 	uxth.w	lr, r3
 80004c8:	fbb4 f3f9 	udiv	r3, r4, r9
 80004cc:	fb09 4413 	mls	r4, r9, r3, r4
 80004d0:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80004d4:	fb03 fc0c 	mul.w	ip, r3, ip
 80004d8:	45a4      	cmp	ip, r4
 80004da:	d908      	bls.n	80004ee <__udivmoddi4+0x1ce>
 80004dc:	193c      	adds	r4, r7, r4
 80004de:	f103 3eff 	add.w	lr, r3, #4294967295
 80004e2:	f080 8082 	bcs.w	80005ea <__udivmoddi4+0x2ca>
 80004e6:	45a4      	cmp	ip, r4
 80004e8:	d97f      	bls.n	80005ea <__udivmoddi4+0x2ca>
 80004ea:	3b02      	subs	r3, #2
 80004ec:	443c      	add	r4, r7
 80004ee:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004f2:	eba4 040c 	sub.w	r4, r4, ip
 80004f6:	fba0 ec02 	umull	lr, ip, r0, r2
 80004fa:	4564      	cmp	r4, ip
 80004fc:	4673      	mov	r3, lr
 80004fe:	46e1      	mov	r9, ip
 8000500:	d362      	bcc.n	80005c8 <__udivmoddi4+0x2a8>
 8000502:	d05f      	beq.n	80005c4 <__udivmoddi4+0x2a4>
 8000504:	b15d      	cbz	r5, 800051e <__udivmoddi4+0x1fe>
 8000506:	ebb8 0203 	subs.w	r2, r8, r3
 800050a:	eb64 0409 	sbc.w	r4, r4, r9
 800050e:	fa04 f606 	lsl.w	r6, r4, r6
 8000512:	fa22 f301 	lsr.w	r3, r2, r1
 8000516:	431e      	orrs	r6, r3
 8000518:	40cc      	lsrs	r4, r1
 800051a:	e9c5 6400 	strd	r6, r4, [r5]
 800051e:	2100      	movs	r1, #0
 8000520:	e74f      	b.n	80003c2 <__udivmoddi4+0xa2>
 8000522:	fbb1 fcf2 	udiv	ip, r1, r2
 8000526:	0c01      	lsrs	r1, r0, #16
 8000528:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 800052c:	b280      	uxth	r0, r0
 800052e:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000532:	463b      	mov	r3, r7
 8000534:	4638      	mov	r0, r7
 8000536:	463c      	mov	r4, r7
 8000538:	46b8      	mov	r8, r7
 800053a:	46be      	mov	lr, r7
 800053c:	2620      	movs	r6, #32
 800053e:	fbb1 f1f7 	udiv	r1, r1, r7
 8000542:	eba2 0208 	sub.w	r2, r2, r8
 8000546:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800054a:	e766      	b.n	800041a <__udivmoddi4+0xfa>
 800054c:	4601      	mov	r1, r0
 800054e:	e718      	b.n	8000382 <__udivmoddi4+0x62>
 8000550:	4610      	mov	r0, r2
 8000552:	e72c      	b.n	80003ae <__udivmoddi4+0x8e>
 8000554:	f1c6 0220 	rsb	r2, r6, #32
 8000558:	fa2e f302 	lsr.w	r3, lr, r2
 800055c:	40b7      	lsls	r7, r6
 800055e:	40b1      	lsls	r1, r6
 8000560:	fa20 f202 	lsr.w	r2, r0, r2
 8000564:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000568:	430a      	orrs	r2, r1
 800056a:	fbb3 f8fe 	udiv	r8, r3, lr
 800056e:	b2bc      	uxth	r4, r7
 8000570:	fb0e 3318 	mls	r3, lr, r8, r3
 8000574:	0c11      	lsrs	r1, r2, #16
 8000576:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800057a:	fb08 f904 	mul.w	r9, r8, r4
 800057e:	40b0      	lsls	r0, r6
 8000580:	4589      	cmp	r9, r1
 8000582:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000586:	b280      	uxth	r0, r0
 8000588:	d93e      	bls.n	8000608 <__udivmoddi4+0x2e8>
 800058a:	1879      	adds	r1, r7, r1
 800058c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000590:	d201      	bcs.n	8000596 <__udivmoddi4+0x276>
 8000592:	4589      	cmp	r9, r1
 8000594:	d81f      	bhi.n	80005d6 <__udivmoddi4+0x2b6>
 8000596:	eba1 0109 	sub.w	r1, r1, r9
 800059a:	fbb1 f9fe 	udiv	r9, r1, lr
 800059e:	fb09 f804 	mul.w	r8, r9, r4
 80005a2:	fb0e 1119 	mls	r1, lr, r9, r1
 80005a6:	b292      	uxth	r2, r2
 80005a8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80005ac:	4542      	cmp	r2, r8
 80005ae:	d229      	bcs.n	8000604 <__udivmoddi4+0x2e4>
 80005b0:	18ba      	adds	r2, r7, r2
 80005b2:	f109 31ff 	add.w	r1, r9, #4294967295
 80005b6:	d2c4      	bcs.n	8000542 <__udivmoddi4+0x222>
 80005b8:	4542      	cmp	r2, r8
 80005ba:	d2c2      	bcs.n	8000542 <__udivmoddi4+0x222>
 80005bc:	f1a9 0102 	sub.w	r1, r9, #2
 80005c0:	443a      	add	r2, r7
 80005c2:	e7be      	b.n	8000542 <__udivmoddi4+0x222>
 80005c4:	45f0      	cmp	r8, lr
 80005c6:	d29d      	bcs.n	8000504 <__udivmoddi4+0x1e4>
 80005c8:	ebbe 0302 	subs.w	r3, lr, r2
 80005cc:	eb6c 0c07 	sbc.w	ip, ip, r7
 80005d0:	3801      	subs	r0, #1
 80005d2:	46e1      	mov	r9, ip
 80005d4:	e796      	b.n	8000504 <__udivmoddi4+0x1e4>
 80005d6:	eba7 0909 	sub.w	r9, r7, r9
 80005da:	4449      	add	r1, r9
 80005dc:	f1a8 0c02 	sub.w	ip, r8, #2
 80005e0:	fbb1 f9fe 	udiv	r9, r1, lr
 80005e4:	fb09 f804 	mul.w	r8, r9, r4
 80005e8:	e7db      	b.n	80005a2 <__udivmoddi4+0x282>
 80005ea:	4673      	mov	r3, lr
 80005ec:	e77f      	b.n	80004ee <__udivmoddi4+0x1ce>
 80005ee:	4650      	mov	r0, sl
 80005f0:	e766      	b.n	80004c0 <__udivmoddi4+0x1a0>
 80005f2:	4608      	mov	r0, r1
 80005f4:	e6fd      	b.n	80003f2 <__udivmoddi4+0xd2>
 80005f6:	443b      	add	r3, r7
 80005f8:	3a02      	subs	r2, #2
 80005fa:	e733      	b.n	8000464 <__udivmoddi4+0x144>
 80005fc:	f1ac 0c02 	sub.w	ip, ip, #2
 8000600:	443b      	add	r3, r7
 8000602:	e71c      	b.n	800043e <__udivmoddi4+0x11e>
 8000604:	4649      	mov	r1, r9
 8000606:	e79c      	b.n	8000542 <__udivmoddi4+0x222>
 8000608:	eba1 0109 	sub.w	r1, r1, r9
 800060c:	46c4      	mov	ip, r8
 800060e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000612:	fb09 f804 	mul.w	r8, r9, r4
 8000616:	e7c4      	b.n	80005a2 <__udivmoddi4+0x282>

08000618 <__aeabi_idiv0>:
 8000618:	4770      	bx	lr
 800061a:	bf00      	nop

0800061c <renderPage>:
 *      Author: ACER
 */
#include "LCD_pages.h"
#include "usart.h"

void renderPage(uint8_t state){
 800061c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800061e:	b08f      	sub	sp, #60	@ 0x3c
 8000620:	af0c      	add	r7, sp, #48	@ 0x30
 8000622:	4603      	mov	r3, r0
 8000624:	71fb      	strb	r3, [r7, #7]
	switch (state){
 8000626:	79fb      	ldrb	r3, [r7, #7]
 8000628:	2b04      	cmp	r3, #4
 800062a:	d840      	bhi.n	80006ae <renderPage+0x92>
 800062c:	a201      	add	r2, pc, #4	@ (adr r2, 8000634 <renderPage+0x18>)
 800062e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000632:	bf00      	nop
 8000634:	08000649 	.word	0x08000649
 8000638:	080006a9 	.word	0x080006a9
 800063c:	080006a9 	.word	0x080006a9
 8000640:	080006a9 	.word	0x080006a9
 8000644:	080006a9 	.word	0x080006a9
		case IDLE:
			static uint8_t rendered = 0;
			if (!rendered){
 8000648:	4b1b      	ldr	r3, [pc, #108]	@ (80006b8 <renderPage+0x9c>)
 800064a:	781b      	ldrb	r3, [r3, #0]
 800064c:	2b00      	cmp	r3, #0
 800064e:	d12d      	bne.n	80006ac <renderPage+0x90>
				ILI9341_FillScreen(&ili9341, ILI9341_COLOR_WHITE);
 8000650:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8000654:	4819      	ldr	r0, [pc, #100]	@ (80006bc <renderPage+0xa0>)
 8000656:	f000 fdea 	bl	800122e <ILI9341_FillScreen>
				ILI9341_WriteString(&ili9341, 20, ili9341.height/2, "PLEASE INSERT COIN", ILI9341_Font_Spleen16x32, ILI9341_COLOR_BLACK, ILI9341_COLOR_WHITE, 1, 1, 0, 0);
 800065a:	4b18      	ldr	r3, [pc, #96]	@ (80006bc <renderPage+0xa0>)
 800065c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800065e:	2b00      	cmp	r3, #0
 8000660:	da00      	bge.n	8000664 <renderPage+0x48>
 8000662:	3301      	adds	r3, #1
 8000664:	105b      	asrs	r3, r3, #1
 8000666:	461e      	mov	r6, r3
 8000668:	2300      	movs	r3, #0
 800066a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800066c:	2300      	movs	r3, #0
 800066e:	930a      	str	r3, [sp, #40]	@ 0x28
 8000670:	2301      	movs	r3, #1
 8000672:	9309      	str	r3, [sp, #36]	@ 0x24
 8000674:	2301      	movs	r3, #1
 8000676:	9308      	str	r3, [sp, #32]
 8000678:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800067c:	9307      	str	r3, [sp, #28]
 800067e:	2300      	movs	r3, #0
 8000680:	9306      	str	r3, [sp, #24]
 8000682:	4b0f      	ldr	r3, [pc, #60]	@ (80006c0 <renderPage+0xa4>)
 8000684:	466c      	mov	r4, sp
 8000686:	461d      	mov	r5, r3
 8000688:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800068a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800068c:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000690:	e884 0003 	stmia.w	r4, {r0, r1}
 8000694:	4b0b      	ldr	r3, [pc, #44]	@ (80006c4 <renderPage+0xa8>)
 8000696:	4632      	mov	r2, r6
 8000698:	2114      	movs	r1, #20
 800069a:	4808      	ldr	r0, [pc, #32]	@ (80006bc <renderPage+0xa0>)
 800069c:	f000 ff98 	bl	80015d0 <ILI9341_WriteString>
				rendered = 1;
 80006a0:	4b05      	ldr	r3, [pc, #20]	@ (80006b8 <renderPage+0x9c>)
 80006a2:	2201      	movs	r2, #1
 80006a4:	701a      	strb	r2, [r3, #0]
			}
			break;
 80006a6:	e001      	b.n	80006ac <renderPage+0x90>
		case WAIT_COIN:
			break;
 80006a8:	bf00      	nop
 80006aa:	e000      	b.n	80006ae <renderPage+0x92>
			break;
 80006ac:	bf00      	nop
		case GAME:
			break;
		case DEPOSIT:
			break;
	}
}
 80006ae:	bf00      	nop
 80006b0:	370c      	adds	r7, #12
 80006b2:	46bd      	mov	sp, r7
 80006b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80006b6:	bf00      	nop
 80006b8:	20000090 	.word	0x20000090
 80006bc:	20000094 	.word	0x20000094
 80006c0:	08007b8c 	.word	0x08007b8c
 80006c4:	08006be8 	.word	0x08006be8

080006c8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80006c8:	b580      	push	{r7, lr}
 80006ca:	b08e      	sub	sp, #56	@ 0x38
 80006cc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006ce:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80006d2:	2200      	movs	r2, #0
 80006d4:	601a      	str	r2, [r3, #0]
 80006d6:	605a      	str	r2, [r3, #4]
 80006d8:	609a      	str	r2, [r3, #8]
 80006da:	60da      	str	r2, [r3, #12]
 80006dc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006de:	4b90      	ldr	r3, [pc, #576]	@ (8000920 <MX_GPIO_Init+0x258>)
 80006e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006e2:	4a8f      	ldr	r2, [pc, #572]	@ (8000920 <MX_GPIO_Init+0x258>)
 80006e4:	f043 0304 	orr.w	r3, r3, #4
 80006e8:	6313      	str	r3, [r2, #48]	@ 0x30
 80006ea:	4b8d      	ldr	r3, [pc, #564]	@ (8000920 <MX_GPIO_Init+0x258>)
 80006ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006ee:	f003 0304 	and.w	r3, r3, #4
 80006f2:	623b      	str	r3, [r7, #32]
 80006f4:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80006f6:	4b8a      	ldr	r3, [pc, #552]	@ (8000920 <MX_GPIO_Init+0x258>)
 80006f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006fa:	4a89      	ldr	r2, [pc, #548]	@ (8000920 <MX_GPIO_Init+0x258>)
 80006fc:	f043 0320 	orr.w	r3, r3, #32
 8000700:	6313      	str	r3, [r2, #48]	@ 0x30
 8000702:	4b87      	ldr	r3, [pc, #540]	@ (8000920 <MX_GPIO_Init+0x258>)
 8000704:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000706:	f003 0320 	and.w	r3, r3, #32
 800070a:	61fb      	str	r3, [r7, #28]
 800070c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800070e:	4b84      	ldr	r3, [pc, #528]	@ (8000920 <MX_GPIO_Init+0x258>)
 8000710:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000712:	4a83      	ldr	r2, [pc, #524]	@ (8000920 <MX_GPIO_Init+0x258>)
 8000714:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000718:	6313      	str	r3, [r2, #48]	@ 0x30
 800071a:	4b81      	ldr	r3, [pc, #516]	@ (8000920 <MX_GPIO_Init+0x258>)
 800071c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800071e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000722:	61bb      	str	r3, [r7, #24]
 8000724:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000726:	4b7e      	ldr	r3, [pc, #504]	@ (8000920 <MX_GPIO_Init+0x258>)
 8000728:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800072a:	4a7d      	ldr	r2, [pc, #500]	@ (8000920 <MX_GPIO_Init+0x258>)
 800072c:	f043 0301 	orr.w	r3, r3, #1
 8000730:	6313      	str	r3, [r2, #48]	@ 0x30
 8000732:	4b7b      	ldr	r3, [pc, #492]	@ (8000920 <MX_GPIO_Init+0x258>)
 8000734:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000736:	f003 0301 	and.w	r3, r3, #1
 800073a:	617b      	str	r3, [r7, #20]
 800073c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800073e:	4b78      	ldr	r3, [pc, #480]	@ (8000920 <MX_GPIO_Init+0x258>)
 8000740:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000742:	4a77      	ldr	r2, [pc, #476]	@ (8000920 <MX_GPIO_Init+0x258>)
 8000744:	f043 0302 	orr.w	r3, r3, #2
 8000748:	6313      	str	r3, [r2, #48]	@ 0x30
 800074a:	4b75      	ldr	r3, [pc, #468]	@ (8000920 <MX_GPIO_Init+0x258>)
 800074c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800074e:	f003 0302 	and.w	r3, r3, #2
 8000752:	613b      	str	r3, [r7, #16]
 8000754:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000756:	4b72      	ldr	r3, [pc, #456]	@ (8000920 <MX_GPIO_Init+0x258>)
 8000758:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800075a:	4a71      	ldr	r2, [pc, #452]	@ (8000920 <MX_GPIO_Init+0x258>)
 800075c:	f043 0310 	orr.w	r3, r3, #16
 8000760:	6313      	str	r3, [r2, #48]	@ 0x30
 8000762:	4b6f      	ldr	r3, [pc, #444]	@ (8000920 <MX_GPIO_Init+0x258>)
 8000764:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000766:	f003 0310 	and.w	r3, r3, #16
 800076a:	60fb      	str	r3, [r7, #12]
 800076c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800076e:	4b6c      	ldr	r3, [pc, #432]	@ (8000920 <MX_GPIO_Init+0x258>)
 8000770:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000772:	4a6b      	ldr	r2, [pc, #428]	@ (8000920 <MX_GPIO_Init+0x258>)
 8000774:	f043 0308 	orr.w	r3, r3, #8
 8000778:	6313      	str	r3, [r2, #48]	@ 0x30
 800077a:	4b69      	ldr	r3, [pc, #420]	@ (8000920 <MX_GPIO_Init+0x258>)
 800077c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800077e:	f003 0308 	and.w	r3, r3, #8
 8000782:	60bb      	str	r3, [r7, #8]
 8000784:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000786:	4b66      	ldr	r3, [pc, #408]	@ (8000920 <MX_GPIO_Init+0x258>)
 8000788:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800078a:	4a65      	ldr	r2, [pc, #404]	@ (8000920 <MX_GPIO_Init+0x258>)
 800078c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000790:	6313      	str	r3, [r2, #48]	@ 0x30
 8000792:	4b63      	ldr	r3, [pc, #396]	@ (8000920 <MX_GPIO_Init+0x258>)
 8000794:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000796:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800079a:	607b      	str	r3, [r7, #4]
 800079c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 800079e:	2200      	movs	r2, #0
 80007a0:	f244 0181 	movw	r1, #16513	@ 0x4081
 80007a4:	485f      	ldr	r0, [pc, #380]	@ (8000924 <MX_GPIO_Init+0x25c>)
 80007a6:	f002 f953 	bl	8002a50 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_15, GPIO_PIN_RESET);
 80007aa:	2200      	movs	r2, #0
 80007ac:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80007b0:	485d      	ldr	r0, [pc, #372]	@ (8000928 <MX_GPIO_Init+0x260>)
 80007b2:	f002 f94d 	bl	8002a50 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_10|GPIO_PIN_13, GPIO_PIN_RESET);
 80007b6:	2200      	movs	r2, #0
 80007b8:	f44f 5116 	mov.w	r1, #9600	@ 0x2580
 80007bc:	485b      	ldr	r0, [pc, #364]	@ (800092c <MX_GPIO_Init+0x264>)
 80007be:	f002 f947 	bl	8002a50 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, CS_Pin|DC_Pin|RESET_Pin, GPIO_PIN_RESET);
 80007c2:	2200      	movs	r2, #0
 80007c4:	f44f 61e0 	mov.w	r1, #1792	@ 0x700
 80007c8:	4859      	ldr	r0, [pc, #356]	@ (8000930 <MX_GPIO_Init+0x268>)
 80007ca:	f002 f941 	bl	8002a50 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_9|GPIO_PIN_14, GPIO_PIN_RESET);
 80007ce:	2200      	movs	r2, #0
 80007d0:	f44f 4184 	mov.w	r1, #16896	@ 0x4200
 80007d4:	4857      	ldr	r0, [pc, #348]	@ (8000934 <MX_GPIO_Init+0x26c>)
 80007d6:	f002 f93b 	bl	8002a50 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 80007da:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80007de:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80007e0:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80007e4:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007e6:	2300      	movs	r3, #0
 80007e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80007ea:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80007ee:	4619      	mov	r1, r3
 80007f0:	484f      	ldr	r0, [pc, #316]	@ (8000930 <MX_GPIO_Init+0x268>)
 80007f2:	f001 ff69 	bl	80026c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 80007f6:	f244 0381 	movw	r3, #16513	@ 0x4081
 80007fa:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007fc:	2301      	movs	r3, #1
 80007fe:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000800:	2300      	movs	r3, #0
 8000802:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000804:	2300      	movs	r3, #0
 8000806:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000808:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800080c:	4619      	mov	r1, r3
 800080e:	4845      	ldr	r0, [pc, #276]	@ (8000924 <MX_GPIO_Init+0x25c>)
 8000810:	f001 ff5a 	bl	80026c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PF13 PF14 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 8000814:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 8000818:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800081a:	2300      	movs	r3, #0
 800081c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800081e:	2301      	movs	r3, #1
 8000820:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000822:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000826:	4619      	mov	r1, r3
 8000828:	483f      	ldr	r0, [pc, #252]	@ (8000928 <MX_GPIO_Init+0x260>)
 800082a:	f001 ff4d 	bl	80026c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PF15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 800082e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000832:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000834:	2301      	movs	r3, #1
 8000836:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000838:	2300      	movs	r3, #0
 800083a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800083c:	2300      	movs	r3, #0
 800083e:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000840:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000844:	4619      	mov	r1, r3
 8000846:	4838      	ldr	r0, [pc, #224]	@ (8000928 <MX_GPIO_Init+0x260>)
 8000848:	f001 ff3e 	bl	80026c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE7 PE8 PE10 PE13 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_10|GPIO_PIN_13;
 800084c:	f44f 5316 	mov.w	r3, #9600	@ 0x2580
 8000850:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000852:	2301      	movs	r3, #1
 8000854:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000856:	2300      	movs	r3, #0
 8000858:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800085a:	2300      	movs	r3, #0
 800085c:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800085e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000862:	4619      	mov	r1, r3
 8000864:	4831      	ldr	r0, [pc, #196]	@ (800092c <MX_GPIO_Init+0x264>)
 8000866:	f001 ff2f 	bl	80026c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE9 PE11 */
  GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11;
 800086a:	f44f 6320 	mov.w	r3, #2560	@ 0xa00
 800086e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000870:	2300      	movs	r3, #0
 8000872:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000874:	2301      	movs	r3, #1
 8000876:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000878:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800087c:	4619      	mov	r1, r3
 800087e:	482b      	ldr	r0, [pc, #172]	@ (800092c <MX_GPIO_Init+0x264>)
 8000880:	f001 ff22 	bl	80026c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB10 PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_8;
 8000884:	f44f 63a0 	mov.w	r3, #1280	@ 0x500
 8000888:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800088a:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800088e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000890:	2300      	movs	r3, #0
 8000892:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000894:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000898:	4619      	mov	r1, r3
 800089a:	4822      	ldr	r0, [pc, #136]	@ (8000924 <MX_GPIO_Init+0x25c>)
 800089c:	f001 ff14 	bl	80026c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : CS_Pin DC_Pin RESET_Pin */
  GPIO_InitStruct.Pin = CS_Pin|DC_Pin|RESET_Pin;
 80008a0:	f44f 63e0 	mov.w	r3, #1792	@ 0x700
 80008a4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008a6:	2301      	movs	r3, #1
 80008a8:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008aa:	2300      	movs	r3, #0
 80008ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008ae:	2300      	movs	r3, #0
 80008b0:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80008b2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80008b6:	4619      	mov	r1, r3
 80008b8:	481d      	ldr	r0, [pc, #116]	@ (8000930 <MX_GPIO_Init+0x268>)
 80008ba:	f001 ff05 	bl	80026c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG9 PG14 */
  GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_14;
 80008be:	f44f 4384 	mov.w	r3, #16896	@ 0x4200
 80008c2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008c4:	2301      	movs	r3, #1
 80008c6:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008c8:	2300      	movs	r3, #0
 80008ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008cc:	2300      	movs	r3, #0
 80008ce:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80008d0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80008d4:	4619      	mov	r1, r3
 80008d6:	4817      	ldr	r0, [pc, #92]	@ (8000934 <MX_GPIO_Init+0x26c>)
 80008d8:	f001 fef6 	bl	80026c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 80008dc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80008e0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80008e2:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80008e6:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e8:	2300      	movs	r3, #0
 80008ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008ec:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80008f0:	4619      	mov	r1, r3
 80008f2:	480c      	ldr	r0, [pc, #48]	@ (8000924 <MX_GPIO_Init+0x25c>)
 80008f4:	f001 fee8 	bl	80026c8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 1, 0);
 80008f8:	2200      	movs	r2, #0
 80008fa:	2101      	movs	r1, #1
 80008fc:	2017      	movs	r0, #23
 80008fe:	f001 feac 	bl	800265a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000902:	2017      	movs	r0, #23
 8000904:	f001 fec5 	bl	8002692 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 1, 0);
 8000908:	2200      	movs	r2, #0
 800090a:	2101      	movs	r1, #1
 800090c:	2028      	movs	r0, #40	@ 0x28
 800090e:	f001 fea4 	bl	800265a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000912:	2028      	movs	r0, #40	@ 0x28
 8000914:	f001 febd 	bl	8002692 <HAL_NVIC_EnableIRQ>

}
 8000918:	bf00      	nop
 800091a:	3738      	adds	r7, #56	@ 0x38
 800091c:	46bd      	mov	sp, r7
 800091e:	bd80      	pop	{r7, pc}
 8000920:	40023800 	.word	0x40023800
 8000924:	40020400 	.word	0x40020400
 8000928:	40021400 	.word	0x40021400
 800092c:	40021000 	.word	0x40021000
 8000930:	40020800 	.word	0x40020800
 8000934:	40021800 	.word	0x40021800

08000938 <ILI9341_Select>:

/**
 * @brief Select the ILI9341 display
 * @param ili9341 Pointer to ILI9341 handle structure
 */
static void ILI9341_Select(const ILI9341_HandleTypeDef* ili9341) {
 8000938:	b580      	push	{r7, lr}
 800093a:	b082      	sub	sp, #8
 800093c:	af00      	add	r7, sp, #0
 800093e:	6078      	str	r0, [r7, #4]
    HAL_GPIO_WritePin(ili9341->cs_port, ili9341->cs_pin, GPIO_PIN_RESET);
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	6858      	ldr	r0, [r3, #4]
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	891b      	ldrh	r3, [r3, #8]
 8000948:	2200      	movs	r2, #0
 800094a:	4619      	mov	r1, r3
 800094c:	f002 f880 	bl	8002a50 <HAL_GPIO_WritePin>
}
 8000950:	bf00      	nop
 8000952:	3708      	adds	r7, #8
 8000954:	46bd      	mov	sp, r7
 8000956:	bd80      	pop	{r7, pc}

08000958 <ILI9341_Deselect>:

void ILI9341_Deselect(const ILI9341_HandleTypeDef* ili9341) {
 8000958:	b580      	push	{r7, lr}
 800095a:	b082      	sub	sp, #8
 800095c:	af00      	add	r7, sp, #0
 800095e:	6078      	str	r0, [r7, #4]
    HAL_GPIO_WritePin(ili9341->cs_port, ili9341->cs_pin, GPIO_PIN_SET);
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	6858      	ldr	r0, [r3, #4]
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	891b      	ldrh	r3, [r3, #8]
 8000968:	2201      	movs	r2, #1
 800096a:	4619      	mov	r1, r3
 800096c:	f002 f870 	bl	8002a50 <HAL_GPIO_WritePin>
}
 8000970:	bf00      	nop
 8000972:	3708      	adds	r7, #8
 8000974:	46bd      	mov	sp, r7
 8000976:	bd80      	pop	{r7, pc}

08000978 <ILI9341_Reset>:

/**
 * @brief Reset the ILI9341 display
 * @param ili9341 Pointer to ILI9341 handle structure
 */
static void ILI9341_Reset(const ILI9341_HandleTypeDef* ili9341) {
 8000978:	b580      	push	{r7, lr}
 800097a:	b082      	sub	sp, #8
 800097c:	af00      	add	r7, sp, #0
 800097e:	6078      	str	r0, [r7, #4]
    HAL_GPIO_WritePin(ili9341->rst_port, ili9341->rst_pin, GPIO_PIN_RESET);
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	6958      	ldr	r0, [r3, #20]
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	8b1b      	ldrh	r3, [r3, #24]
 8000988:	2200      	movs	r2, #0
 800098a:	4619      	mov	r1, r3
 800098c:	f002 f860 	bl	8002a50 <HAL_GPIO_WritePin>
    HAL_Delay(5);
 8000990:	2005      	movs	r0, #5
 8000992:	f001 fd63 	bl	800245c <HAL_Delay>
    HAL_GPIO_WritePin(ili9341->rst_port, ili9341->rst_pin, GPIO_PIN_SET);
 8000996:	687b      	ldr	r3, [r7, #4]
 8000998:	6958      	ldr	r0, [r3, #20]
 800099a:	687b      	ldr	r3, [r7, #4]
 800099c:	8b1b      	ldrh	r3, [r3, #24]
 800099e:	2201      	movs	r2, #1
 80009a0:	4619      	mov	r1, r3
 80009a2:	f002 f855 	bl	8002a50 <HAL_GPIO_WritePin>
}
 80009a6:	bf00      	nop
 80009a8:	3708      	adds	r7, #8
 80009aa:	46bd      	mov	sp, r7
 80009ac:	bd80      	pop	{r7, pc}

080009ae <ILI9341_WriteCommand>:
/**
 * @brief Write a command to the ILI9341 display
 * @param ili9341 Pointer to ILI9341 handle structure
 * @param cmd Command byte to write
 */
static void ILI9341_WriteCommand(const ILI9341_HandleTypeDef* ili9341, uint8_t cmd) {
 80009ae:	b580      	push	{r7, lr}
 80009b0:	b082      	sub	sp, #8
 80009b2:	af00      	add	r7, sp, #0
 80009b4:	6078      	str	r0, [r7, #4]
 80009b6:	460b      	mov	r3, r1
 80009b8:	70fb      	strb	r3, [r7, #3]
    HAL_GPIO_WritePin(ili9341->dc_port, ili9341->dc_pin, GPIO_PIN_RESET);
 80009ba:	687b      	ldr	r3, [r7, #4]
 80009bc:	68d8      	ldr	r0, [r3, #12]
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	8a1b      	ldrh	r3, [r3, #16]
 80009c2:	2200      	movs	r2, #0
 80009c4:	4619      	mov	r1, r3
 80009c6:	f002 f843 	bl	8002a50 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(ili9341->spi_handle, &cmd, sizeof(cmd), HAL_MAX_DELAY);
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	6818      	ldr	r0, [r3, #0]
 80009ce:	1cf9      	adds	r1, r7, #3
 80009d0:	f04f 33ff 	mov.w	r3, #4294967295
 80009d4:	2201      	movs	r2, #1
 80009d6:	f003 fa74 	bl	8003ec2 <HAL_SPI_Transmit>
}
 80009da:	bf00      	nop
 80009dc:	3708      	adds	r7, #8
 80009de:	46bd      	mov	sp, r7
 80009e0:	bd80      	pop	{r7, pc}

080009e2 <ILI9341_WriteData>:
 * @brief Write data to the ILI9341 display
 * @param ili9341 Pointer to ILI9341 handle structure
 * @param buff Pointer to the data buffer
 * @param bufferSize Size of the data buffer
 */
static void ILI9341_WriteData(const ILI9341_HandleTypeDef* ili9341, uint8_t* buff, size_t bufferSize) {
 80009e2:	b580      	push	{r7, lr}
 80009e4:	b086      	sub	sp, #24
 80009e6:	af00      	add	r7, sp, #0
 80009e8:	60f8      	str	r0, [r7, #12]
 80009ea:	60b9      	str	r1, [r7, #8]
 80009ec:	607a      	str	r2, [r7, #4]
    HAL_GPIO_WritePin(ili9341->dc_port, ili9341->dc_pin, GPIO_PIN_SET);
 80009ee:	68fb      	ldr	r3, [r7, #12]
 80009f0:	68d8      	ldr	r0, [r3, #12]
 80009f2:	68fb      	ldr	r3, [r7, #12]
 80009f4:	8a1b      	ldrh	r3, [r3, #16]
 80009f6:	2201      	movs	r2, #1
 80009f8:	4619      	mov	r1, r3
 80009fa:	f002 f829 	bl	8002a50 <HAL_GPIO_WritePin>

    // split data in small chunks because HAL can't send more then 64K at once
    while (bufferSize > 0) {
 80009fe:	e016      	b.n	8000a2e <ILI9341_WriteData+0x4c>
        uint16_t chunkSize = bufferSize > 32768 ? 32768 : bufferSize;
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8000a06:	bf28      	it	cs
 8000a08:	f44f 4300 	movcs.w	r3, #32768	@ 0x8000
 8000a0c:	82fb      	strh	r3, [r7, #22]
        HAL_SPI_Transmit(ili9341->spi_handle, buff, chunkSize, HAL_MAX_DELAY);
 8000a0e:	68fb      	ldr	r3, [r7, #12]
 8000a10:	6818      	ldr	r0, [r3, #0]
 8000a12:	8afa      	ldrh	r2, [r7, #22]
 8000a14:	f04f 33ff 	mov.w	r3, #4294967295
 8000a18:	68b9      	ldr	r1, [r7, #8]
 8000a1a:	f003 fa52 	bl	8003ec2 <HAL_SPI_Transmit>
        buff += chunkSize;
 8000a1e:	8afb      	ldrh	r3, [r7, #22]
 8000a20:	68ba      	ldr	r2, [r7, #8]
 8000a22:	4413      	add	r3, r2
 8000a24:	60bb      	str	r3, [r7, #8]
        bufferSize -= chunkSize;
 8000a26:	8afb      	ldrh	r3, [r7, #22]
 8000a28:	687a      	ldr	r2, [r7, #4]
 8000a2a:	1ad3      	subs	r3, r2, r3
 8000a2c:	607b      	str	r3, [r7, #4]
    while (bufferSize > 0) {
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	2b00      	cmp	r3, #0
 8000a32:	d1e5      	bne.n	8000a00 <ILI9341_WriteData+0x1e>
    }
}
 8000a34:	bf00      	nop
 8000a36:	bf00      	nop
 8000a38:	3718      	adds	r7, #24
 8000a3a:	46bd      	mov	sp, r7
 8000a3c:	bd80      	pop	{r7, pc}
	...

08000a40 <ILI9341_Init>:
    GPIO_TypeDef* rst_port,
    uint16_t rst_pin,
    int_fast8_t rotation,
    int_fast16_t width,
    int_fast16_t height
) {
 8000a40:	b5b0      	push	{r4, r5, r7, lr}
 8000a42:	b0ae      	sub	sp, #184	@ 0xb8
 8000a44:	af00      	add	r7, sp, #0
 8000a46:	60f8      	str	r0, [r7, #12]
 8000a48:	60b9      	str	r1, [r7, #8]
 8000a4a:	607a      	str	r2, [r7, #4]
 8000a4c:	807b      	strh	r3, [r7, #2]
    width = abs(width);
 8000a4e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8000a52:	2b00      	cmp	r3, #0
 8000a54:	bfb8      	it	lt
 8000a56:	425b      	neglt	r3, r3
 8000a58:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    height = abs(height);
 8000a5c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8000a60:	2b00      	cmp	r3, #0
 8000a62:	bfb8      	it	lt
 8000a64:	425b      	neglt	r3, r3
 8000a66:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0

    const ILI9341_HandleTypeDef ili9341_instance = {
 8000a6a:	68bb      	ldr	r3, [r7, #8]
 8000a6c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8000a76:	887b      	ldrh	r3, [r7, #2]
 8000a78:	f8a7 3090 	strh.w	r3, [r7, #144]	@ 0x90
 8000a7c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8000a80:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8000a84:	f8b7 30cc 	ldrh.w	r3, [r7, #204]	@ 0xcc
 8000a88:	f8a7 3098 	strh.w	r3, [r7, #152]	@ 0x98
 8000a8c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8000a90:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8000a94:	f8b7 30d4 	ldrh.w	r3, [r7, #212]	@ 0xd4
 8000a98:	f8a7 30a0 	strh.w	r3, [r7, #160]	@ 0xa0
 8000a9c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8000aa0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8000aa4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8000aa8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8000aac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8000ab0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
        .rotation = rotation,
        .width = width,
        .height = height
    };

    const ILI9341_HandleTypeDef* ili9341 = &ili9341_instance;
 8000ab4:	f107 0388 	add.w	r3, r7, #136	@ 0x88
 8000ab8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

    ILI9341_Select(ili9341);
 8000abc:	f8d7 00b4 	ldr.w	r0, [r7, #180]	@ 0xb4
 8000ac0:	f7ff ff3a 	bl	8000938 <ILI9341_Select>
    ILI9341_Reset(ili9341);
 8000ac4:	f8d7 00b4 	ldr.w	r0, [r7, #180]	@ 0xb4
 8000ac8:	f7ff ff56 	bl	8000978 <ILI9341_Reset>
        OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
        SOFTWARE.
    */

    // SOFTWARE RESET
    ILI9341_WriteCommand(ili9341, 0x01);
 8000acc:	2101      	movs	r1, #1
 8000ace:	f8d7 00b4 	ldr.w	r0, [r7, #180]	@ 0xb4
 8000ad2:	f7ff ff6c 	bl	80009ae <ILI9341_WriteCommand>
    HAL_Delay(1000);
 8000ad6:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000ada:	f001 fcbf 	bl	800245c <HAL_Delay>

    // POWER CONTROL A
    ILI9341_WriteCommand(ili9341, 0xCB);
 8000ade:	21cb      	movs	r1, #203	@ 0xcb
 8000ae0:	f8d7 00b4 	ldr.w	r0, [r7, #180]	@ 0xb4
 8000ae4:	f7ff ff63 	bl	80009ae <ILI9341_WriteCommand>
    {
        uint8_t data[] = {0x39, 0x2C, 0x00, 0x34, 0x02};
 8000ae8:	4ad9      	ldr	r2, [pc, #868]	@ (8000e50 <ILI9341_Init+0x410>)
 8000aea:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 8000aee:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000af2:	6018      	str	r0, [r3, #0]
 8000af4:	3304      	adds	r3, #4
 8000af6:	7019      	strb	r1, [r3, #0]
        ILI9341_WriteData(ili9341, data, sizeof(data));
 8000af8:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 8000afc:	2205      	movs	r2, #5
 8000afe:	4619      	mov	r1, r3
 8000b00:	f8d7 00b4 	ldr.w	r0, [r7, #180]	@ 0xb4
 8000b04:	f7ff ff6d 	bl	80009e2 <ILI9341_WriteData>
    }

    // POWER CONTROL B
    ILI9341_WriteCommand(ili9341, 0xCF);
 8000b08:	21cf      	movs	r1, #207	@ 0xcf
 8000b0a:	f8d7 00b4 	ldr.w	r0, [r7, #180]	@ 0xb4
 8000b0e:	f7ff ff4e 	bl	80009ae <ILI9341_WriteCommand>
    {
        uint8_t data[] = {0x00, 0xC1, 0x30};
 8000b12:	4ad0      	ldr	r2, [pc, #832]	@ (8000e54 <ILI9341_Init+0x414>)
 8000b14:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8000b18:	6812      	ldr	r2, [r2, #0]
 8000b1a:	4611      	mov	r1, r2
 8000b1c:	8019      	strh	r1, [r3, #0]
 8000b1e:	3302      	adds	r3, #2
 8000b20:	0c12      	lsrs	r2, r2, #16
 8000b22:	701a      	strb	r2, [r3, #0]
        ILI9341_WriteData(ili9341, data, sizeof(data));
 8000b24:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8000b28:	2203      	movs	r2, #3
 8000b2a:	4619      	mov	r1, r3
 8000b2c:	f8d7 00b4 	ldr.w	r0, [r7, #180]	@ 0xb4
 8000b30:	f7ff ff57 	bl	80009e2 <ILI9341_WriteData>
    }

    // DRIVER TIMING CONTROL A
    ILI9341_WriteCommand(ili9341, 0xE8);
 8000b34:	21e8      	movs	r1, #232	@ 0xe8
 8000b36:	f8d7 00b4 	ldr.w	r0, [r7, #180]	@ 0xb4
 8000b3a:	f7ff ff38 	bl	80009ae <ILI9341_WriteCommand>
    {
        uint8_t data[] = {0x85, 0x00, 0x78};
 8000b3e:	4ac6      	ldr	r2, [pc, #792]	@ (8000e58 <ILI9341_Init+0x418>)
 8000b40:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 8000b44:	6812      	ldr	r2, [r2, #0]
 8000b46:	4611      	mov	r1, r2
 8000b48:	8019      	strh	r1, [r3, #0]
 8000b4a:	3302      	adds	r3, #2
 8000b4c:	0c12      	lsrs	r2, r2, #16
 8000b4e:	701a      	strb	r2, [r3, #0]
        ILI9341_WriteData(ili9341, data, sizeof(data));
 8000b50:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 8000b54:	2203      	movs	r2, #3
 8000b56:	4619      	mov	r1, r3
 8000b58:	f8d7 00b4 	ldr.w	r0, [r7, #180]	@ 0xb4
 8000b5c:	f7ff ff41 	bl	80009e2 <ILI9341_WriteData>
    }

    // DRIVER TIMING CONTROL B
    ILI9341_WriteCommand(ili9341, 0xEA);
 8000b60:	21ea      	movs	r1, #234	@ 0xea
 8000b62:	f8d7 00b4 	ldr.w	r0, [r7, #180]	@ 0xb4
 8000b66:	f7ff ff22 	bl	80009ae <ILI9341_WriteCommand>
    {
        uint8_t data[] = {0x00, 0x00};
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	f8a7 3074 	strh.w	r3, [r7, #116]	@ 0x74
        ILI9341_WriteData(ili9341, data, sizeof(data));
 8000b70:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8000b74:	2202      	movs	r2, #2
 8000b76:	4619      	mov	r1, r3
 8000b78:	f8d7 00b4 	ldr.w	r0, [r7, #180]	@ 0xb4
 8000b7c:	f7ff ff31 	bl	80009e2 <ILI9341_WriteData>
    }

    // POWER ON SEQUENCE CONTROL
    ILI9341_WriteCommand(ili9341, 0xED);
 8000b80:	21ed      	movs	r1, #237	@ 0xed
 8000b82:	f8d7 00b4 	ldr.w	r0, [r7, #180]	@ 0xb4
 8000b86:	f7ff ff12 	bl	80009ae <ILI9341_WriteCommand>
    {
        uint8_t data[] = {0x64, 0x03, 0x12, 0x81};
 8000b8a:	4bb4      	ldr	r3, [pc, #720]	@ (8000e5c <ILI9341_Init+0x41c>)
 8000b8c:	673b      	str	r3, [r7, #112]	@ 0x70
        ILI9341_WriteData(ili9341, data, sizeof(data));
 8000b8e:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8000b92:	2204      	movs	r2, #4
 8000b94:	4619      	mov	r1, r3
 8000b96:	f8d7 00b4 	ldr.w	r0, [r7, #180]	@ 0xb4
 8000b9a:	f7ff ff22 	bl	80009e2 <ILI9341_WriteData>
    }

    // PUMP RATIO CONTROL
    ILI9341_WriteCommand(ili9341, 0xF7);
 8000b9e:	21f7      	movs	r1, #247	@ 0xf7
 8000ba0:	f8d7 00b4 	ldr.w	r0, [r7, #180]	@ 0xb4
 8000ba4:	f7ff ff03 	bl	80009ae <ILI9341_WriteCommand>
    {
        uint8_t data[] = {0x20};
 8000ba8:	2320      	movs	r3, #32
 8000baa:	f887 306c 	strb.w	r3, [r7, #108]	@ 0x6c
        ILI9341_WriteData(ili9341, data, sizeof(data));
 8000bae:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8000bb2:	2201      	movs	r2, #1
 8000bb4:	4619      	mov	r1, r3
 8000bb6:	f8d7 00b4 	ldr.w	r0, [r7, #180]	@ 0xb4
 8000bba:	f7ff ff12 	bl	80009e2 <ILI9341_WriteData>
    }

    // POWER CONTROL,VRH[5:0]
    ILI9341_WriteCommand(ili9341, 0xC0);
 8000bbe:	21c0      	movs	r1, #192	@ 0xc0
 8000bc0:	f8d7 00b4 	ldr.w	r0, [r7, #180]	@ 0xb4
 8000bc4:	f7ff fef3 	bl	80009ae <ILI9341_WriteCommand>
    {
        uint8_t data[] = {0x23};
 8000bc8:	2323      	movs	r3, #35	@ 0x23
 8000bca:	f887 3068 	strb.w	r3, [r7, #104]	@ 0x68
        ILI9341_WriteData(ili9341, data, sizeof(data));
 8000bce:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8000bd2:	2201      	movs	r2, #1
 8000bd4:	4619      	mov	r1, r3
 8000bd6:	f8d7 00b4 	ldr.w	r0, [r7, #180]	@ 0xb4
 8000bda:	f7ff ff02 	bl	80009e2 <ILI9341_WriteData>
    }

    // POWER CONTROL,SAP[2:0];BT[3:0]
    ILI9341_WriteCommand(ili9341, 0xC1);
 8000bde:	21c1      	movs	r1, #193	@ 0xc1
 8000be0:	f8d7 00b4 	ldr.w	r0, [r7, #180]	@ 0xb4
 8000be4:	f7ff fee3 	bl	80009ae <ILI9341_WriteCommand>
    {
        uint8_t data[] = {0x10};
 8000be8:	2310      	movs	r3, #16
 8000bea:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
        ILI9341_WriteData(ili9341, data, sizeof(data));
 8000bee:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000bf2:	2201      	movs	r2, #1
 8000bf4:	4619      	mov	r1, r3
 8000bf6:	f8d7 00b4 	ldr.w	r0, [r7, #180]	@ 0xb4
 8000bfa:	f7ff fef2 	bl	80009e2 <ILI9341_WriteData>
    }

    // VCM CONTROL
    ILI9341_WriteCommand(ili9341, 0xC5);
 8000bfe:	21c5      	movs	r1, #197	@ 0xc5
 8000c00:	f8d7 00b4 	ldr.w	r0, [r7, #180]	@ 0xb4
 8000c04:	f7ff fed3 	bl	80009ae <ILI9341_WriteCommand>
    {
        uint8_t data[] = {0x3E, 0x28};
 8000c08:	f642 033e 	movw	r3, #10302	@ 0x283e
 8000c0c:	f8a7 3060 	strh.w	r3, [r7, #96]	@ 0x60
        ILI9341_WriteData(ili9341, data, sizeof(data));
 8000c10:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8000c14:	2202      	movs	r2, #2
 8000c16:	4619      	mov	r1, r3
 8000c18:	f8d7 00b4 	ldr.w	r0, [r7, #180]	@ 0xb4
 8000c1c:	f7ff fee1 	bl	80009e2 <ILI9341_WriteData>
    }

    // VCM CONTROL 2
    ILI9341_WriteCommand(ili9341, 0xC7);
 8000c20:	21c7      	movs	r1, #199	@ 0xc7
 8000c22:	f8d7 00b4 	ldr.w	r0, [r7, #180]	@ 0xb4
 8000c26:	f7ff fec2 	bl	80009ae <ILI9341_WriteCommand>
    {
        uint8_t data[] = {0x86};
 8000c2a:	2386      	movs	r3, #134	@ 0x86
 8000c2c:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
        ILI9341_WriteData(ili9341, data, sizeof(data));
 8000c30:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8000c34:	2201      	movs	r2, #1
 8000c36:	4619      	mov	r1, r3
 8000c38:	f8d7 00b4 	ldr.w	r0, [r7, #180]	@ 0xb4
 8000c3c:	f7ff fed1 	bl	80009e2 <ILI9341_WriteData>
    }

    // MEMORY ACCESS CONTROL
    ILI9341_WriteCommand(ili9341, 0x36);
 8000c40:	2136      	movs	r1, #54	@ 0x36
 8000c42:	f8d7 00b4 	ldr.w	r0, [r7, #180]	@ 0xb4
 8000c46:	f7ff feb2 	bl	80009ae <ILI9341_WriteCommand>
    {
        uint8_t data[] = {0x48};
 8000c4a:	2348      	movs	r3, #72	@ 0x48
 8000c4c:	f887 3058 	strb.w	r3, [r7, #88]	@ 0x58
        ILI9341_WriteData(ili9341, data, sizeof(data));
 8000c50:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8000c54:	2201      	movs	r2, #1
 8000c56:	4619      	mov	r1, r3
 8000c58:	f8d7 00b4 	ldr.w	r0, [r7, #180]	@ 0xb4
 8000c5c:	f7ff fec1 	bl	80009e2 <ILI9341_WriteData>
    }

    // PIXEL FORMAT
    ILI9341_WriteCommand(ili9341, 0x3A);
 8000c60:	213a      	movs	r1, #58	@ 0x3a
 8000c62:	f8d7 00b4 	ldr.w	r0, [r7, #180]	@ 0xb4
 8000c66:	f7ff fea2 	bl	80009ae <ILI9341_WriteCommand>
    {
        uint8_t data[] = {0x55};
 8000c6a:	2355      	movs	r3, #85	@ 0x55
 8000c6c:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
        ILI9341_WriteData(ili9341, data, sizeof(data));
 8000c70:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000c74:	2201      	movs	r2, #1
 8000c76:	4619      	mov	r1, r3
 8000c78:	f8d7 00b4 	ldr.w	r0, [r7, #180]	@ 0xb4
 8000c7c:	f7ff feb1 	bl	80009e2 <ILI9341_WriteData>
    }

    // FRAME RATIO CONTROL, STANDARD RGB COLOR
    ILI9341_WriteCommand(ili9341, 0xB1);
 8000c80:	21b1      	movs	r1, #177	@ 0xb1
 8000c82:	f8d7 00b4 	ldr.w	r0, [r7, #180]	@ 0xb4
 8000c86:	f7ff fe92 	bl	80009ae <ILI9341_WriteCommand>
    {
        uint8_t data[] = {0x00, 0x18};
 8000c8a:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8000c8e:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50
        ILI9341_WriteData(ili9341, data, sizeof(data));
 8000c92:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8000c96:	2202      	movs	r2, #2
 8000c98:	4619      	mov	r1, r3
 8000c9a:	f8d7 00b4 	ldr.w	r0, [r7, #180]	@ 0xb4
 8000c9e:	f7ff fea0 	bl	80009e2 <ILI9341_WriteData>
    }

    // DISPLAY FUNCTION CONTROL
    ILI9341_WriteCommand(ili9341, 0xB6);
 8000ca2:	21b6      	movs	r1, #182	@ 0xb6
 8000ca4:	f8d7 00b4 	ldr.w	r0, [r7, #180]	@ 0xb4
 8000ca8:	f7ff fe81 	bl	80009ae <ILI9341_WriteCommand>
    {
        uint8_t data[] = {0x08, 0x82, 0x27};
 8000cac:	4a6c      	ldr	r2, [pc, #432]	@ (8000e60 <ILI9341_Init+0x420>)
 8000cae:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8000cb2:	6812      	ldr	r2, [r2, #0]
 8000cb4:	4611      	mov	r1, r2
 8000cb6:	8019      	strh	r1, [r3, #0]
 8000cb8:	3302      	adds	r3, #2
 8000cba:	0c12      	lsrs	r2, r2, #16
 8000cbc:	701a      	strb	r2, [r3, #0]
        ILI9341_WriteData(ili9341, data, sizeof(data));
 8000cbe:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8000cc2:	2203      	movs	r2, #3
 8000cc4:	4619      	mov	r1, r3
 8000cc6:	f8d7 00b4 	ldr.w	r0, [r7, #180]	@ 0xb4
 8000cca:	f7ff fe8a 	bl	80009e2 <ILI9341_WriteData>
    }

    // 3GAMMA FUNCTION DISABLE
    ILI9341_WriteCommand(ili9341, 0xF2);
 8000cce:	21f2      	movs	r1, #242	@ 0xf2
 8000cd0:	f8d7 00b4 	ldr.w	r0, [r7, #180]	@ 0xb4
 8000cd4:	f7ff fe6b 	bl	80009ae <ILI9341_WriteCommand>
    {
        uint8_t data[] = {0x00};
 8000cd8:	2300      	movs	r3, #0
 8000cda:	f887 3048 	strb.w	r3, [r7, #72]	@ 0x48
        ILI9341_WriteData(ili9341, data, sizeof(data));
 8000cde:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8000ce2:	2201      	movs	r2, #1
 8000ce4:	4619      	mov	r1, r3
 8000ce6:	f8d7 00b4 	ldr.w	r0, [r7, #180]	@ 0xb4
 8000cea:	f7ff fe7a 	bl	80009e2 <ILI9341_WriteData>
    }

    // GAMMA CURVE SELECTED
    ILI9341_WriteCommand(ili9341, 0x26);
 8000cee:	2126      	movs	r1, #38	@ 0x26
 8000cf0:	f8d7 00b4 	ldr.w	r0, [r7, #180]	@ 0xb4
 8000cf4:	f7ff fe5b 	bl	80009ae <ILI9341_WriteCommand>
    {
        uint8_t data[] = {0x01};
 8000cf8:	2301      	movs	r3, #1
 8000cfa:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
        ILI9341_WriteData(ili9341, data, sizeof(data));
 8000cfe:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8000d02:	2201      	movs	r2, #1
 8000d04:	4619      	mov	r1, r3
 8000d06:	f8d7 00b4 	ldr.w	r0, [r7, #180]	@ 0xb4
 8000d0a:	f7ff fe6a 	bl	80009e2 <ILI9341_WriteData>
    }

    // POSITIVE GAMMA CORRECTION
    ILI9341_WriteCommand(ili9341, 0xE0);
 8000d0e:	21e0      	movs	r1, #224	@ 0xe0
 8000d10:	f8d7 00b4 	ldr.w	r0, [r7, #180]	@ 0xb4
 8000d14:	f7ff fe4b 	bl	80009ae <ILI9341_WriteCommand>
    {
        uint8_t data[] = {0x0F, 0x31, 0x2B, 0x0C, 0x0E, 0x08, 0x4E, 0xF1, 0x37, 0x07, 0x10, 0x03, 0x0E, 0x09, 0x00};
 8000d18:	4b52      	ldr	r3, [pc, #328]	@ (8000e64 <ILI9341_Init+0x424>)
 8000d1a:	f107 0434 	add.w	r4, r7, #52	@ 0x34
 8000d1e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000d20:	c407      	stmia	r4!, {r0, r1, r2}
 8000d22:	8023      	strh	r3, [r4, #0]
 8000d24:	3402      	adds	r4, #2
 8000d26:	0c1b      	lsrs	r3, r3, #16
 8000d28:	7023      	strb	r3, [r4, #0]
        ILI9341_WriteData(ili9341, data, sizeof(data));
 8000d2a:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8000d2e:	220f      	movs	r2, #15
 8000d30:	4619      	mov	r1, r3
 8000d32:	f8d7 00b4 	ldr.w	r0, [r7, #180]	@ 0xb4
 8000d36:	f7ff fe54 	bl	80009e2 <ILI9341_WriteData>
    }

    // NEGATIVE GAMMA CORRECTION
    ILI9341_WriteCommand(ili9341, 0xE1);
 8000d3a:	21e1      	movs	r1, #225	@ 0xe1
 8000d3c:	f8d7 00b4 	ldr.w	r0, [r7, #180]	@ 0xb4
 8000d40:	f7ff fe35 	bl	80009ae <ILI9341_WriteCommand>
    {
        uint8_t data[] = {0x00, 0x0E, 0x14, 0x03, 0x11, 0x07, 0x31, 0xC1, 0x48, 0x08, 0x0F, 0x0C, 0x31, 0x36, 0x0F};
 8000d44:	4b48      	ldr	r3, [pc, #288]	@ (8000e68 <ILI9341_Init+0x428>)
 8000d46:	f107 0424 	add.w	r4, r7, #36	@ 0x24
 8000d4a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000d4c:	c407      	stmia	r4!, {r0, r1, r2}
 8000d4e:	8023      	strh	r3, [r4, #0]
 8000d50:	3402      	adds	r4, #2
 8000d52:	0c1b      	lsrs	r3, r3, #16
 8000d54:	7023      	strb	r3, [r4, #0]
        ILI9341_WriteData(ili9341, data, sizeof(data));
 8000d56:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000d5a:	220f      	movs	r2, #15
 8000d5c:	4619      	mov	r1, r3
 8000d5e:	f8d7 00b4 	ldr.w	r0, [r7, #180]	@ 0xb4
 8000d62:	f7ff fe3e 	bl	80009e2 <ILI9341_WriteData>
    }

    // EXIT SLEEP
    ILI9341_WriteCommand(ili9341, 0x11);
 8000d66:	2111      	movs	r1, #17
 8000d68:	f8d7 00b4 	ldr.w	r0, [r7, #180]	@ 0xb4
 8000d6c:	f7ff fe1f 	bl	80009ae <ILI9341_WriteCommand>
    HAL_Delay(120);
 8000d70:	2078      	movs	r0, #120	@ 0x78
 8000d72:	f001 fb73 	bl	800245c <HAL_Delay>

    // TURN ON DISPLAY
    ILI9341_WriteCommand(ili9341, 0x29);
 8000d76:	2129      	movs	r1, #41	@ 0x29
 8000d78:	f8d7 00b4 	ldr.w	r0, [r7, #180]	@ 0xb4
 8000d7c:	f7ff fe17 	bl	80009ae <ILI9341_WriteCommand>

    // MADCTL
    ILI9341_WriteCommand(ili9341, 0x36);
 8000d80:	2136      	movs	r1, #54	@ 0x36
 8000d82:	f8d7 00b4 	ldr.w	r0, [r7, #180]	@ 0xb4
 8000d86:	f7ff fe12 	bl	80009ae <ILI9341_WriteCommand>
    switch (ili9341->rotation) {
 8000d8a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8000d8e:	69db      	ldr	r3, [r3, #28]
 8000d90:	2b03      	cmp	r3, #3
 8000d92:	d848      	bhi.n	8000e26 <ILI9341_Init+0x3e6>
 8000d94:	a201      	add	r2, pc, #4	@ (adr r2, 8000d9c <ILI9341_Init+0x35c>)
 8000d96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d9a:	bf00      	nop
 8000d9c:	08000dad 	.word	0x08000dad
 8000da0:	08000dcd 	.word	0x08000dcd
 8000da4:	08000deb 	.word	0x08000deb
 8000da8:	08000e09 	.word	0x08000e09
        case ILI9341_ROTATION_VERTICAL_1: {
            uint8_t rotation = ILI9341_MADCTL_MX | ILI9341_MADCTL_BGR;
 8000dac:	2348      	movs	r3, #72	@ 0x48
 8000dae:	f887 30b0 	strb.w	r3, [r7, #176]	@ 0xb0
            uint8_t data[] = {rotation};
 8000db2:	f897 30b0 	ldrb.w	r3, [r7, #176]	@ 0xb0
 8000db6:	f887 3020 	strb.w	r3, [r7, #32]
            ILI9341_WriteData(ili9341, data, sizeof(data));
 8000dba:	f107 0320 	add.w	r3, r7, #32
 8000dbe:	2201      	movs	r2, #1
 8000dc0:	4619      	mov	r1, r3
 8000dc2:	f8d7 00b4 	ldr.w	r0, [r7, #180]	@ 0xb4
 8000dc6:	f7ff fe0c 	bl	80009e2 <ILI9341_WriteData>
            break;
 8000dca:	e02d      	b.n	8000e28 <ILI9341_Init+0x3e8>
        }
        case ILI9341_ROTATION_HORIZONTAL_1: {
            uint8_t rotation = ILI9341_MADCTL_MX | ILI9341_MADCTL_MY | ILI9341_MADCTL_MV | ILI9341_MADCTL_BGR;
 8000dcc:	23e8      	movs	r3, #232	@ 0xe8
 8000dce:	f887 30b1 	strb.w	r3, [r7, #177]	@ 0xb1
            uint8_t data[] = {rotation};
 8000dd2:	f897 30b1 	ldrb.w	r3, [r7, #177]	@ 0xb1
 8000dd6:	773b      	strb	r3, [r7, #28]
            ILI9341_WriteData(ili9341, data, sizeof(data));
 8000dd8:	f107 031c 	add.w	r3, r7, #28
 8000ddc:	2201      	movs	r2, #1
 8000dde:	4619      	mov	r1, r3
 8000de0:	f8d7 00b4 	ldr.w	r0, [r7, #180]	@ 0xb4
 8000de4:	f7ff fdfd 	bl	80009e2 <ILI9341_WriteData>
            break;
 8000de8:	e01e      	b.n	8000e28 <ILI9341_Init+0x3e8>
        }
        case ILI9341_ROTATION_HORIZONTAL_2: {
            uint8_t rotation = ILI9341_MADCTL_MV | ILI9341_MADCTL_BGR;
 8000dea:	2328      	movs	r3, #40	@ 0x28
 8000dec:	f887 30b2 	strb.w	r3, [r7, #178]	@ 0xb2
            uint8_t data[] = {rotation};
 8000df0:	f897 30b2 	ldrb.w	r3, [r7, #178]	@ 0xb2
 8000df4:	763b      	strb	r3, [r7, #24]
            ILI9341_WriteData(ili9341, data, sizeof(data));
 8000df6:	f107 0318 	add.w	r3, r7, #24
 8000dfa:	2201      	movs	r2, #1
 8000dfc:	4619      	mov	r1, r3
 8000dfe:	f8d7 00b4 	ldr.w	r0, [r7, #180]	@ 0xb4
 8000e02:	f7ff fdee 	bl	80009e2 <ILI9341_WriteData>
            break;
 8000e06:	e00f      	b.n	8000e28 <ILI9341_Init+0x3e8>
        }
        case ILI9341_ROTATION_VERTICAL_2: {
            uint8_t rotation = ILI9341_MADCTL_MY | ILI9341_MADCTL_BGR;
 8000e08:	2388      	movs	r3, #136	@ 0x88
 8000e0a:	f887 30b3 	strb.w	r3, [r7, #179]	@ 0xb3
            uint8_t data[] = {rotation};
 8000e0e:	f897 30b3 	ldrb.w	r3, [r7, #179]	@ 0xb3
 8000e12:	753b      	strb	r3, [r7, #20]
            ILI9341_WriteData(ili9341, data, sizeof(data));
 8000e14:	f107 0314 	add.w	r3, r7, #20
 8000e18:	2201      	movs	r2, #1
 8000e1a:	4619      	mov	r1, r3
 8000e1c:	f8d7 00b4 	ldr.w	r0, [r7, #180]	@ 0xb4
 8000e20:	f7ff fddf 	bl	80009e2 <ILI9341_WriteData>
            break;
 8000e24:	e000      	b.n	8000e28 <ILI9341_Init+0x3e8>
        }

        default:
            break;
 8000e26:	bf00      	nop
    }

    ILI9341_Deselect(ili9341);
 8000e28:	f8d7 00b4 	ldr.w	r0, [r7, #180]	@ 0xb4
 8000e2c:	f7ff fd94 	bl	8000958 <ILI9341_Deselect>

    return ili9341_instance;
 8000e30:	68fb      	ldr	r3, [r7, #12]
 8000e32:	461d      	mov	r5, r3
 8000e34:	f107 0488 	add.w	r4, r7, #136	@ 0x88
 8000e38:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000e3a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000e3c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000e3e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000e40:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000e44:	e885 0003 	stmia.w	r5, {r0, r1}
}
 8000e48:	68f8      	ldr	r0, [r7, #12]
 8000e4a:	37b8      	adds	r7, #184	@ 0xb8
 8000e4c:	46bd      	mov	sp, r7
 8000e4e:	bdb0      	pop	{r4, r5, r7, pc}
 8000e50:	08006bfc 	.word	0x08006bfc
 8000e54:	08006c04 	.word	0x08006c04
 8000e58:	08006c08 	.word	0x08006c08
 8000e5c:	81120364 	.word	0x81120364
 8000e60:	08006c0c 	.word	0x08006c0c
 8000e64:	08006c10 	.word	0x08006c10
 8000e68:	08006c20 	.word	0x08006c20

08000e6c <ILI9341_SetAddressWindow>:
    const ILI9341_HandleTypeDef* ili9341,
    uint16_t x0,
    uint16_t y0,
    uint16_t x1,
    uint16_t y1
) {
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	b086      	sub	sp, #24
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	60f8      	str	r0, [r7, #12]
 8000e74:	4608      	mov	r0, r1
 8000e76:	4611      	mov	r1, r2
 8000e78:	461a      	mov	r2, r3
 8000e7a:	4603      	mov	r3, r0
 8000e7c:	817b      	strh	r3, [r7, #10]
 8000e7e:	460b      	mov	r3, r1
 8000e80:	813b      	strh	r3, [r7, #8]
 8000e82:	4613      	mov	r3, r2
 8000e84:	80fb      	strh	r3, [r7, #6]
    // column address set
    ILI9341_WriteCommand(ili9341, 0x2A);  // CASET
 8000e86:	212a      	movs	r1, #42	@ 0x2a
 8000e88:	68f8      	ldr	r0, [r7, #12]
 8000e8a:	f7ff fd90 	bl	80009ae <ILI9341_WriteCommand>
    {
        uint8_t data[] = {(x0 >> 8) & 0xFF, x0 & 0xFF, (x1 >> 8) & 0xFF, x1 & 0xFF};
 8000e8e:	897b      	ldrh	r3, [r7, #10]
 8000e90:	0a1b      	lsrs	r3, r3, #8
 8000e92:	b29b      	uxth	r3, r3
 8000e94:	b2db      	uxtb	r3, r3
 8000e96:	753b      	strb	r3, [r7, #20]
 8000e98:	897b      	ldrh	r3, [r7, #10]
 8000e9a:	b2db      	uxtb	r3, r3
 8000e9c:	757b      	strb	r3, [r7, #21]
 8000e9e:	88fb      	ldrh	r3, [r7, #6]
 8000ea0:	0a1b      	lsrs	r3, r3, #8
 8000ea2:	b29b      	uxth	r3, r3
 8000ea4:	b2db      	uxtb	r3, r3
 8000ea6:	75bb      	strb	r3, [r7, #22]
 8000ea8:	88fb      	ldrh	r3, [r7, #6]
 8000eaa:	b2db      	uxtb	r3, r3
 8000eac:	75fb      	strb	r3, [r7, #23]
        ILI9341_WriteData(ili9341, data, sizeof(data));
 8000eae:	f107 0314 	add.w	r3, r7, #20
 8000eb2:	2204      	movs	r2, #4
 8000eb4:	4619      	mov	r1, r3
 8000eb6:	68f8      	ldr	r0, [r7, #12]
 8000eb8:	f7ff fd93 	bl	80009e2 <ILI9341_WriteData>
    }

    // row address set
    ILI9341_WriteCommand(ili9341, 0x2B);  // RASET
 8000ebc:	212b      	movs	r1, #43	@ 0x2b
 8000ebe:	68f8      	ldr	r0, [r7, #12]
 8000ec0:	f7ff fd75 	bl	80009ae <ILI9341_WriteCommand>
    {
        uint8_t data[] = {(y0 >> 8) & 0xFF, y0 & 0xFF, (y1 >> 8) & 0xFF, y1 & 0xFF};
 8000ec4:	893b      	ldrh	r3, [r7, #8]
 8000ec6:	0a1b      	lsrs	r3, r3, #8
 8000ec8:	b29b      	uxth	r3, r3
 8000eca:	b2db      	uxtb	r3, r3
 8000ecc:	743b      	strb	r3, [r7, #16]
 8000ece:	893b      	ldrh	r3, [r7, #8]
 8000ed0:	b2db      	uxtb	r3, r3
 8000ed2:	747b      	strb	r3, [r7, #17]
 8000ed4:	8c3b      	ldrh	r3, [r7, #32]
 8000ed6:	0a1b      	lsrs	r3, r3, #8
 8000ed8:	b29b      	uxth	r3, r3
 8000eda:	b2db      	uxtb	r3, r3
 8000edc:	74bb      	strb	r3, [r7, #18]
 8000ede:	8c3b      	ldrh	r3, [r7, #32]
 8000ee0:	b2db      	uxtb	r3, r3
 8000ee2:	74fb      	strb	r3, [r7, #19]
        ILI9341_WriteData(ili9341, data, sizeof(data));
 8000ee4:	f107 0310 	add.w	r3, r7, #16
 8000ee8:	2204      	movs	r2, #4
 8000eea:	4619      	mov	r1, r3
 8000eec:	68f8      	ldr	r0, [r7, #12]
 8000eee:	f7ff fd78 	bl	80009e2 <ILI9341_WriteData>
    }

    // write to RAM
    ILI9341_WriteCommand(ili9341, 0x2C);  // RAMWR
 8000ef2:	212c      	movs	r1, #44	@ 0x2c
 8000ef4:	68f8      	ldr	r0, [r7, #12]
 8000ef6:	f7ff fd5a 	bl	80009ae <ILI9341_WriteCommand>
}
 8000efa:	bf00      	nop
 8000efc:	3718      	adds	r7, #24
 8000efe:	46bd      	mov	sp, r7
 8000f00:	bd80      	pop	{r7, pc}

08000f02 <ILI9341_FillRectangleFast>:
    int_fast16_t x,
    int_fast16_t y,
    int_fast16_t w,
    int_fast16_t h,
    uint16_t color
) {
 8000f02:	b5b0      	push	{r4, r5, r7, lr}
 8000f04:	f5ad 6d85 	sub.w	sp, sp, #1064	@ 0x428
 8000f08:	af02      	add	r7, sp, #8
 8000f0a:	f507 6484 	add.w	r4, r7, #1056	@ 0x420
 8000f0e:	f2a4 4414 	subw	r4, r4, #1044	@ 0x414
 8000f12:	6020      	str	r0, [r4, #0]
 8000f14:	f507 6084 	add.w	r0, r7, #1056	@ 0x420
 8000f18:	f5a0 6083 	sub.w	r0, r0, #1048	@ 0x418
 8000f1c:	6001      	str	r1, [r0, #0]
 8000f1e:	f507 6184 	add.w	r1, r7, #1056	@ 0x420
 8000f22:	f2a1 411c 	subw	r1, r1, #1052	@ 0x41c
 8000f26:	600a      	str	r2, [r1, #0]
 8000f28:	f507 6284 	add.w	r2, r7, #1056	@ 0x420
 8000f2c:	f5a2 6284 	sub.w	r2, r2, #1056	@ 0x420
 8000f30:	6013      	str	r3, [r2, #0]
    if (w < 0) {
 8000f32:	f507 6384 	add.w	r3, r7, #1056	@ 0x420
 8000f36:	f5a3 6384 	sub.w	r3, r3, #1056	@ 0x420
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	da1b      	bge.n	8000f78 <ILI9341_FillRectangleFast+0x76>
        w = -w;
 8000f40:	f507 6384 	add.w	r3, r7, #1056	@ 0x420
 8000f44:	f5a3 6384 	sub.w	r3, r3, #1056	@ 0x420
 8000f48:	f507 6284 	add.w	r2, r7, #1056	@ 0x420
 8000f4c:	f5a2 6284 	sub.w	r2, r2, #1056	@ 0x420
 8000f50:	6812      	ldr	r2, [r2, #0]
 8000f52:	4252      	negs	r2, r2
 8000f54:	601a      	str	r2, [r3, #0]
        x -= w - 1;
 8000f56:	f507 6384 	add.w	r3, r7, #1056	@ 0x420
 8000f5a:	f5a3 6384 	sub.w	r3, r3, #1056	@ 0x420
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	1e5a      	subs	r2, r3, #1
 8000f62:	f507 6384 	add.w	r3, r7, #1056	@ 0x420
 8000f66:	f5a3 6383 	sub.w	r3, r3, #1048	@ 0x418
 8000f6a:	f507 6184 	add.w	r1, r7, #1056	@ 0x420
 8000f6e:	f5a1 6183 	sub.w	r1, r1, #1048	@ 0x418
 8000f72:	6809      	ldr	r1, [r1, #0]
 8000f74:	1a8a      	subs	r2, r1, r2
 8000f76:	601a      	str	r2, [r3, #0]
    }

    if (h < 0) {
 8000f78:	f8d7 3430 	ldr.w	r3, [r7, #1072]	@ 0x430
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	da12      	bge.n	8000fa6 <ILI9341_FillRectangleFast+0xa4>
        h = -h;
 8000f80:	f8d7 3430 	ldr.w	r3, [r7, #1072]	@ 0x430
 8000f84:	425b      	negs	r3, r3
 8000f86:	f8c7 3430 	str.w	r3, [r7, #1072]	@ 0x430
        y -= h - 1;
 8000f8a:	f8d7 3430 	ldr.w	r3, [r7, #1072]	@ 0x430
 8000f8e:	1e5a      	subs	r2, r3, #1
 8000f90:	f507 6384 	add.w	r3, r7, #1056	@ 0x420
 8000f94:	f2a3 431c 	subw	r3, r3, #1052	@ 0x41c
 8000f98:	f507 6184 	add.w	r1, r7, #1056	@ 0x420
 8000f9c:	f2a1 411c 	subw	r1, r1, #1052	@ 0x41c
 8000fa0:	6809      	ldr	r1, [r1, #0]
 8000fa2:	1a8a      	subs	r2, r1, r2
 8000fa4:	601a      	str	r2, [r3, #0]
    }

    if (x >= ili9341->width || y >= ili9341->height || w == 0 || h == 0) return;
 8000fa6:	f507 6384 	add.w	r3, r7, #1056	@ 0x420
 8000faa:	f2a3 4314 	subw	r3, r3, #1044	@ 0x414
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	6a1b      	ldr	r3, [r3, #32]
 8000fb2:	f507 6284 	add.w	r2, r7, #1056	@ 0x420
 8000fb6:	f5a2 6283 	sub.w	r2, r2, #1048	@ 0x418
 8000fba:	6812      	ldr	r2, [r2, #0]
 8000fbc:	429a      	cmp	r2, r3
 8000fbe:	f280 812d 	bge.w	800121c <ILI9341_FillRectangleFast+0x31a>
 8000fc2:	f507 6384 	add.w	r3, r7, #1056	@ 0x420
 8000fc6:	f2a3 4314 	subw	r3, r3, #1044	@ 0x414
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000fce:	f507 6284 	add.w	r2, r7, #1056	@ 0x420
 8000fd2:	f2a2 421c 	subw	r2, r2, #1052	@ 0x41c
 8000fd6:	6812      	ldr	r2, [r2, #0]
 8000fd8:	429a      	cmp	r2, r3
 8000fda:	f280 811f 	bge.w	800121c <ILI9341_FillRectangleFast+0x31a>
 8000fde:	f507 6384 	add.w	r3, r7, #1056	@ 0x420
 8000fe2:	f5a3 6384 	sub.w	r3, r3, #1056	@ 0x420
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	f000 8117 	beq.w	800121c <ILI9341_FillRectangleFast+0x31a>
 8000fee:	f8d7 3430 	ldr.w	r3, [r7, #1072]	@ 0x430
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	f000 8112 	beq.w	800121c <ILI9341_FillRectangleFast+0x31a>

    if (x < 0) {
 8000ff8:	f507 6384 	add.w	r3, r7, #1056	@ 0x420
 8000ffc:	f5a3 6383 	sub.w	r3, r3, #1048	@ 0x418
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	2b00      	cmp	r3, #0
 8001004:	da1d      	bge.n	8001042 <ILI9341_FillRectangleFast+0x140>
        w += x;
 8001006:	f507 6384 	add.w	r3, r7, #1056	@ 0x420
 800100a:	f5a3 6384 	sub.w	r3, r3, #1056	@ 0x420
 800100e:	f507 6284 	add.w	r2, r7, #1056	@ 0x420
 8001012:	f5a2 6184 	sub.w	r1, r2, #1056	@ 0x420
 8001016:	f507 6284 	add.w	r2, r7, #1056	@ 0x420
 800101a:	f5a2 6283 	sub.w	r2, r2, #1048	@ 0x418
 800101e:	6809      	ldr	r1, [r1, #0]
 8001020:	6812      	ldr	r2, [r2, #0]
 8001022:	440a      	add	r2, r1
 8001024:	601a      	str	r2, [r3, #0]
        x = 0;
 8001026:	f507 6384 	add.w	r3, r7, #1056	@ 0x420
 800102a:	f5a3 6383 	sub.w	r3, r3, #1048	@ 0x418
 800102e:	2200      	movs	r2, #0
 8001030:	601a      	str	r2, [r3, #0]
        if (w <= 0) return;
 8001032:	f507 6384 	add.w	r3, r7, #1056	@ 0x420
 8001036:	f5a3 6384 	sub.w	r3, r3, #1056	@ 0x420
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	2b00      	cmp	r3, #0
 800103e:	f340 80ef 	ble.w	8001220 <ILI9341_FillRectangleFast+0x31e>
    }

    if (y < 0) {
 8001042:	f507 6384 	add.w	r3, r7, #1056	@ 0x420
 8001046:	f2a3 431c 	subw	r3, r3, #1052	@ 0x41c
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	2b00      	cmp	r3, #0
 800104e:	da14      	bge.n	800107a <ILI9341_FillRectangleFast+0x178>
        h += y;
 8001050:	f507 6384 	add.w	r3, r7, #1056	@ 0x420
 8001054:	f2a3 431c 	subw	r3, r3, #1052	@ 0x41c
 8001058:	f8d7 2430 	ldr.w	r2, [r7, #1072]	@ 0x430
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	4413      	add	r3, r2
 8001060:	f8c7 3430 	str.w	r3, [r7, #1072]	@ 0x430
        y = 0;
 8001064:	f507 6384 	add.w	r3, r7, #1056	@ 0x420
 8001068:	f2a3 431c 	subw	r3, r3, #1052	@ 0x41c
 800106c:	2200      	movs	r2, #0
 800106e:	601a      	str	r2, [r3, #0]
        if (h <= 0) return;
 8001070:	f8d7 3430 	ldr.w	r3, [r7, #1072]	@ 0x430
 8001074:	2b00      	cmp	r3, #0
 8001076:	f340 80d5 	ble.w	8001224 <ILI9341_FillRectangleFast+0x322>
    }

    if ((x + w - 1) >= ili9341->width) w = ili9341->width - x;
 800107a:	f507 6384 	add.w	r3, r7, #1056	@ 0x420
 800107e:	f5a3 6283 	sub.w	r2, r3, #1048	@ 0x418
 8001082:	f507 6384 	add.w	r3, r7, #1056	@ 0x420
 8001086:	f5a3 6384 	sub.w	r3, r3, #1056	@ 0x420
 800108a:	6812      	ldr	r2, [r2, #0]
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	441a      	add	r2, r3
 8001090:	f507 6384 	add.w	r3, r7, #1056	@ 0x420
 8001094:	f2a3 4314 	subw	r3, r3, #1044	@ 0x414
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	6a1b      	ldr	r3, [r3, #32]
 800109c:	429a      	cmp	r2, r3
 800109e:	dd10      	ble.n	80010c2 <ILI9341_FillRectangleFast+0x1c0>
 80010a0:	f507 6384 	add.w	r3, r7, #1056	@ 0x420
 80010a4:	f2a3 4314 	subw	r3, r3, #1044	@ 0x414
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	6a19      	ldr	r1, [r3, #32]
 80010ac:	f507 6384 	add.w	r3, r7, #1056	@ 0x420
 80010b0:	f5a3 6384 	sub.w	r3, r3, #1056	@ 0x420
 80010b4:	f507 6284 	add.w	r2, r7, #1056	@ 0x420
 80010b8:	f5a2 6283 	sub.w	r2, r2, #1048	@ 0x418
 80010bc:	6812      	ldr	r2, [r2, #0]
 80010be:	1a8a      	subs	r2, r1, r2
 80010c0:	601a      	str	r2, [r3, #0]
    if ((y + h - 1) >= ili9341->height) h = ili9341->height - y;
 80010c2:	f507 6384 	add.w	r3, r7, #1056	@ 0x420
 80010c6:	f2a3 431c 	subw	r3, r3, #1052	@ 0x41c
 80010ca:	681a      	ldr	r2, [r3, #0]
 80010cc:	f8d7 3430 	ldr.w	r3, [r7, #1072]	@ 0x430
 80010d0:	441a      	add	r2, r3
 80010d2:	f507 6384 	add.w	r3, r7, #1056	@ 0x420
 80010d6:	f2a3 4314 	subw	r3, r3, #1044	@ 0x414
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80010de:	429a      	cmp	r2, r3
 80010e0:	dd0d      	ble.n	80010fe <ILI9341_FillRectangleFast+0x1fc>
 80010e2:	f507 6384 	add.w	r3, r7, #1056	@ 0x420
 80010e6:	f2a3 4314 	subw	r3, r3, #1044	@ 0x414
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80010ee:	f507 6384 	add.w	r3, r7, #1056	@ 0x420
 80010f2:	f2a3 431c 	subw	r3, r3, #1052	@ 0x41c
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	1ad3      	subs	r3, r2, r3
 80010fa:	f8c7 3430 	str.w	r3, [r7, #1072]	@ 0x430

    uint16_t buffer[ILI9341_FILL_RECT_BUFFER_SIZE];
    size_t totalSize = w * h;
 80010fe:	f507 6384 	add.w	r3, r7, #1056	@ 0x420
 8001102:	f5a3 6384 	sub.w	r3, r3, #1056	@ 0x420
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	f8d7 2430 	ldr.w	r2, [r7, #1072]	@ 0x430
 800110c:	fb02 f303 	mul.w	r3, r2, r3
 8001110:	f8c7 341c 	str.w	r3, [r7, #1052]	@ 0x41c
    size_t chunkSize = totalSize > ILI9341_FILL_RECT_BUFFER_SIZE ? ILI9341_FILL_RECT_BUFFER_SIZE : totalSize;
 8001114:	f8d7 341c 	ldr.w	r3, [r7, #1052]	@ 0x41c
 8001118:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800111c:	bf28      	it	cs
 800111e:	f44f 7300 	movcs.w	r3, #512	@ 0x200
 8001122:	f8c7 3418 	str.w	r3, [r7, #1048]	@ 0x418

    color = (color >> 8) | (color << 8);
 8001126:	f8b7 3434 	ldrh.w	r3, [r7, #1076]	@ 0x434
 800112a:	0a1b      	lsrs	r3, r3, #8
 800112c:	b29b      	uxth	r3, r3
 800112e:	b21a      	sxth	r2, r3
 8001130:	f9b7 3434 	ldrsh.w	r3, [r7, #1076]	@ 0x434
 8001134:	021b      	lsls	r3, r3, #8
 8001136:	b21b      	sxth	r3, r3
 8001138:	4313      	orrs	r3, r2
 800113a:	b21b      	sxth	r3, r3
 800113c:	f8a7 3434 	strh.w	r3, [r7, #1076]	@ 0x434
    for (size_t i = 0; i < chunkSize; i++) { buffer[i] = color; }
 8001140:	2300      	movs	r3, #0
 8001142:	f8c7 3414 	str.w	r3, [r7, #1044]	@ 0x414
 8001146:	e00e      	b.n	8001166 <ILI9341_FillRectangleFast+0x264>
 8001148:	f507 6384 	add.w	r3, r7, #1056	@ 0x420
 800114c:	f2a3 430c 	subw	r3, r3, #1036	@ 0x40c
 8001150:	f8d7 2414 	ldr.w	r2, [r7, #1044]	@ 0x414
 8001154:	f8b7 1434 	ldrh.w	r1, [r7, #1076]	@ 0x434
 8001158:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
 800115c:	f8d7 3414 	ldr.w	r3, [r7, #1044]	@ 0x414
 8001160:	3301      	adds	r3, #1
 8001162:	f8c7 3414 	str.w	r3, [r7, #1044]	@ 0x414
 8001166:	f8d7 2414 	ldr.w	r2, [r7, #1044]	@ 0x414
 800116a:	f8d7 3418 	ldr.w	r3, [r7, #1048]	@ 0x418
 800116e:	429a      	cmp	r2, r3
 8001170:	d3ea      	bcc.n	8001148 <ILI9341_FillRectangleFast+0x246>

    ILI9341_SetAddressWindow(ili9341, x, y, x + w - 1, y + h - 1);
 8001172:	f507 6384 	add.w	r3, r7, #1056	@ 0x420
 8001176:	f5a3 6383 	sub.w	r3, r3, #1048	@ 0x418
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	b299      	uxth	r1, r3
 800117e:	f507 6384 	add.w	r3, r7, #1056	@ 0x420
 8001182:	f2a3 431c 	subw	r3, r3, #1052	@ 0x41c
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	b29c      	uxth	r4, r3
 800118a:	f507 6384 	add.w	r3, r7, #1056	@ 0x420
 800118e:	f5a3 6383 	sub.w	r3, r3, #1048	@ 0x418
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	b29a      	uxth	r2, r3
 8001196:	f507 6384 	add.w	r3, r7, #1056	@ 0x420
 800119a:	f5a3 6384 	sub.w	r3, r3, #1056	@ 0x420
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	b29b      	uxth	r3, r3
 80011a2:	4413      	add	r3, r2
 80011a4:	b29b      	uxth	r3, r3
 80011a6:	3b01      	subs	r3, #1
 80011a8:	b29d      	uxth	r5, r3
 80011aa:	f507 6384 	add.w	r3, r7, #1056	@ 0x420
 80011ae:	f2a3 431c 	subw	r3, r3, #1052	@ 0x41c
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	b29a      	uxth	r2, r3
 80011b6:	f8d7 3430 	ldr.w	r3, [r7, #1072]	@ 0x430
 80011ba:	b29b      	uxth	r3, r3
 80011bc:	4413      	add	r3, r2
 80011be:	b29b      	uxth	r3, r3
 80011c0:	3b01      	subs	r3, #1
 80011c2:	b29b      	uxth	r3, r3
 80011c4:	f507 6284 	add.w	r2, r7, #1056	@ 0x420
 80011c8:	f2a2 4014 	subw	r0, r2, #1044	@ 0x414
 80011cc:	9300      	str	r3, [sp, #0]
 80011ce:	462b      	mov	r3, r5
 80011d0:	4622      	mov	r2, r4
 80011d2:	6800      	ldr	r0, [r0, #0]
 80011d4:	f7ff fe4a 	bl	8000e6c <ILI9341_SetAddressWindow>

    while (totalSize > 0) {
 80011d8:	e01b      	b.n	8001212 <ILI9341_FillRectangleFast+0x310>
        ILI9341_WriteData(ili9341, (uint8_t*)buffer, chunkSize * 2);
 80011da:	f8d7 3418 	ldr.w	r3, [r7, #1048]	@ 0x418
 80011de:	005a      	lsls	r2, r3, #1
 80011e0:	f107 0114 	add.w	r1, r7, #20
 80011e4:	f507 6384 	add.w	r3, r7, #1056	@ 0x420
 80011e8:	f2a3 4314 	subw	r3, r3, #1044	@ 0x414
 80011ec:	6818      	ldr	r0, [r3, #0]
 80011ee:	f7ff fbf8 	bl	80009e2 <ILI9341_WriteData>
        totalSize -= chunkSize;
 80011f2:	f8d7 241c 	ldr.w	r2, [r7, #1052]	@ 0x41c
 80011f6:	f8d7 3418 	ldr.w	r3, [r7, #1048]	@ 0x418
 80011fa:	1ad3      	subs	r3, r2, r3
 80011fc:	f8c7 341c 	str.w	r3, [r7, #1052]	@ 0x41c
        chunkSize = totalSize > ILI9341_FILL_RECT_BUFFER_SIZE ? ILI9341_FILL_RECT_BUFFER_SIZE : totalSize;
 8001200:	f8d7 341c 	ldr.w	r3, [r7, #1052]	@ 0x41c
 8001204:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001208:	bf28      	it	cs
 800120a:	f44f 7300 	movcs.w	r3, #512	@ 0x200
 800120e:	f8c7 3418 	str.w	r3, [r7, #1048]	@ 0x418
    while (totalSize > 0) {
 8001212:	f8d7 341c 	ldr.w	r3, [r7, #1052]	@ 0x41c
 8001216:	2b00      	cmp	r3, #0
 8001218:	d1df      	bne.n	80011da <ILI9341_FillRectangleFast+0x2d8>
 800121a:	e004      	b.n	8001226 <ILI9341_FillRectangleFast+0x324>
    if (x >= ili9341->width || y >= ili9341->height || w == 0 || h == 0) return;
 800121c:	bf00      	nop
 800121e:	e002      	b.n	8001226 <ILI9341_FillRectangleFast+0x324>
        if (w <= 0) return;
 8001220:	bf00      	nop
 8001222:	e000      	b.n	8001226 <ILI9341_FillRectangleFast+0x324>
        if (h <= 0) return;
 8001224:	bf00      	nop
    }
}
 8001226:	f507 6784 	add.w	r7, r7, #1056	@ 0x420
 800122a:	46bd      	mov	sp, r7
 800122c:	bdb0      	pop	{r4, r5, r7, pc}

0800122e <ILI9341_FillScreen>:
    ILI9341_Select(ili9341);
    ILI9341_FillRectangleFast(ili9341, x, y, w, h, color);
    ILI9341_Deselect(ili9341);
}

void ILI9341_FillScreen(const ILI9341_HandleTypeDef* ili9341, uint16_t color) {
 800122e:	b580      	push	{r7, lr}
 8001230:	b084      	sub	sp, #16
 8001232:	af02      	add	r7, sp, #8
 8001234:	6078      	str	r0, [r7, #4]
 8001236:	460b      	mov	r3, r1
 8001238:	807b      	strh	r3, [r7, #2]
    ILI9341_Select(ili9341);
 800123a:	6878      	ldr	r0, [r7, #4]
 800123c:	f7ff fb7c 	bl	8000938 <ILI9341_Select>
    ILI9341_FillRectangleFast(ili9341, 0, 0, ili9341->width, ili9341->height, color);
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	6a19      	ldr	r1, [r3, #32]
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001248:	887a      	ldrh	r2, [r7, #2]
 800124a:	9201      	str	r2, [sp, #4]
 800124c:	9300      	str	r3, [sp, #0]
 800124e:	460b      	mov	r3, r1
 8001250:	2200      	movs	r2, #0
 8001252:	2100      	movs	r1, #0
 8001254:	6878      	ldr	r0, [r7, #4]
 8001256:	f7ff fe54 	bl	8000f02 <ILI9341_FillRectangleFast>
    ILI9341_Deselect(ili9341);
 800125a:	6878      	ldr	r0, [r7, #4]
 800125c:	f7ff fb7c 	bl	8000958 <ILI9341_Deselect>
}
 8001260:	bf00      	nop
 8001262:	3708      	adds	r7, #8
 8001264:	46bd      	mov	sp, r7
 8001266:	bd80      	pop	{r7, pc}

08001268 <ILI9341_DrawGlyphFast>:
    int_fast16_t y,
    ILI9341_GlyphDef glyph,
    uint16_t color,
    uint16_t bgColor,
    int_fast16_t scale
) {
 8001268:	b082      	sub	sp, #8
 800126a:	b5b0      	push	{r4, r5, r7, lr}
 800126c:	f5ad 6d8a 	sub.w	sp, sp, #1104	@ 0x450
 8001270:	af02      	add	r7, sp, #8
 8001272:	f507 6489 	add.w	r4, r7, #1096	@ 0x448
 8001276:	f2a4 443c 	subw	r4, r4, #1084	@ 0x43c
 800127a:	6020      	str	r0, [r4, #0]
 800127c:	f507 6089 	add.w	r0, r7, #1096	@ 0x448
 8001280:	f5a0 6088 	sub.w	r0, r0, #1088	@ 0x440
 8001284:	6001      	str	r1, [r0, #0]
 8001286:	f507 6189 	add.w	r1, r7, #1096	@ 0x448
 800128a:	f2a1 4144 	subw	r1, r1, #1092	@ 0x444
 800128e:	600a      	str	r2, [r1, #0]
 8001290:	f8c7 345c 	str.w	r3, [r7, #1116]	@ 0x45c
    int_fast16_t startX = x + glyph.bbX * scale;
 8001294:	f997 345c 	ldrsb.w	r3, [r7, #1116]	@ 0x45c
 8001298:	461a      	mov	r2, r3
 800129a:	f8d7 3470 	ldr.w	r3, [r7, #1136]	@ 0x470
 800129e:	fb02 f303 	mul.w	r3, r2, r3
 80012a2:	f507 6289 	add.w	r2, r7, #1096	@ 0x448
 80012a6:	f5a2 6288 	sub.w	r2, r2, #1088	@ 0x440
 80012aa:	6812      	ldr	r2, [r2, #0]
 80012ac:	4413      	add	r3, r2
 80012ae:	f8c7 3438 	str.w	r3, [r7, #1080]	@ 0x438
    int_fast16_t startY = y - glyph.bbY * scale - glyph.bbH * scale + 1;
 80012b2:	f997 345d 	ldrsb.w	r3, [r7, #1117]	@ 0x45d
 80012b6:	461a      	mov	r2, r3
 80012b8:	f8d7 3470 	ldr.w	r3, [r7, #1136]	@ 0x470
 80012bc:	fb02 f303 	mul.w	r3, r2, r3
 80012c0:	f507 6289 	add.w	r2, r7, #1096	@ 0x448
 80012c4:	f2a2 4244 	subw	r2, r2, #1092	@ 0x444
 80012c8:	6812      	ldr	r2, [r2, #0]
 80012ca:	1ad2      	subs	r2, r2, r3
 80012cc:	f997 345f 	ldrsb.w	r3, [r7, #1119]	@ 0x45f
 80012d0:	4619      	mov	r1, r3
 80012d2:	f8d7 3470 	ldr.w	r3, [r7, #1136]	@ 0x470
 80012d6:	fb01 f303 	mul.w	r3, r1, r3
 80012da:	1ad3      	subs	r3, r2, r3
 80012dc:	3301      	adds	r3, #1
 80012de:	f8c7 3434 	str.w	r3, [r7, #1076]	@ 0x434
    int_fast16_t endX = startX + glyph.bbW * scale - 1;
 80012e2:	f997 345e 	ldrsb.w	r3, [r7, #1118]	@ 0x45e
 80012e6:	461a      	mov	r2, r3
 80012e8:	f8d7 3470 	ldr.w	r3, [r7, #1136]	@ 0x470
 80012ec:	fb03 f202 	mul.w	r2, r3, r2
 80012f0:	f8d7 3438 	ldr.w	r3, [r7, #1080]	@ 0x438
 80012f4:	4413      	add	r3, r2
 80012f6:	3b01      	subs	r3, #1
 80012f8:	f8c7 3430 	str.w	r3, [r7, #1072]	@ 0x430
    int_fast16_t endY = startY + glyph.bbH * scale - 1;
 80012fc:	f997 345f 	ldrsb.w	r3, [r7, #1119]	@ 0x45f
 8001300:	461a      	mov	r2, r3
 8001302:	f8d7 3470 	ldr.w	r3, [r7, #1136]	@ 0x470
 8001306:	fb03 f202 	mul.w	r2, r3, r2
 800130a:	f8d7 3434 	ldr.w	r3, [r7, #1076]	@ 0x434
 800130e:	4413      	add	r3, r2
 8001310:	3b01      	subs	r3, #1
 8001312:	f8c7 342c 	str.w	r3, [r7, #1068]	@ 0x42c

    if (endX < 0 || endY < 0 || startX >= ili9341->width || startY >= ili9341->height ||
 8001316:	f8d7 3430 	ldr.w	r3, [r7, #1072]	@ 0x430
 800131a:	2b00      	cmp	r3, #0
 800131c:	f2c0 8150 	blt.w	80015c0 <ILI9341_DrawGlyphFast+0x358>
 8001320:	f8d7 342c 	ldr.w	r3, [r7, #1068]	@ 0x42c
 8001324:	2b00      	cmp	r3, #0
 8001326:	f2c0 814b 	blt.w	80015c0 <ILI9341_DrawGlyphFast+0x358>
 800132a:	f507 6389 	add.w	r3, r7, #1096	@ 0x448
 800132e:	f2a3 433c 	subw	r3, r3, #1084	@ 0x43c
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	6a1b      	ldr	r3, [r3, #32]
 8001336:	f8d7 2438 	ldr.w	r2, [r7, #1080]	@ 0x438
 800133a:	429a      	cmp	r2, r3
 800133c:	f280 8140 	bge.w	80015c0 <ILI9341_DrawGlyphFast+0x358>
 8001340:	f507 6389 	add.w	r3, r7, #1096	@ 0x448
 8001344:	f2a3 433c 	subw	r3, r3, #1084	@ 0x43c
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800134c:	f8d7 2434 	ldr.w	r2, [r7, #1076]	@ 0x434
 8001350:	429a      	cmp	r2, r3
 8001352:	f280 8135 	bge.w	80015c0 <ILI9341_DrawGlyphFast+0x358>
        (glyph.bbW == 0 || glyph.bbH == 0))
 8001356:	f997 345e 	ldrsb.w	r3, [r7, #1118]	@ 0x45e
    if (endX < 0 || endY < 0 || startX >= ili9341->width || startY >= ili9341->height ||
 800135a:	2b00      	cmp	r3, #0
 800135c:	f000 8130 	beq.w	80015c0 <ILI9341_DrawGlyphFast+0x358>
        (glyph.bbW == 0 || glyph.bbH == 0))
 8001360:	f997 345f 	ldrsb.w	r3, [r7, #1119]	@ 0x45f
 8001364:	2b00      	cmp	r3, #0
 8001366:	f000 812b 	beq.w	80015c0 <ILI9341_DrawGlyphFast+0x358>
        return;

    int_fast16_t clipStartX = startX < 0 ? -startX : 0;
 800136a:	f8d7 3438 	ldr.w	r3, [r7, #1080]	@ 0x438
 800136e:	2b00      	cmp	r3, #0
 8001370:	da03      	bge.n	800137a <ILI9341_DrawGlyphFast+0x112>
 8001372:	f8d7 3438 	ldr.w	r3, [r7, #1080]	@ 0x438
 8001376:	425b      	negs	r3, r3
 8001378:	e000      	b.n	800137c <ILI9341_DrawGlyphFast+0x114>
 800137a:	2300      	movs	r3, #0
 800137c:	f8c7 3428 	str.w	r3, [r7, #1064]	@ 0x428
    int_fast16_t clipStartY = startY < 0 ? -startY : 0;
 8001380:	f8d7 3434 	ldr.w	r3, [r7, #1076]	@ 0x434
 8001384:	2b00      	cmp	r3, #0
 8001386:	da03      	bge.n	8001390 <ILI9341_DrawGlyphFast+0x128>
 8001388:	f8d7 3434 	ldr.w	r3, [r7, #1076]	@ 0x434
 800138c:	425b      	negs	r3, r3
 800138e:	e000      	b.n	8001392 <ILI9341_DrawGlyphFast+0x12a>
 8001390:	2300      	movs	r3, #0
 8001392:	f8c7 3424 	str.w	r3, [r7, #1060]	@ 0x424
    int_fast16_t clipEndX = endX >= ili9341->width ? ili9341->width - startX - 1 : glyph.bbW * scale - 1;
 8001396:	f507 6389 	add.w	r3, r7, #1096	@ 0x448
 800139a:	f2a3 433c 	subw	r3, r3, #1084	@ 0x43c
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	6a1b      	ldr	r3, [r3, #32]
 80013a2:	f8d7 2430 	ldr.w	r2, [r7, #1072]	@ 0x430
 80013a6:	429a      	cmp	r2, r3
 80013a8:	db0a      	blt.n	80013c0 <ILI9341_DrawGlyphFast+0x158>
 80013aa:	f507 6389 	add.w	r3, r7, #1096	@ 0x448
 80013ae:	f2a3 433c 	subw	r3, r3, #1084	@ 0x43c
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	6a1a      	ldr	r2, [r3, #32]
 80013b6:	f8d7 3438 	ldr.w	r3, [r7, #1080]	@ 0x438
 80013ba:	1ad3      	subs	r3, r2, r3
 80013bc:	3b01      	subs	r3, #1
 80013be:	e007      	b.n	80013d0 <ILI9341_DrawGlyphFast+0x168>
 80013c0:	f997 345e 	ldrsb.w	r3, [r7, #1118]	@ 0x45e
 80013c4:	461a      	mov	r2, r3
 80013c6:	f8d7 3470 	ldr.w	r3, [r7, #1136]	@ 0x470
 80013ca:	fb02 f303 	mul.w	r3, r2, r3
 80013ce:	3b01      	subs	r3, #1
 80013d0:	f8c7 3420 	str.w	r3, [r7, #1056]	@ 0x420
    int_fast16_t clipEndY = endY >= ili9341->height ? ili9341->height - startY - 1 : glyph.bbH * scale - 1;
 80013d4:	f507 6389 	add.w	r3, r7, #1096	@ 0x448
 80013d8:	f2a3 433c 	subw	r3, r3, #1084	@ 0x43c
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80013e0:	f8d7 242c 	ldr.w	r2, [r7, #1068]	@ 0x42c
 80013e4:	429a      	cmp	r2, r3
 80013e6:	db0a      	blt.n	80013fe <ILI9341_DrawGlyphFast+0x196>
 80013e8:	f507 6389 	add.w	r3, r7, #1096	@ 0x448
 80013ec:	f2a3 433c 	subw	r3, r3, #1084	@ 0x43c
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80013f4:	f8d7 3434 	ldr.w	r3, [r7, #1076]	@ 0x434
 80013f8:	1ad3      	subs	r3, r2, r3
 80013fa:	3b01      	subs	r3, #1
 80013fc:	e007      	b.n	800140e <ILI9341_DrawGlyphFast+0x1a6>
 80013fe:	f997 345f 	ldrsb.w	r3, [r7, #1119]	@ 0x45f
 8001402:	461a      	mov	r2, r3
 8001404:	f8d7 3470 	ldr.w	r3, [r7, #1136]	@ 0x470
 8001408:	fb02 f303 	mul.w	r3, r2, r3
 800140c:	3b01      	subs	r3, #1
 800140e:	f8c7 341c 	str.w	r3, [r7, #1052]	@ 0x41c

    color = (color >> 8) | (color << 8);
 8001412:	f8b7 3468 	ldrh.w	r3, [r7, #1128]	@ 0x468
 8001416:	0a1b      	lsrs	r3, r3, #8
 8001418:	b29b      	uxth	r3, r3
 800141a:	b21a      	sxth	r2, r3
 800141c:	f9b7 3468 	ldrsh.w	r3, [r7, #1128]	@ 0x468
 8001420:	021b      	lsls	r3, r3, #8
 8001422:	b21b      	sxth	r3, r3
 8001424:	4313      	orrs	r3, r2
 8001426:	b21b      	sxth	r3, r3
 8001428:	f8a7 3468 	strh.w	r3, [r7, #1128]	@ 0x468
    bgColor = (bgColor >> 8) | (bgColor << 8);
 800142c:	f8b7 346c 	ldrh.w	r3, [r7, #1132]	@ 0x46c
 8001430:	0a1b      	lsrs	r3, r3, #8
 8001432:	b29b      	uxth	r3, r3
 8001434:	b21a      	sxth	r2, r3
 8001436:	f9b7 346c 	ldrsh.w	r3, [r7, #1132]	@ 0x46c
 800143a:	021b      	lsls	r3, r3, #8
 800143c:	b21b      	sxth	r3, r3
 800143e:	4313      	orrs	r3, r2
 8001440:	b21b      	sxth	r3, r3
 8001442:	f8a7 346c 	strh.w	r3, [r7, #1132]	@ 0x46c

    uint16_t buffer[ILI9341_DRAW_GLYPH_BUFFER_SIZE];
    size_t bufferIndex = 0;
 8001446:	2300      	movs	r3, #0
 8001448:	f8c7 3444 	str.w	r3, [r7, #1092]	@ 0x444

    ILI9341_SetAddressWindow(ili9341, startX + clipStartX, startY + clipStartY, startX + clipEndX, startY + clipEndY);
 800144c:	f8d7 3438 	ldr.w	r3, [r7, #1080]	@ 0x438
 8001450:	b29a      	uxth	r2, r3
 8001452:	f8d7 3428 	ldr.w	r3, [r7, #1064]	@ 0x428
 8001456:	b29b      	uxth	r3, r3
 8001458:	4413      	add	r3, r2
 800145a:	b299      	uxth	r1, r3
 800145c:	f8d7 3434 	ldr.w	r3, [r7, #1076]	@ 0x434
 8001460:	b29a      	uxth	r2, r3
 8001462:	f8d7 3424 	ldr.w	r3, [r7, #1060]	@ 0x424
 8001466:	b29b      	uxth	r3, r3
 8001468:	4413      	add	r3, r2
 800146a:	b29c      	uxth	r4, r3
 800146c:	f8d7 3438 	ldr.w	r3, [r7, #1080]	@ 0x438
 8001470:	b29a      	uxth	r2, r3
 8001472:	f8d7 3420 	ldr.w	r3, [r7, #1056]	@ 0x420
 8001476:	b29b      	uxth	r3, r3
 8001478:	4413      	add	r3, r2
 800147a:	b29d      	uxth	r5, r3
 800147c:	f8d7 3434 	ldr.w	r3, [r7, #1076]	@ 0x434
 8001480:	b29a      	uxth	r2, r3
 8001482:	f8d7 341c 	ldr.w	r3, [r7, #1052]	@ 0x41c
 8001486:	b29b      	uxth	r3, r3
 8001488:	4413      	add	r3, r2
 800148a:	b29b      	uxth	r3, r3
 800148c:	f507 6289 	add.w	r2, r7, #1096	@ 0x448
 8001490:	f2a2 403c 	subw	r0, r2, #1084	@ 0x43c
 8001494:	9300      	str	r3, [sp, #0]
 8001496:	462b      	mov	r3, r5
 8001498:	4622      	mov	r2, r4
 800149a:	6800      	ldr	r0, [r0, #0]
 800149c:	f7ff fce6 	bl	8000e6c <ILI9341_SetAddressWindow>

    for (int_fast16_t row = clipStartY; row <= clipEndY; row++) {
 80014a0:	f8d7 3424 	ldr.w	r3, [r7, #1060]	@ 0x424
 80014a4:	f8c7 3440 	str.w	r3, [r7, #1088]	@ 0x440
 80014a8:	e073      	b.n	8001592 <ILI9341_DrawGlyphFast+0x32a>
        for (int_fast16_t col = clipStartX; col <= clipEndX; col++) {
 80014aa:	f8d7 3428 	ldr.w	r3, [r7, #1064]	@ 0x428
 80014ae:	f8c7 343c 	str.w	r3, [r7, #1084]	@ 0x43c
 80014b2:	e063      	b.n	800157c <ILI9341_DrawGlyphFast+0x314>
            int_fast32_t bitIndex = row / scale * glyph.bbW + col / scale;
 80014b4:	f8d7 2440 	ldr.w	r2, [r7, #1088]	@ 0x440
 80014b8:	f8d7 3470 	ldr.w	r3, [r7, #1136]	@ 0x470
 80014bc:	fb92 f3f3 	sdiv	r3, r2, r3
 80014c0:	f997 245e 	ldrsb.w	r2, [r7, #1118]	@ 0x45e
 80014c4:	fb03 f202 	mul.w	r2, r3, r2
 80014c8:	f8d7 143c 	ldr.w	r1, [r7, #1084]	@ 0x43c
 80014cc:	f8d7 3470 	ldr.w	r3, [r7, #1136]	@ 0x470
 80014d0:	fb91 f3f3 	sdiv	r3, r1, r3
 80014d4:	4413      	add	r3, r2
 80014d6:	f8c7 3418 	str.w	r3, [r7, #1048]	@ 0x418
            uint8_t mask = 0x80 >> (bitIndex % 8);
 80014da:	f8d7 3418 	ldr.w	r3, [r7, #1048]	@ 0x418
 80014de:	f003 0307 	and.w	r3, r3, #7
 80014e2:	2280      	movs	r2, #128	@ 0x80
 80014e4:	fa42 f303 	asr.w	r3, r2, r3
 80014e8:	f887 3417 	strb.w	r3, [r7, #1047]	@ 0x417
            int_fast16_t index = bitIndex / 8;
 80014ec:	f8d7 3418 	ldr.w	r3, [r7, #1048]	@ 0x418
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	da00      	bge.n	80014f6 <ILI9341_DrawGlyphFast+0x28e>
 80014f4:	3307      	adds	r3, #7
 80014f6:	10db      	asrs	r3, r3, #3
 80014f8:	f8c7 3410 	str.w	r3, [r7, #1040]	@ 0x410

            if (glyph.data[index] & mask) {
 80014fc:	f8d7 2464 	ldr.w	r2, [r7, #1124]	@ 0x464
 8001500:	f8d7 3410 	ldr.w	r3, [r7, #1040]	@ 0x410
 8001504:	4413      	add	r3, r2
 8001506:	781a      	ldrb	r2, [r3, #0]
 8001508:	f897 3417 	ldrb.w	r3, [r7, #1047]	@ 0x417
 800150c:	4013      	ands	r3, r2
 800150e:	b2db      	uxtb	r3, r3
 8001510:	2b00      	cmp	r3, #0
 8001512:	d00d      	beq.n	8001530 <ILI9341_DrawGlyphFast+0x2c8>
                buffer[bufferIndex++] = color;
 8001514:	f8d7 3444 	ldr.w	r3, [r7, #1092]	@ 0x444
 8001518:	1c5a      	adds	r2, r3, #1
 800151a:	f8c7 2444 	str.w	r2, [r7, #1092]	@ 0x444
 800151e:	f507 6289 	add.w	r2, r7, #1096	@ 0x448
 8001522:	f5a2 6287 	sub.w	r2, r2, #1080	@ 0x438
 8001526:	f8b7 1468 	ldrh.w	r1, [r7, #1128]	@ 0x468
 800152a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 800152e:	e00c      	b.n	800154a <ILI9341_DrawGlyphFast+0x2e2>
            } else {
                buffer[bufferIndex++] = bgColor;
 8001530:	f8d7 3444 	ldr.w	r3, [r7, #1092]	@ 0x444
 8001534:	1c5a      	adds	r2, r3, #1
 8001536:	f8c7 2444 	str.w	r2, [r7, #1092]	@ 0x444
 800153a:	f507 6289 	add.w	r2, r7, #1096	@ 0x448
 800153e:	f5a2 6287 	sub.w	r2, r2, #1080	@ 0x438
 8001542:	f8b7 146c 	ldrh.w	r1, [r7, #1132]	@ 0x46c
 8001546:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
            }

            if (bufferIndex >= ILI9341_DRAW_GLYPH_BUFFER_SIZE) {
 800154a:	f8d7 3444 	ldr.w	r3, [r7, #1092]	@ 0x444
 800154e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001552:	d30e      	bcc.n	8001572 <ILI9341_DrawGlyphFast+0x30a>
                ILI9341_WriteData(ili9341, (uint8_t*)buffer, bufferIndex * 2);
 8001554:	f8d7 3444 	ldr.w	r3, [r7, #1092]	@ 0x444
 8001558:	005a      	lsls	r2, r3, #1
 800155a:	f107 0110 	add.w	r1, r7, #16
 800155e:	f507 6389 	add.w	r3, r7, #1096	@ 0x448
 8001562:	f2a3 433c 	subw	r3, r3, #1084	@ 0x43c
 8001566:	6818      	ldr	r0, [r3, #0]
 8001568:	f7ff fa3b 	bl	80009e2 <ILI9341_WriteData>
                bufferIndex = 0;
 800156c:	2300      	movs	r3, #0
 800156e:	f8c7 3444 	str.w	r3, [r7, #1092]	@ 0x444
        for (int_fast16_t col = clipStartX; col <= clipEndX; col++) {
 8001572:	f8d7 343c 	ldr.w	r3, [r7, #1084]	@ 0x43c
 8001576:	3301      	adds	r3, #1
 8001578:	f8c7 343c 	str.w	r3, [r7, #1084]	@ 0x43c
 800157c:	f8d7 243c 	ldr.w	r2, [r7, #1084]	@ 0x43c
 8001580:	f8d7 3420 	ldr.w	r3, [r7, #1056]	@ 0x420
 8001584:	429a      	cmp	r2, r3
 8001586:	dd95      	ble.n	80014b4 <ILI9341_DrawGlyphFast+0x24c>
    for (int_fast16_t row = clipStartY; row <= clipEndY; row++) {
 8001588:	f8d7 3440 	ldr.w	r3, [r7, #1088]	@ 0x440
 800158c:	3301      	adds	r3, #1
 800158e:	f8c7 3440 	str.w	r3, [r7, #1088]	@ 0x440
 8001592:	f8d7 2440 	ldr.w	r2, [r7, #1088]	@ 0x440
 8001596:	f8d7 341c 	ldr.w	r3, [r7, #1052]	@ 0x41c
 800159a:	429a      	cmp	r2, r3
 800159c:	dd85      	ble.n	80014aa <ILI9341_DrawGlyphFast+0x242>
            }
        }
    }

    if (bufferIndex > 0) { ILI9341_WriteData(ili9341, (uint8_t*)buffer, bufferIndex * 2); }
 800159e:	f8d7 3444 	ldr.w	r3, [r7, #1092]	@ 0x444
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d00d      	beq.n	80015c2 <ILI9341_DrawGlyphFast+0x35a>
 80015a6:	f8d7 3444 	ldr.w	r3, [r7, #1092]	@ 0x444
 80015aa:	005a      	lsls	r2, r3, #1
 80015ac:	f107 0110 	add.w	r1, r7, #16
 80015b0:	f507 6389 	add.w	r3, r7, #1096	@ 0x448
 80015b4:	f2a3 433c 	subw	r3, r3, #1084	@ 0x43c
 80015b8:	6818      	ldr	r0, [r3, #0]
 80015ba:	f7ff fa12 	bl	80009e2 <ILI9341_WriteData>
 80015be:	e000      	b.n	80015c2 <ILI9341_DrawGlyphFast+0x35a>
        return;
 80015c0:	bf00      	nop
}
 80015c2:	f507 6789 	add.w	r7, r7, #1096	@ 0x448
 80015c6:	46bd      	mov	sp, r7
 80015c8:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 80015cc:	b002      	add	sp, #8
 80015ce:	4770      	bx	lr

080015d0 <ILI9341_WriteString>:
    uint16_t bgColor,
    bool wrap,
    int_fast16_t scale,
    int_fast16_t tracking,
    int_fast16_t leading
) {
 80015d0:	b580      	push	{r7, lr}
 80015d2:	b092      	sub	sp, #72	@ 0x48
 80015d4:	af06      	add	r7, sp, #24
 80015d6:	60f8      	str	r0, [r7, #12]
 80015d8:	60b9      	str	r1, [r7, #8]
 80015da:	607a      	str	r2, [r7, #4]
 80015dc:	603b      	str	r3, [r7, #0]
    if (scale < 1 || y + font.descent * scale < 0 || y - font.ascent * scale >= ili9341->height) return;
 80015de:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	f340 80f1 	ble.w	80017c8 <ILI9341_WriteString+0x1f8>
 80015e6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80015e8:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80015ea:	fb03 f202 	mul.w	r2, r3, r2
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	4413      	add	r3, r2
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	f2c0 80e8 	blt.w	80017c8 <ILI9341_WriteString+0x1f8>
 80015f8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80015fa:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80015fc:	fb02 f303 	mul.w	r3, r2, r3
 8001600:	687a      	ldr	r2, [r7, #4]
 8001602:	1ad2      	subs	r2, r2, r3
 8001604:	68fb      	ldr	r3, [r7, #12]
 8001606:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001608:	429a      	cmp	r2, r3
 800160a:	f280 80dd 	bge.w	80017c8 <ILI9341_WriteString+0x1f8>

    int_fast16_t originalX = x;
 800160e:	68bb      	ldr	r3, [r7, #8]
 8001610:	62bb      	str	r3, [r7, #40]	@ 0x28

    ILI9341_Select(ili9341);
 8001612:	68f8      	ldr	r0, [r7, #12]
 8001614:	f7ff f990 	bl	8000938 <ILI9341_Select>

    for (unsigned char c; (c = *(str++));) {
 8001618:	e0c5      	b.n	80017a6 <ILI9341_WriteString+0x1d6>
        if (c == '\r') {
 800161a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800161e:	2b0d      	cmp	r3, #13
 8001620:	d102      	bne.n	8001628 <ILI9341_WriteString+0x58>
            x = originalX;
 8001622:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001624:	60bb      	str	r3, [r7, #8]
            continue;
 8001626:	e0be      	b.n	80017a6 <ILI9341_WriteString+0x1d6>
        }

        if (c == '\n') {
 8001628:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800162c:	2b0a      	cmp	r3, #10
 800162e:	d118      	bne.n	8001662 <ILI9341_WriteString+0x92>
            y += (font.ascent + font.descent) * scale + leading;
 8001630:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8001632:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001634:	4413      	add	r3, r2
 8001636:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8001638:	fb03 f202 	mul.w	r2, r3, r2
 800163c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800163e:	4413      	add	r3, r2
 8001640:	687a      	ldr	r2, [r7, #4]
 8001642:	4413      	add	r3, r2
 8001644:	607b      	str	r3, [r7, #4]
            x = originalX;
 8001646:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001648:	60bb      	str	r3, [r7, #8]
            if (y - font.ascent * scale >= ili9341->height) break;
 800164a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800164c:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800164e:	fb02 f303 	mul.w	r3, r2, r3
 8001652:	687a      	ldr	r2, [r7, #4]
 8001654:	1ad2      	subs	r2, r2, r3
 8001656:	68fb      	ldr	r3, [r7, #12]
 8001658:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800165a:	429a      	cmp	r2, r3
 800165c:	f2c0 80a0 	blt.w	80017a0 <ILI9341_WriteString+0x1d0>
 8001660:	e0ae      	b.n	80017c0 <ILI9341_WriteString+0x1f0>
            continue;
        }

        if (c < font.startCodepoint || c > font.endCodepoint) { c = FALLBACK_CODEPOINT; }
 8001662:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 8001666:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001668:	429a      	cmp	r2, r3
 800166a:	d304      	bcc.n	8001676 <ILI9341_WriteString+0xa6>
 800166c:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 8001670:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001672:	429a      	cmp	r2, r3
 8001674:	d902      	bls.n	800167c <ILI9341_WriteString+0xac>
 8001676:	237f      	movs	r3, #127	@ 0x7f
 8001678:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
        ILI9341_GlyphDef glyph = font.glyphs[c - font.startCodepoint];
 800167c:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 800167e:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 8001682:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001684:	1ad2      	subs	r2, r2, r3
 8001686:	4613      	mov	r3, r2
 8001688:	005b      	lsls	r3, r3, #1
 800168a:	4413      	add	r3, r2
 800168c:	009b      	lsls	r3, r3, #2
 800168e:	18ca      	adds	r2, r1, r3
 8001690:	f107 031c 	add.w	r3, r7, #28
 8001694:	ca07      	ldmia	r2, {r0, r1, r2}
 8001696:	e883 0007 	stmia.w	r3, {r0, r1, r2}

        // Only wrap if current char is not zero-width, help prevent newline on diacritics
        if (wrap && glyph.advance > 0 && x + (glyph.bbX + glyph.bbW) * scale + 1 >= ili9341->width) {
 800169a:	f897 3058 	ldrb.w	r3, [r7, #88]	@ 0x58
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d032      	beq.n	8001708 <ILI9341_WriteString+0x138>
 80016a2:	f997 3020 	ldrsb.w	r3, [r7, #32]
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	dd2e      	ble.n	8001708 <ILI9341_WriteString+0x138>
 80016aa:	f997 301c 	ldrsb.w	r3, [r7, #28]
 80016ae:	461a      	mov	r2, r3
 80016b0:	f997 301e 	ldrsb.w	r3, [r7, #30]
 80016b4:	4413      	add	r3, r2
 80016b6:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80016b8:	fb03 f202 	mul.w	r2, r3, r2
 80016bc:	68bb      	ldr	r3, [r7, #8]
 80016be:	4413      	add	r3, r2
 80016c0:	1c5a      	adds	r2, r3, #1
 80016c2:	68fb      	ldr	r3, [r7, #12]
 80016c4:	6a1b      	ldr	r3, [r3, #32]
 80016c6:	429a      	cmp	r2, r3
 80016c8:	db1e      	blt.n	8001708 <ILI9341_WriteString+0x138>
            y += (font.ascent + font.descent) * scale + leading;
 80016ca:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80016cc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80016ce:	4413      	add	r3, r2
 80016d0:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80016d2:	fb03 f202 	mul.w	r2, r3, r2
 80016d6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80016d8:	4413      	add	r3, r2
 80016da:	687a      	ldr	r2, [r7, #4]
 80016dc:	4413      	add	r3, r2
 80016de:	607b      	str	r3, [r7, #4]
            x = originalX;
 80016e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80016e2:	60bb      	str	r3, [r7, #8]
            if (y - font.ascent * scale >= ili9341->height) break;
 80016e4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80016e6:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80016e8:	fb02 f303 	mul.w	r3, r2, r3
 80016ec:	687a      	ldr	r2, [r7, #4]
 80016ee:	1ad2      	subs	r2, r2, r3
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80016f4:	429a      	cmp	r2, r3
 80016f6:	da62      	bge.n	80017be <ILI9341_WriteString+0x1ee>
            if (c == 0x20 || c == 0xA0) {  // Ignore space and nbsp after newline
 80016f8:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80016fc:	2b20      	cmp	r3, #32
 80016fe:	d051      	beq.n	80017a4 <ILI9341_WriteString+0x1d4>
 8001700:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001704:	2ba0      	cmp	r3, #160	@ 0xa0
 8001706:	d04d      	beq.n	80017a4 <ILI9341_WriteString+0x1d4>
                continue;
            }
        }

        ILI9341_DrawGlyphFast(ili9341, x, y, glyph, color, bgColor, scale);
 8001708:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800170a:	9304      	str	r3, [sp, #16]
 800170c:	f8b7 3054 	ldrh.w	r3, [r7, #84]	@ 0x54
 8001710:	9303      	str	r3, [sp, #12]
 8001712:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8001716:	9302      	str	r3, [sp, #8]
 8001718:	466a      	mov	r2, sp
 800171a:	f107 0320 	add.w	r3, r7, #32
 800171e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001722:	e882 0003 	stmia.w	r2, {r0, r1}
 8001726:	69fb      	ldr	r3, [r7, #28]
 8001728:	687a      	ldr	r2, [r7, #4]
 800172a:	68b9      	ldr	r1, [r7, #8]
 800172c:	68f8      	ldr	r0, [r7, #12]
 800172e:	f7ff fd9b 	bl	8001268 <ILI9341_DrawGlyphFast>
        x += glyph.advance * scale;
 8001732:	f997 3020 	ldrsb.w	r3, [r7, #32]
 8001736:	461a      	mov	r2, r3
 8001738:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800173a:	fb02 f303 	mul.w	r3, r2, r3
 800173e:	68ba      	ldr	r2, [r7, #8]
 8001740:	4413      	add	r3, r2
 8001742:	60bb      	str	r3, [r7, #8]

        c = *str;
 8001744:	683b      	ldr	r3, [r7, #0]
 8001746:	781b      	ldrb	r3, [r3, #0]
 8001748:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
        if (c < font.startCodepoint || c > font.endCodepoint) { c = FALLBACK_CODEPOINT; }
 800174c:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 8001750:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001752:	429a      	cmp	r2, r3
 8001754:	d304      	bcc.n	8001760 <ILI9341_WriteString+0x190>
 8001756:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 800175a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800175c:	429a      	cmp	r2, r3
 800175e:	d902      	bls.n	8001766 <ILI9341_WriteString+0x196>
 8001760:	237f      	movs	r3, #127	@ 0x7f
 8001762:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

        // Only apply tracking if next char is not zero-width, help diacritics stay aligned
        if (tracking) {
 8001766:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001768:	2b00      	cmp	r3, #0
 800176a:	d01c      	beq.n	80017a6 <ILI9341_WriteString+0x1d6>
            ILI9341_GlyphDef glyph = font.glyphs[c - font.startCodepoint];
 800176c:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 800176e:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 8001772:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001774:	1ad2      	subs	r2, r2, r3
 8001776:	4613      	mov	r3, r2
 8001778:	005b      	lsls	r3, r3, #1
 800177a:	4413      	add	r3, r2
 800177c:	009b      	lsls	r3, r3, #2
 800177e:	18ca      	adds	r2, r1, r3
 8001780:	f107 0310 	add.w	r3, r7, #16
 8001784:	ca07      	ldmia	r2, {r0, r1, r2}
 8001786:	e883 0007 	stmia.w	r3, {r0, r1, r2}
            x += glyph.advance > 0 ? tracking : 0;
 800178a:	f997 3014 	ldrsb.w	r3, [r7, #20]
 800178e:	2b00      	cmp	r3, #0
 8001790:	dd01      	ble.n	8001796 <ILI9341_WriteString+0x1c6>
 8001792:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001794:	e000      	b.n	8001798 <ILI9341_WriteString+0x1c8>
 8001796:	2300      	movs	r3, #0
 8001798:	68ba      	ldr	r2, [r7, #8]
 800179a:	4413      	add	r3, r2
 800179c:	60bb      	str	r3, [r7, #8]
 800179e:	e002      	b.n	80017a6 <ILI9341_WriteString+0x1d6>
            continue;
 80017a0:	bf00      	nop
 80017a2:	e000      	b.n	80017a6 <ILI9341_WriteString+0x1d6>
                continue;
 80017a4:	bf00      	nop
    for (unsigned char c; (c = *(str++));) {
 80017a6:	683b      	ldr	r3, [r7, #0]
 80017a8:	1c5a      	adds	r2, r3, #1
 80017aa:	603a      	str	r2, [r7, #0]
 80017ac:	781b      	ldrb	r3, [r3, #0]
 80017ae:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 80017b2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	f47f af2f 	bne.w	800161a <ILI9341_WriteString+0x4a>
 80017bc:	e000      	b.n	80017c0 <ILI9341_WriteString+0x1f0>
            if (y - font.ascent * scale >= ili9341->height) break;
 80017be:	bf00      	nop
        }
    }

    ILI9341_Deselect(ili9341);
 80017c0:	68f8      	ldr	r0, [r7, #12]
 80017c2:	f7ff f8c9 	bl	8000958 <ILI9341_Deselect>
 80017c6:	e000      	b.n	80017ca <ILI9341_WriteString+0x1fa>
    if (scale < 1 || y + font.descent * scale < 0 || y - font.ascent * scale >= ili9341->height) return;
 80017c8:	bf00      	nop
}
 80017ca:	3730      	adds	r7, #48	@ 0x30
 80017cc:	46bd      	mov	sp, r7
 80017ce:	bd80      	pop	{r7, pc}

080017d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80017d0:	b5b0      	push	{r4, r5, r7, lr}
 80017d2:	b094      	sub	sp, #80	@ 0x50
 80017d4:	af08      	add	r7, sp, #32
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80017d6:	f000 fde4 	bl	80023a2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80017da:	f000 f97d 	bl	8001ad8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80017de:	f7fe ff73 	bl	80006c8 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 80017e2:	f000 fd25 	bl	8002230 <MX_USART3_UART_Init>
  MX_TIM2_Init();
 80017e6:	f000 fbdf 	bl	8001fa8 <MX_TIM2_Init>
  MX_SPI5_Init();
 80017ea:	f000 fa9d 	bl	8001d28 <MX_SPI5_Init>
  MX_TIM3_Init();
 80017ee:	f000 fc29 	bl	8002044 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 80017f2:	2100      	movs	r1, #0
 80017f4:	48ab      	ldr	r0, [pc, #684]	@ (8001aa4 <main+0x2d4>)
 80017f6:	f002 ffbb 	bl	8004770 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 80017fa:	2104      	movs	r1, #4
 80017fc:	48a9      	ldr	r0, [pc, #676]	@ (8001aa4 <main+0x2d4>)
 80017fe:	f002 ffb7 	bl	8004770 <HAL_TIM_PWM_Start>
  ili9341 = ILI9341_Init(
 8001802:	4ca9      	ldr	r4, [pc, #676]	@ (8001aa8 <main+0x2d8>)
 8001804:	4638      	mov	r0, r7
 8001806:	23f0      	movs	r3, #240	@ 0xf0
 8001808:	9306      	str	r3, [sp, #24]
 800180a:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 800180e:	9305      	str	r3, [sp, #20]
 8001810:	2301      	movs	r3, #1
 8001812:	9304      	str	r3, [sp, #16]
 8001814:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001818:	9303      	str	r3, [sp, #12]
 800181a:	4ba4      	ldr	r3, [pc, #656]	@ (8001aac <main+0x2dc>)
 800181c:	9302      	str	r3, [sp, #8]
 800181e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001822:	9301      	str	r3, [sp, #4]
 8001824:	4ba1      	ldr	r3, [pc, #644]	@ (8001aac <main+0x2dc>)
 8001826:	9300      	str	r3, [sp, #0]
 8001828:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800182c:	4a9f      	ldr	r2, [pc, #636]	@ (8001aac <main+0x2dc>)
 800182e:	49a0      	ldr	r1, [pc, #640]	@ (8001ab0 <main+0x2e0>)
 8001830:	f7ff f906 	bl	8000a40 <ILI9341_Init>
 8001834:	4625      	mov	r5, r4
 8001836:	463c      	mov	r4, r7
 8001838:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800183a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800183c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800183e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001840:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001844:	e885 0003 	stmia.w	r5, {r0, r1}
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  transmitStringUART("Program started. Current State: %s\r\n", stateNames[STATE]);
 8001848:	4b9a      	ldr	r3, [pc, #616]	@ (8001ab4 <main+0x2e4>)
 800184a:	781b      	ldrb	r3, [r3, #0]
 800184c:	461a      	mov	r2, r3
 800184e:	4b9a      	ldr	r3, [pc, #616]	@ (8001ab8 <main+0x2e8>)
 8001850:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001854:	4619      	mov	r1, r3
 8001856:	4899      	ldr	r0, [pc, #612]	@ (8001abc <main+0x2ec>)
 8001858:	f000 f9ae 	bl	8001bb8 <transmitStringUART>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
//	  ILI9341_FillScreen(&ili9341, ILI9341_COLOR_RED);

	  renderPage(STATE);
 800185c:	4b95      	ldr	r3, [pc, #596]	@ (8001ab4 <main+0x2e4>)
 800185e:	781b      	ldrb	r3, [r3, #0]
 8001860:	4618      	mov	r0, r3
 8001862:	f7fe fedb 	bl	800061c <renderPage>

	  if (STATE == IDLE) {
 8001866:	4b93      	ldr	r3, [pc, #588]	@ (8001ab4 <main+0x2e4>)
 8001868:	781b      	ldrb	r3, [r3, #0]
 800186a:	2b00      	cmp	r3, #0
 800186c:	d114      	bne.n	8001898 <main+0xc8>
		  if (currentCoinAmount != 0) {
 800186e:	4b94      	ldr	r3, [pc, #592]	@ (8001ac0 <main+0x2f0>)
 8001870:	781b      	ldrb	r3, [r3, #0]
 8001872:	2b00      	cmp	r3, #0
 8001874:	d0f2      	beq.n	800185c <main+0x8c>

			  HAL_TIM_Base_Start_IT(&htim2);
 8001876:	4893      	ldr	r0, [pc, #588]	@ (8001ac4 <main+0x2f4>)
 8001878:	f002 fe72 	bl	8004560 <HAL_TIM_Base_Start_IT>

			  STATE = WAIT_COIN;
 800187c:	4b8d      	ldr	r3, [pc, #564]	@ (8001ab4 <main+0x2e4>)
 800187e:	2201      	movs	r2, #1
 8001880:	701a      	strb	r2, [r3, #0]
			  transmitStringUART("State changed to %s\r\n", stateNames[STATE]);
 8001882:	4b8c      	ldr	r3, [pc, #560]	@ (8001ab4 <main+0x2e4>)
 8001884:	781b      	ldrb	r3, [r3, #0]
 8001886:	461a      	mov	r2, r3
 8001888:	4b8b      	ldr	r3, [pc, #556]	@ (8001ab8 <main+0x2e8>)
 800188a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800188e:	4619      	mov	r1, r3
 8001890:	488d      	ldr	r0, [pc, #564]	@ (8001ac8 <main+0x2f8>)
 8001892:	f000 f991 	bl	8001bb8 <transmitStringUART>
 8001896:	e7e1      	b.n	800185c <main+0x8c>

		  }
	  }
	  else if (STATE == WAIT_COIN) {
 8001898:	4b86      	ldr	r3, [pc, #536]	@ (8001ab4 <main+0x2e4>)
 800189a:	781b      	ldrb	r3, [r3, #0]
 800189c:	2b01      	cmp	r3, #1
 800189e:	d11c      	bne.n	80018da <main+0x10a>
		  if (currentCoinAmount >= TARGET_COIN_AMOUNT) {
 80018a0:	4b87      	ldr	r3, [pc, #540]	@ (8001ac0 <main+0x2f0>)
 80018a2:	781b      	ldrb	r3, [r3, #0]
 80018a4:	220a      	movs	r2, #10
 80018a6:	4293      	cmp	r3, r2
 80018a8:	d3d8      	bcc.n	800185c <main+0x8c>

			  HAL_TIM_Base_Stop_IT(&htim2);
 80018aa:	4886      	ldr	r0, [pc, #536]	@ (8001ac4 <main+0x2f4>)
 80018ac:	f002 fed0 	bl	8004650 <HAL_TIM_Base_Stop_IT>
			  currentCoinAmount = 0;
 80018b0:	4b83      	ldr	r3, [pc, #524]	@ (8001ac0 <main+0x2f0>)
 80018b2:	2200      	movs	r2, #0
 80018b4:	701a      	strb	r2, [r3, #0]
			  __HAL_TIM_SET_COUNTER(&htim2, 0);
 80018b6:	4b83      	ldr	r3, [pc, #524]	@ (8001ac4 <main+0x2f4>)
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	2200      	movs	r2, #0
 80018bc:	625a      	str	r2, [r3, #36]	@ 0x24

			  STATE = WAIT_CONFIRM;
 80018be:	4b7d      	ldr	r3, [pc, #500]	@ (8001ab4 <main+0x2e4>)
 80018c0:	2202      	movs	r2, #2
 80018c2:	701a      	strb	r2, [r3, #0]
			  transmitStringUART("State changed to %s\r\n", stateNames[STATE]);
 80018c4:	4b7b      	ldr	r3, [pc, #492]	@ (8001ab4 <main+0x2e4>)
 80018c6:	781b      	ldrb	r3, [r3, #0]
 80018c8:	461a      	mov	r2, r3
 80018ca:	4b7b      	ldr	r3, [pc, #492]	@ (8001ab8 <main+0x2e8>)
 80018cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80018d0:	4619      	mov	r1, r3
 80018d2:	487d      	ldr	r0, [pc, #500]	@ (8001ac8 <main+0x2f8>)
 80018d4:	f000 f970 	bl	8001bb8 <transmitStringUART>
 80018d8:	e7c0      	b.n	800185c <main+0x8c>

		  }
	  }
	  else if (STATE == GAME) {
 80018da:	4b76      	ldr	r3, [pc, #472]	@ (8001ab4 <main+0x2e4>)
 80018dc:	781b      	ldrb	r3, [r3, #0]
 80018de:	2b03      	cmp	r3, #3
 80018e0:	d17f      	bne.n	80019e2 <main+0x212>
		  HAL_TIM_Base_Start_IT(&htim2);
 80018e2:	4878      	ldr	r0, [pc, #480]	@ (8001ac4 <main+0x2f4>)
 80018e4:	f002 fe3c 	bl	8004560 <HAL_TIM_Base_Start_IT>
		  const uint8_t joystickUp = HAL_GPIO_ReadPin(GPIOF, GPIO_PIN_13);
 80018e8:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80018ec:	4877      	ldr	r0, [pc, #476]	@ (8001acc <main+0x2fc>)
 80018ee:	f001 f897 	bl	8002a20 <HAL_GPIO_ReadPin>
 80018f2:	4603      	mov	r3, r0
 80018f4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		  const uint8_t joystickDown = HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_9);
 80018f8:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80018fc:	4874      	ldr	r0, [pc, #464]	@ (8001ad0 <main+0x300>)
 80018fe:	f001 f88f 	bl	8002a20 <HAL_GPIO_ReadPin>
 8001902:	4603      	mov	r3, r0
 8001904:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
		  const uint8_t joystickLeft = HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_11);
 8001908:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800190c:	4870      	ldr	r0, [pc, #448]	@ (8001ad0 <main+0x300>)
 800190e:	f001 f887 	bl	8002a20 <HAL_GPIO_ReadPin>
 8001912:	4603      	mov	r3, r0
 8001914:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
		  const uint8_t joystickRight = HAL_GPIO_ReadPin(GPIOF, GPIO_PIN_14);
 8001918:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800191c:	486b      	ldr	r0, [pc, #428]	@ (8001acc <main+0x2fc>)
 800191e:	f001 f87f 	bl	8002a20 <HAL_GPIO_ReadPin>
 8001922:	4603      	mov	r3, r0
 8001924:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c

	//	  transmitStringUART("Up = %d | Down = %d | Left = %d | Right = %d \r\n", joystickUp, joystickDown, joystickLeft, joystickRight);


		  if (!joystickLeft) {
 8001928:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 800192c:	2b00      	cmp	r3, #0
 800192e:	d10c      	bne.n	800194a <main+0x17a>
			  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_13, 0);
 8001930:	2200      	movs	r2, #0
 8001932:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001936:	4866      	ldr	r0, [pc, #408]	@ (8001ad0 <main+0x300>)
 8001938:	f001 f88a 	bl	8002a50 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_15, 1);
 800193c:	2201      	movs	r2, #1
 800193e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001942:	4862      	ldr	r0, [pc, #392]	@ (8001acc <main+0x2fc>)
 8001944:	f001 f884 	bl	8002a50 <HAL_GPIO_WritePin>
 8001948:	e01c      	b.n	8001984 <main+0x1b4>
		  }
		  else if (!joystickRight) {
 800194a:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800194e:	2b00      	cmp	r3, #0
 8001950:	d10c      	bne.n	800196c <main+0x19c>
			  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_13, 1);
 8001952:	2201      	movs	r2, #1
 8001954:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001958:	485d      	ldr	r0, [pc, #372]	@ (8001ad0 <main+0x300>)
 800195a:	f001 f879 	bl	8002a50 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_15, 0);
 800195e:	2200      	movs	r2, #0
 8001960:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001964:	4859      	ldr	r0, [pc, #356]	@ (8001acc <main+0x2fc>)
 8001966:	f001 f873 	bl	8002a50 <HAL_GPIO_WritePin>
 800196a:	e00b      	b.n	8001984 <main+0x1b4>
		  }
		  else {
			  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_13, 0);
 800196c:	2200      	movs	r2, #0
 800196e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001972:	4857      	ldr	r0, [pc, #348]	@ (8001ad0 <main+0x300>)
 8001974:	f001 f86c 	bl	8002a50 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_15, 0);
 8001978:	2200      	movs	r2, #0
 800197a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800197e:	4853      	ldr	r0, [pc, #332]	@ (8001acc <main+0x2fc>)
 8001980:	f001 f866 	bl	8002a50 <HAL_GPIO_WritePin>
		  }

		  if (!joystickUp) {
 8001984:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001988:	2b00      	cmp	r3, #0
 800198a:	d10c      	bne.n	80019a6 <main+0x1d6>
			  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_14, 1);
 800198c:	2201      	movs	r2, #1
 800198e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001992:	4850      	ldr	r0, [pc, #320]	@ (8001ad4 <main+0x304>)
 8001994:	f001 f85c 	bl	8002a50 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_9, 0);
 8001998:	2200      	movs	r2, #0
 800199a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800199e:	484d      	ldr	r0, [pc, #308]	@ (8001ad4 <main+0x304>)
 80019a0:	f001 f856 	bl	8002a50 <HAL_GPIO_WritePin>
		  }
		  else {
			  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_14, 0);
			  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_9, 0);
		  }
		  continue;
 80019a4:	e07c      	b.n	8001aa0 <main+0x2d0>
		  else if (!joystickDown) {
 80019a6:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d10c      	bne.n	80019c8 <main+0x1f8>
			  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_14, 0);
 80019ae:	2200      	movs	r2, #0
 80019b0:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80019b4:	4847      	ldr	r0, [pc, #284]	@ (8001ad4 <main+0x304>)
 80019b6:	f001 f84b 	bl	8002a50 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_9, 1);
 80019ba:	2201      	movs	r2, #1
 80019bc:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80019c0:	4844      	ldr	r0, [pc, #272]	@ (8001ad4 <main+0x304>)
 80019c2:	f001 f845 	bl	8002a50 <HAL_GPIO_WritePin>
		  continue;
 80019c6:	e06b      	b.n	8001aa0 <main+0x2d0>
			  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_14, 0);
 80019c8:	2200      	movs	r2, #0
 80019ca:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80019ce:	4841      	ldr	r0, [pc, #260]	@ (8001ad4 <main+0x304>)
 80019d0:	f001 f83e 	bl	8002a50 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_9, 0);
 80019d4:	2200      	movs	r2, #0
 80019d6:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80019da:	483e      	ldr	r0, [pc, #248]	@ (8001ad4 <main+0x304>)
 80019dc:	f001 f838 	bl	8002a50 <HAL_GPIO_WritePin>
		  continue;
 80019e0:	e05e      	b.n	8001aa0 <main+0x2d0>
	  }
	  else if (STATE == DEPOSIT){
 80019e2:	4b34      	ldr	r3, [pc, #208]	@ (8001ab4 <main+0x2e4>)
 80019e4:	781b      	ldrb	r3, [r3, #0]
 80019e6:	2b04      	cmp	r3, #4
 80019e8:	f47f af38 	bne.w	800185c <main+0x8c>
		  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_13, 0);
 80019ec:	2200      	movs	r2, #0
 80019ee:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80019f2:	4837      	ldr	r0, [pc, #220]	@ (8001ad0 <main+0x300>)
 80019f4:	f001 f82c 	bl	8002a50 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_15, 0);
 80019f8:	2200      	movs	r2, #0
 80019fa:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80019fe:	4833      	ldr	r0, [pc, #204]	@ (8001acc <main+0x2fc>)
 8001a00:	f001 f826 	bl	8002a50 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_14, 0);
 8001a04:	2200      	movs	r2, #0
 8001a06:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001a0a:	4832      	ldr	r0, [pc, #200]	@ (8001ad4 <main+0x304>)
 8001a0c:	f001 f820 	bl	8002a50 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_9, 0);
 8001a10:	2200      	movs	r2, #0
 8001a12:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001a16:	482f      	ldr	r0, [pc, #188]	@ (8001ad4 <main+0x304>)
 8001a18:	f001 f81a 	bl	8002a50 <HAL_GPIO_WritePin>


		  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_7, GPIO_PIN_SET);
 8001a1c:	2201      	movs	r2, #1
 8001a1e:	2180      	movs	r1, #128	@ 0x80
 8001a20:	482b      	ldr	r0, [pc, #172]	@ (8001ad0 <main+0x300>)
 8001a22:	f001 f815 	bl	8002a50 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_8, GPIO_PIN_RESET);
 8001a26:	2200      	movs	r2, #0
 8001a28:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001a2c:	4828      	ldr	r0, [pc, #160]	@ (8001ad0 <main+0x300>)
 8001a2e:	f001 f80f 	bl	8002a50 <HAL_GPIO_WritePin>

		  HAL_Delay(6500);
 8001a32:	f641 1064 	movw	r0, #6500	@ 0x1964
 8001a36:	f000 fd11 	bl	800245c <HAL_Delay>

		  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_10, GPIO_PIN_SET);
 8001a3a:	2201      	movs	r2, #1
 8001a3c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001a40:	4823      	ldr	r0, [pc, #140]	@ (8001ad0 <main+0x300>)
 8001a42:	f001 f805 	bl	8002a50 <HAL_GPIO_WritePin>

		  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_7, GPIO_PIN_RESET);
 8001a46:	2200      	movs	r2, #0
 8001a48:	2180      	movs	r1, #128	@ 0x80
 8001a4a:	4821      	ldr	r0, [pc, #132]	@ (8001ad0 <main+0x300>)
 8001a4c:	f001 f800 	bl	8002a50 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_8, GPIO_PIN_SET);
 8001a50:	2201      	movs	r2, #1
 8001a52:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001a56:	481e      	ldr	r0, [pc, #120]	@ (8001ad0 <main+0x300>)
 8001a58:	f000 fffa 	bl	8002a50 <HAL_GPIO_WritePin>

		  HAL_Delay(6500);
 8001a5c:	f641 1064 	movw	r0, #6500	@ 0x1964
 8001a60:	f000 fcfc 	bl	800245c <HAL_Delay>

		  //Positioning

		  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_7, GPIO_PIN_RESET);
 8001a64:	2200      	movs	r2, #0
 8001a66:	2180      	movs	r1, #128	@ 0x80
 8001a68:	4819      	ldr	r0, [pc, #100]	@ (8001ad0 <main+0x300>)
 8001a6a:	f000 fff1 	bl	8002a50 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_8, GPIO_PIN_RESET);
 8001a6e:	2200      	movs	r2, #0
 8001a70:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001a74:	4816      	ldr	r0, [pc, #88]	@ (8001ad0 <main+0x300>)
 8001a76:	f000 ffeb 	bl	8002a50 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_10, GPIO_PIN_RESET);
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001a80:	4813      	ldr	r0, [pc, #76]	@ (8001ad0 <main+0x300>)
 8001a82:	f000 ffe5 	bl	8002a50 <HAL_GPIO_WritePin>
		  STATE = GAME;
 8001a86:	4b0b      	ldr	r3, [pc, #44]	@ (8001ab4 <main+0x2e4>)
 8001a88:	2203      	movs	r2, #3
 8001a8a:	701a      	strb	r2, [r3, #0]
		  transmitStringUART("State changed to %s\r\n", stateNames[STATE]);
 8001a8c:	4b09      	ldr	r3, [pc, #36]	@ (8001ab4 <main+0x2e4>)
 8001a8e:	781b      	ldrb	r3, [r3, #0]
 8001a90:	461a      	mov	r2, r3
 8001a92:	4b09      	ldr	r3, [pc, #36]	@ (8001ab8 <main+0x2e8>)
 8001a94:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a98:	4619      	mov	r1, r3
 8001a9a:	480b      	ldr	r0, [pc, #44]	@ (8001ac8 <main+0x2f8>)
 8001a9c:	f000 f88c 	bl	8001bb8 <transmitStringUART>
	  renderPage(STATE);
 8001aa0:	e6dc      	b.n	800185c <main+0x8c>
 8001aa2:	bf00      	nop
 8001aa4:	20000174 	.word	0x20000174
 8001aa8:	20000094 	.word	0x20000094
 8001aac:	40020800 	.word	0x40020800
 8001ab0:	200000c0 	.word	0x200000c0
 8001ab4:	20000000 	.word	0x20000000
 8001ab8:	20000004 	.word	0x20000004
 8001abc:	08006c30 	.word	0x08006c30
 8001ac0:	20000091 	.word	0x20000091
 8001ac4:	20000128 	.word	0x20000128
 8001ac8:	08006c58 	.word	0x08006c58
 8001acc:	40021400 	.word	0x40021400
 8001ad0:	40021000 	.word	0x40021000
 8001ad4:	40021800 	.word	0x40021800

08001ad8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	b094      	sub	sp, #80	@ 0x50
 8001adc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001ade:	f107 031c 	add.w	r3, r7, #28
 8001ae2:	2234      	movs	r2, #52	@ 0x34
 8001ae4:	2100      	movs	r1, #0
 8001ae6:	4618      	mov	r0, r3
 8001ae8:	f004 fbf4 	bl	80062d4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001aec:	f107 0308 	add.w	r3, r7, #8
 8001af0:	2200      	movs	r2, #0
 8001af2:	601a      	str	r2, [r3, #0]
 8001af4:	605a      	str	r2, [r3, #4]
 8001af6:	609a      	str	r2, [r3, #8]
 8001af8:	60da      	str	r2, [r3, #12]
 8001afa:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001afc:	f000 ffda 	bl	8002ab4 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b00:	4b2b      	ldr	r3, [pc, #172]	@ (8001bb0 <SystemClock_Config+0xd8>)
 8001b02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b04:	4a2a      	ldr	r2, [pc, #168]	@ (8001bb0 <SystemClock_Config+0xd8>)
 8001b06:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001b0a:	6413      	str	r3, [r2, #64]	@ 0x40
 8001b0c:	4b28      	ldr	r3, [pc, #160]	@ (8001bb0 <SystemClock_Config+0xd8>)
 8001b0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b10:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001b14:	607b      	str	r3, [r7, #4]
 8001b16:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001b18:	4b26      	ldr	r3, [pc, #152]	@ (8001bb4 <SystemClock_Config+0xdc>)
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	4a25      	ldr	r2, [pc, #148]	@ (8001bb4 <SystemClock_Config+0xdc>)
 8001b1e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001b22:	6013      	str	r3, [r2, #0]
 8001b24:	4b23      	ldr	r3, [pc, #140]	@ (8001bb4 <SystemClock_Config+0xdc>)
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001b2c:	603b      	str	r3, [r7, #0]
 8001b2e:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001b30:	2302      	movs	r3, #2
 8001b32:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001b34:	2301      	movs	r3, #1
 8001b36:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001b38:	2310      	movs	r3, #16
 8001b3a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001b3c:	2302      	movs	r3, #2
 8001b3e:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001b40:	2300      	movs	r3, #0
 8001b42:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001b44:	2308      	movs	r3, #8
 8001b46:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 216;
 8001b48:	23d8      	movs	r3, #216	@ 0xd8
 8001b4a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001b4c:	2302      	movs	r3, #2
 8001b4e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 9;
 8001b50:	2309      	movs	r3, #9
 8001b52:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001b54:	2302      	movs	r3, #2
 8001b56:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001b58:	f107 031c 	add.w	r3, r7, #28
 8001b5c:	4618      	mov	r0, r3
 8001b5e:	f001 f809 	bl	8002b74 <HAL_RCC_OscConfig>
 8001b62:	4603      	mov	r3, r0
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d001      	beq.n	8001b6c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001b68:	f000 f8d8 	bl	8001d1c <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001b6c:	f000 ffb2 	bl	8002ad4 <HAL_PWREx_EnableOverDrive>
 8001b70:	4603      	mov	r3, r0
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d001      	beq.n	8001b7a <SystemClock_Config+0xa2>
  {
    Error_Handler();
 8001b76:	f000 f8d1 	bl	8001d1c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001b7a:	230f      	movs	r3, #15
 8001b7c:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001b7e:	2302      	movs	r3, #2
 8001b80:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001b82:	2300      	movs	r3, #0
 8001b84:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001b86:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001b8a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001b8c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001b90:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8001b92:	f107 0308 	add.w	r3, r7, #8
 8001b96:	2107      	movs	r1, #7
 8001b98:	4618      	mov	r0, r3
 8001b9a:	f001 fa99 	bl	80030d0 <HAL_RCC_ClockConfig>
 8001b9e:	4603      	mov	r3, r0
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d001      	beq.n	8001ba8 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 8001ba4:	f000 f8ba 	bl	8001d1c <Error_Handler>
  }
}
 8001ba8:	bf00      	nop
 8001baa:	3750      	adds	r7, #80	@ 0x50
 8001bac:	46bd      	mov	sp, r7
 8001bae:	bd80      	pop	{r7, pc}
 8001bb0:	40023800 	.word	0x40023800
 8001bb4:	40007000 	.word	0x40007000

08001bb8 <transmitStringUART>:

/* USER CODE BEGIN 4 */

void transmitStringUART(const char* format, ...){
 8001bb8:	b40f      	push	{r0, r1, r2, r3}
 8001bba:	b580      	push	{r7, lr}
 8001bbc:	b0a2      	sub	sp, #136	@ 0x88
 8001bbe:	af00      	add	r7, sp, #0
	char buf[128];

	va_list args;
	va_start(args, format);
 8001bc0:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8001bc4:	607b      	str	r3, [r7, #4]
	vsnprintf(buf, sizeof(buf), format, args);
 8001bc6:	f107 0008 	add.w	r0, r7, #8
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 8001bd0:	2180      	movs	r1, #128	@ 0x80
 8001bd2:	f004 fb71 	bl	80062b8 <vsniprintf>
	va_end(args);

	HAL_UART_Transmit(&huart3, (uint8_t*)buf, strlen(buf), 50);
 8001bd6:	f107 0308 	add.w	r3, r7, #8
 8001bda:	4618      	mov	r0, r3
 8001bdc:	f7fe fb30 	bl	8000240 <strlen>
 8001be0:	4603      	mov	r3, r0
 8001be2:	b29a      	uxth	r2, r3
 8001be4:	f107 0108 	add.w	r1, r7, #8
 8001be8:	2332      	movs	r3, #50	@ 0x32
 8001bea:	4805      	ldr	r0, [pc, #20]	@ (8001c00 <transmitStringUART+0x48>)
 8001bec:	f003 fe98 	bl	8005920 <HAL_UART_Transmit>
}
 8001bf0:	bf00      	nop
 8001bf2:	3788      	adds	r7, #136	@ 0x88
 8001bf4:	46bd      	mov	sp, r7
 8001bf6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001bfa:	b004      	add	sp, #16
 8001bfc:	4770      	bx	lr
 8001bfe:	bf00      	nop
 8001c00:	200001c0 	.word	0x200001c0

08001c04 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001c04:	b580      	push	{r7, lr}
 8001c06:	b082      	sub	sp, #8
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	4603      	mov	r3, r0
 8001c0c:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == GPIO_PIN_8)
 8001c0e:	88fb      	ldrh	r3, [r7, #6]
 8001c10:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001c14:	d115      	bne.n	8001c42 <HAL_GPIO_EXTI_Callback+0x3e>
	{
		if (STATE == IDLE || STATE == WAIT_COIN){
 8001c16:	4b17      	ldr	r3, [pc, #92]	@ (8001c74 <HAL_GPIO_EXTI_Callback+0x70>)
 8001c18:	781b      	ldrb	r3, [r3, #0]
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d003      	beq.n	8001c26 <HAL_GPIO_EXTI_Callback+0x22>
 8001c1e:	4b15      	ldr	r3, [pc, #84]	@ (8001c74 <HAL_GPIO_EXTI_Callback+0x70>)
 8001c20:	781b      	ldrb	r3, [r3, #0]
 8001c22:	2b01      	cmp	r3, #1
 8001c24:	d122      	bne.n	8001c6c <HAL_GPIO_EXTI_Callback+0x68>
			currentCoinAmount += COIN_VALUE;
 8001c26:	4b14      	ldr	r3, [pc, #80]	@ (8001c78 <HAL_GPIO_EXTI_Callback+0x74>)
 8001c28:	781b      	ldrb	r3, [r3, #0]
 8001c2a:	2205      	movs	r2, #5
 8001c2c:	4413      	add	r3, r2
 8001c2e:	b2da      	uxtb	r2, r3
 8001c30:	4b11      	ldr	r3, [pc, #68]	@ (8001c78 <HAL_GPIO_EXTI_Callback+0x74>)
 8001c32:	701a      	strb	r2, [r3, #0]
			transmitStringUART("Coin Detected | Current Coin Amount: %d\r\n", currentCoinAmount);
 8001c34:	4b10      	ldr	r3, [pc, #64]	@ (8001c78 <HAL_GPIO_EXTI_Callback+0x74>)
 8001c36:	781b      	ldrb	r3, [r3, #0]
 8001c38:	4619      	mov	r1, r3
 8001c3a:	4810      	ldr	r0, [pc, #64]	@ (8001c7c <HAL_GPIO_EXTI_Callback+0x78>)
 8001c3c:	f7ff ffbc 	bl	8001bb8 <transmitStringUART>
//		if (STATE == GAME){
//			STATE = DEPOSIT;
//			transmitStringUART("State changed to %s from EXTI_10\r\n", stateNames[STATE]);
//		}
//	}
}
 8001c40:	e014      	b.n	8001c6c <HAL_GPIO_EXTI_Callback+0x68>
	else if (GPIO_Pin == GPIO_PIN_9)
 8001c42:	88fb      	ldrh	r3, [r7, #6]
 8001c44:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001c48:	d110      	bne.n	8001c6c <HAL_GPIO_EXTI_Callback+0x68>
		if (STATE == WAIT_CONFIRM){
 8001c4a:	4b0a      	ldr	r3, [pc, #40]	@ (8001c74 <HAL_GPIO_EXTI_Callback+0x70>)
 8001c4c:	781b      	ldrb	r3, [r3, #0]
 8001c4e:	2b02      	cmp	r3, #2
 8001c50:	d10c      	bne.n	8001c6c <HAL_GPIO_EXTI_Callback+0x68>
			STATE = GAME;
 8001c52:	4b08      	ldr	r3, [pc, #32]	@ (8001c74 <HAL_GPIO_EXTI_Callback+0x70>)
 8001c54:	2203      	movs	r2, #3
 8001c56:	701a      	strb	r2, [r3, #0]
			transmitStringUART("State changed to %s\r\n", stateNames[STATE]);
 8001c58:	4b06      	ldr	r3, [pc, #24]	@ (8001c74 <HAL_GPIO_EXTI_Callback+0x70>)
 8001c5a:	781b      	ldrb	r3, [r3, #0]
 8001c5c:	461a      	mov	r2, r3
 8001c5e:	4b08      	ldr	r3, [pc, #32]	@ (8001c80 <HAL_GPIO_EXTI_Callback+0x7c>)
 8001c60:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c64:	4619      	mov	r1, r3
 8001c66:	4807      	ldr	r0, [pc, #28]	@ (8001c84 <HAL_GPIO_EXTI_Callback+0x80>)
 8001c68:	f7ff ffa6 	bl	8001bb8 <transmitStringUART>
}
 8001c6c:	bf00      	nop
 8001c6e:	3708      	adds	r7, #8
 8001c70:	46bd      	mov	sp, r7
 8001c72:	bd80      	pop	{r7, pc}
 8001c74:	20000000 	.word	0x20000000
 8001c78:	20000091 	.word	0x20000091
 8001c7c:	08006c70 	.word	0x08006c70
 8001c80:	20000004 	.word	0x20000004
 8001c84:	08006c58 	.word	0x08006c58

08001c88 <HAL_TIM_PeriodElapsedCallback>:



void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	b082      	sub	sp, #8
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	6078      	str	r0, [r7, #4]
	static int timeCount = 0;
	if (htim -> Instance == TIM2){
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001c98:	d130      	bne.n	8001cfc <HAL_TIM_PeriodElapsedCallback+0x74>
		if (STATE == WAIT_COIN) {
 8001c9a:	4b1a      	ldr	r3, [pc, #104]	@ (8001d04 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8001c9c:	781b      	ldrb	r3, [r3, #0]
 8001c9e:	2b01      	cmp	r3, #1
 8001ca0:	d12c      	bne.n	8001cfc <HAL_TIM_PeriodElapsedCallback+0x74>
			timeCount++;
 8001ca2:	4b19      	ldr	r3, [pc, #100]	@ (8001d08 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	3301      	adds	r3, #1
 8001ca8:	4a17      	ldr	r2, [pc, #92]	@ (8001d08 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8001caa:	6013      	str	r3, [r2, #0]
			timeCount%=11;
 8001cac:	4b16      	ldr	r3, [pc, #88]	@ (8001d08 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8001cae:	6819      	ldr	r1, [r3, #0]
 8001cb0:	4b16      	ldr	r3, [pc, #88]	@ (8001d0c <HAL_TIM_PeriodElapsedCallback+0x84>)
 8001cb2:	fb83 2301 	smull	r2, r3, r3, r1
 8001cb6:	105a      	asrs	r2, r3, #1
 8001cb8:	17cb      	asrs	r3, r1, #31
 8001cba:	1ad2      	subs	r2, r2, r3
 8001cbc:	4613      	mov	r3, r2
 8001cbe:	009b      	lsls	r3, r3, #2
 8001cc0:	4413      	add	r3, r2
 8001cc2:	005b      	lsls	r3, r3, #1
 8001cc4:	4413      	add	r3, r2
 8001cc6:	1aca      	subs	r2, r1, r3
 8001cc8:	4b0f      	ldr	r3, [pc, #60]	@ (8001d08 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8001cca:	601a      	str	r2, [r3, #0]
			if (timeCount >= WAIT_COIN_TIME_LIMIT) {
 8001ccc:	230a      	movs	r3, #10
 8001cce:	461a      	mov	r2, r3
 8001cd0:	4b0d      	ldr	r3, [pc, #52]	@ (8001d08 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	429a      	cmp	r2, r3
 8001cd6:	dc11      	bgt.n	8001cfc <HAL_TIM_PeriodElapsedCallback+0x74>
				currentCoinAmount = 0;
 8001cd8:	4b0d      	ldr	r3, [pc, #52]	@ (8001d10 <HAL_TIM_PeriodElapsedCallback+0x88>)
 8001cda:	2200      	movs	r2, #0
 8001cdc:	701a      	strb	r2, [r3, #0]
				STATE = IDLE;
 8001cde:	4b09      	ldr	r3, [pc, #36]	@ (8001d04 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	701a      	strb	r2, [r3, #0]
				transmitStringUART("WAIT_COIN exceeded %d seconds | State changed to %s\r\n", WAIT_COIN_TIME_LIMIT, stateNames[STATE]);
 8001ce4:	230a      	movs	r3, #10
 8001ce6:	4619      	mov	r1, r3
 8001ce8:	4b06      	ldr	r3, [pc, #24]	@ (8001d04 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8001cea:	781b      	ldrb	r3, [r3, #0]
 8001cec:	461a      	mov	r2, r3
 8001cee:	4b09      	ldr	r3, [pc, #36]	@ (8001d14 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8001cf0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001cf4:	461a      	mov	r2, r3
 8001cf6:	4808      	ldr	r0, [pc, #32]	@ (8001d18 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8001cf8:	f7ff ff5e 	bl	8001bb8 <transmitStringUART>
//			}
//
//		}

	}
}
 8001cfc:	bf00      	nop
 8001cfe:	3708      	adds	r7, #8
 8001d00:	46bd      	mov	sp, r7
 8001d02:	bd80      	pop	{r7, pc}
 8001d04:	20000000 	.word	0x20000000
 8001d08:	200000bc 	.word	0x200000bc
 8001d0c:	2e8ba2e9 	.word	0x2e8ba2e9
 8001d10:	20000091 	.word	0x20000091
 8001d14:	20000004 	.word	0x20000004
 8001d18:	08006c9c 	.word	0x08006c9c

08001d1c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001d1c:	b480      	push	{r7}
 8001d1e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001d20:	b672      	cpsid	i
}
 8001d22:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001d24:	bf00      	nop
 8001d26:	e7fd      	b.n	8001d24 <Error_Handler+0x8>

08001d28 <MX_SPI5_Init>:

SPI_HandleTypeDef hspi5;

/* SPI5 init function */
void MX_SPI5_Init(void)
{
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI5_Init 0 */

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  hspi5.Instance = SPI5;
 8001d2c:	4b1b      	ldr	r3, [pc, #108]	@ (8001d9c <MX_SPI5_Init+0x74>)
 8001d2e:	4a1c      	ldr	r2, [pc, #112]	@ (8001da0 <MX_SPI5_Init+0x78>)
 8001d30:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 8001d32:	4b1a      	ldr	r3, [pc, #104]	@ (8001d9c <MX_SPI5_Init+0x74>)
 8001d34:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001d38:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 8001d3a:	4b18      	ldr	r3, [pc, #96]	@ (8001d9c <MX_SPI5_Init+0x74>)
 8001d3c:	2200      	movs	r2, #0
 8001d3e:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 8001d40:	4b16      	ldr	r3, [pc, #88]	@ (8001d9c <MX_SPI5_Init+0x74>)
 8001d42:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8001d46:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001d48:	4b14      	ldr	r3, [pc, #80]	@ (8001d9c <MX_SPI5_Init+0x74>)
 8001d4a:	2200      	movs	r2, #0
 8001d4c:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001d4e:	4b13      	ldr	r3, [pc, #76]	@ (8001d9c <MX_SPI5_Init+0x74>)
 8001d50:	2200      	movs	r2, #0
 8001d52:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 8001d54:	4b11      	ldr	r3, [pc, #68]	@ (8001d9c <MX_SPI5_Init+0x74>)
 8001d56:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001d5a:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001d5c:	4b0f      	ldr	r3, [pc, #60]	@ (8001d9c <MX_SPI5_Init+0x74>)
 8001d5e:	2200      	movs	r2, #0
 8001d60:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001d62:	4b0e      	ldr	r3, [pc, #56]	@ (8001d9c <MX_SPI5_Init+0x74>)
 8001d64:	2200      	movs	r2, #0
 8001d66:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 8001d68:	4b0c      	ldr	r3, [pc, #48]	@ (8001d9c <MX_SPI5_Init+0x74>)
 8001d6a:	2200      	movs	r2, #0
 8001d6c:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001d6e:	4b0b      	ldr	r3, [pc, #44]	@ (8001d9c <MX_SPI5_Init+0x74>)
 8001d70:	2200      	movs	r2, #0
 8001d72:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi5.Init.CRCPolynomial = 7;
 8001d74:	4b09      	ldr	r3, [pc, #36]	@ (8001d9c <MX_SPI5_Init+0x74>)
 8001d76:	2207      	movs	r2, #7
 8001d78:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi5.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001d7a:	4b08      	ldr	r3, [pc, #32]	@ (8001d9c <MX_SPI5_Init+0x74>)
 8001d7c:	2200      	movs	r2, #0
 8001d7e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi5.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001d80:	4b06      	ldr	r3, [pc, #24]	@ (8001d9c <MX_SPI5_Init+0x74>)
 8001d82:	2208      	movs	r2, #8
 8001d84:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 8001d86:	4805      	ldr	r0, [pc, #20]	@ (8001d9c <MX_SPI5_Init+0x74>)
 8001d88:	f001 fff0 	bl	8003d6c <HAL_SPI_Init>
 8001d8c:	4603      	mov	r3, r0
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d001      	beq.n	8001d96 <MX_SPI5_Init+0x6e>
  {
    Error_Handler();
 8001d92:	f7ff ffc3 	bl	8001d1c <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 8001d96:	bf00      	nop
 8001d98:	bd80      	pop	{r7, pc}
 8001d9a:	bf00      	nop
 8001d9c:	200000c0 	.word	0x200000c0
 8001da0:	40015000 	.word	0x40015000

08001da4 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001da4:	b580      	push	{r7, lr}
 8001da6:	b08a      	sub	sp, #40	@ 0x28
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001dac:	f107 0314 	add.w	r3, r7, #20
 8001db0:	2200      	movs	r2, #0
 8001db2:	601a      	str	r2, [r3, #0]
 8001db4:	605a      	str	r2, [r3, #4]
 8001db6:	609a      	str	r2, [r3, #8]
 8001db8:	60da      	str	r2, [r3, #12]
 8001dba:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI5)
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	4a17      	ldr	r2, [pc, #92]	@ (8001e20 <HAL_SPI_MspInit+0x7c>)
 8001dc2:	4293      	cmp	r3, r2
 8001dc4:	d128      	bne.n	8001e18 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* SPI5 clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 8001dc6:	4b17      	ldr	r3, [pc, #92]	@ (8001e24 <HAL_SPI_MspInit+0x80>)
 8001dc8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001dca:	4a16      	ldr	r2, [pc, #88]	@ (8001e24 <HAL_SPI_MspInit+0x80>)
 8001dcc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8001dd0:	6453      	str	r3, [r2, #68]	@ 0x44
 8001dd2:	4b14      	ldr	r3, [pc, #80]	@ (8001e24 <HAL_SPI_MspInit+0x80>)
 8001dd4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001dd6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001dda:	613b      	str	r3, [r7, #16]
 8001ddc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001dde:	4b11      	ldr	r3, [pc, #68]	@ (8001e24 <HAL_SPI_MspInit+0x80>)
 8001de0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001de2:	4a10      	ldr	r2, [pc, #64]	@ (8001e24 <HAL_SPI_MspInit+0x80>)
 8001de4:	f043 0320 	orr.w	r3, r3, #32
 8001de8:	6313      	str	r3, [r2, #48]	@ 0x30
 8001dea:	4b0e      	ldr	r3, [pc, #56]	@ (8001e24 <HAL_SPI_MspInit+0x80>)
 8001dec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dee:	f003 0320 	and.w	r3, r3, #32
 8001df2:	60fb      	str	r3, [r7, #12]
 8001df4:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    GPIO_InitStruct.Pin = SCK_Pin|SDO_Pin|SDI_Pin;
 8001df6:	f44f 7360 	mov.w	r3, #896	@ 0x380
 8001dfa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dfc:	2302      	movs	r3, #2
 8001dfe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e00:	2300      	movs	r3, #0
 8001e02:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e04:	2303      	movs	r3, #3
 8001e06:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8001e08:	2305      	movs	r3, #5
 8001e0a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001e0c:	f107 0314 	add.w	r3, r7, #20
 8001e10:	4619      	mov	r1, r3
 8001e12:	4805      	ldr	r0, [pc, #20]	@ (8001e28 <HAL_SPI_MspInit+0x84>)
 8001e14:	f000 fc58 	bl	80026c8 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }
}
 8001e18:	bf00      	nop
 8001e1a:	3728      	adds	r7, #40	@ 0x28
 8001e1c:	46bd      	mov	sp, r7
 8001e1e:	bd80      	pop	{r7, pc}
 8001e20:	40015000 	.word	0x40015000
 8001e24:	40023800 	.word	0x40023800
 8001e28:	40021400 	.word	0x40021400

08001e2c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	b082      	sub	sp, #8
 8001e30:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001e32:	4b0f      	ldr	r3, [pc, #60]	@ (8001e70 <HAL_MspInit+0x44>)
 8001e34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e36:	4a0e      	ldr	r2, [pc, #56]	@ (8001e70 <HAL_MspInit+0x44>)
 8001e38:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001e3c:	6413      	str	r3, [r2, #64]	@ 0x40
 8001e3e:	4b0c      	ldr	r3, [pc, #48]	@ (8001e70 <HAL_MspInit+0x44>)
 8001e40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e42:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e46:	607b      	str	r3, [r7, #4]
 8001e48:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e4a:	4b09      	ldr	r3, [pc, #36]	@ (8001e70 <HAL_MspInit+0x44>)
 8001e4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e4e:	4a08      	ldr	r2, [pc, #32]	@ (8001e70 <HAL_MspInit+0x44>)
 8001e50:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001e54:	6453      	str	r3, [r2, #68]	@ 0x44
 8001e56:	4b06      	ldr	r3, [pc, #24]	@ (8001e70 <HAL_MspInit+0x44>)
 8001e58:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e5a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001e5e:	603b      	str	r3, [r7, #0]
 8001e60:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_2);
 8001e62:	2005      	movs	r0, #5
 8001e64:	f000 fbee 	bl	8002644 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001e68:	bf00      	nop
 8001e6a:	3708      	adds	r7, #8
 8001e6c:	46bd      	mov	sp, r7
 8001e6e:	bd80      	pop	{r7, pc}
 8001e70:	40023800 	.word	0x40023800

08001e74 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001e74:	b480      	push	{r7}
 8001e76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001e78:	bf00      	nop
 8001e7a:	e7fd      	b.n	8001e78 <NMI_Handler+0x4>

08001e7c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001e7c:	b480      	push	{r7}
 8001e7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001e80:	bf00      	nop
 8001e82:	e7fd      	b.n	8001e80 <HardFault_Handler+0x4>

08001e84 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001e84:	b480      	push	{r7}
 8001e86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001e88:	bf00      	nop
 8001e8a:	e7fd      	b.n	8001e88 <MemManage_Handler+0x4>

08001e8c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001e8c:	b480      	push	{r7}
 8001e8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001e90:	bf00      	nop
 8001e92:	e7fd      	b.n	8001e90 <BusFault_Handler+0x4>

08001e94 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001e94:	b480      	push	{r7}
 8001e96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001e98:	bf00      	nop
 8001e9a:	e7fd      	b.n	8001e98 <UsageFault_Handler+0x4>

08001e9c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001e9c:	b480      	push	{r7}
 8001e9e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001ea0:	bf00      	nop
 8001ea2:	46bd      	mov	sp, r7
 8001ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea8:	4770      	bx	lr

08001eaa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001eaa:	b480      	push	{r7}
 8001eac:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001eae:	bf00      	nop
 8001eb0:	46bd      	mov	sp, r7
 8001eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb6:	4770      	bx	lr

08001eb8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001eb8:	b480      	push	{r7}
 8001eba:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001ebc:	bf00      	nop
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec4:	4770      	bx	lr

08001ec6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001ec6:	b580      	push	{r7, lr}
 8001ec8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001eca:	f000 faa7 	bl	800241c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001ece:	bf00      	nop
 8001ed0:	bd80      	pop	{r7, pc}

08001ed2 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001ed2:	b580      	push	{r7, lr}
 8001ed4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8001ed6:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8001eda:	f000 fdd3 	bl	8002a84 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 8001ede:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8001ee2:	f000 fdcf 	bl	8002a84 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001ee6:	bf00      	nop
 8001ee8:	bd80      	pop	{r7, pc}
	...

08001eec <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001eec:	b580      	push	{r7, lr}
 8001eee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001ef0:	4802      	ldr	r0, [pc, #8]	@ (8001efc <TIM2_IRQHandler+0x10>)
 8001ef2:	f002 fd37 	bl	8004964 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001ef6:	bf00      	nop
 8001ef8:	bd80      	pop	{r7, pc}
 8001efa:	bf00      	nop
 8001efc:	20000128 	.word	0x20000128

08001f00 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001f00:	b580      	push	{r7, lr}
 8001f02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 8001f04:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8001f08:	f000 fdbc 	bl	8002a84 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(USER_Btn_Pin);
 8001f0c:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8001f10:	f000 fdb8 	bl	8002a84 <HAL_GPIO_EXTI_IRQHandler>
//  if (STATE == GAME){
//		STATE = DEPOSIT;
//		transmitStringUART("State changed to %s from EXTI_10\r\n", stateNames[STATE]);
//	}
  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001f14:	bf00      	nop
 8001f16:	bd80      	pop	{r7, pc}

08001f18 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	b086      	sub	sp, #24
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001f20:	4a14      	ldr	r2, [pc, #80]	@ (8001f74 <_sbrk+0x5c>)
 8001f22:	4b15      	ldr	r3, [pc, #84]	@ (8001f78 <_sbrk+0x60>)
 8001f24:	1ad3      	subs	r3, r2, r3
 8001f26:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001f28:	697b      	ldr	r3, [r7, #20]
 8001f2a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001f2c:	4b13      	ldr	r3, [pc, #76]	@ (8001f7c <_sbrk+0x64>)
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d102      	bne.n	8001f3a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001f34:	4b11      	ldr	r3, [pc, #68]	@ (8001f7c <_sbrk+0x64>)
 8001f36:	4a12      	ldr	r2, [pc, #72]	@ (8001f80 <_sbrk+0x68>)
 8001f38:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001f3a:	4b10      	ldr	r3, [pc, #64]	@ (8001f7c <_sbrk+0x64>)
 8001f3c:	681a      	ldr	r2, [r3, #0]
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	4413      	add	r3, r2
 8001f42:	693a      	ldr	r2, [r7, #16]
 8001f44:	429a      	cmp	r2, r3
 8001f46:	d207      	bcs.n	8001f58 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001f48:	f004 f9cc 	bl	80062e4 <__errno>
 8001f4c:	4603      	mov	r3, r0
 8001f4e:	220c      	movs	r2, #12
 8001f50:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001f52:	f04f 33ff 	mov.w	r3, #4294967295
 8001f56:	e009      	b.n	8001f6c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001f58:	4b08      	ldr	r3, [pc, #32]	@ (8001f7c <_sbrk+0x64>)
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001f5e:	4b07      	ldr	r3, [pc, #28]	@ (8001f7c <_sbrk+0x64>)
 8001f60:	681a      	ldr	r2, [r3, #0]
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	4413      	add	r3, r2
 8001f66:	4a05      	ldr	r2, [pc, #20]	@ (8001f7c <_sbrk+0x64>)
 8001f68:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001f6a:	68fb      	ldr	r3, [r7, #12]
}
 8001f6c:	4618      	mov	r0, r3
 8001f6e:	3718      	adds	r7, #24
 8001f70:	46bd      	mov	sp, r7
 8001f72:	bd80      	pop	{r7, pc}
 8001f74:	20080000 	.word	0x20080000
 8001f78:	00000400 	.word	0x00000400
 8001f7c:	20000124 	.word	0x20000124
 8001f80:	20000398 	.word	0x20000398

08001f84 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001f84:	b480      	push	{r7}
 8001f86:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001f88:	4b06      	ldr	r3, [pc, #24]	@ (8001fa4 <SystemInit+0x20>)
 8001f8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001f8e:	4a05      	ldr	r2, [pc, #20]	@ (8001fa4 <SystemInit+0x20>)
 8001f90:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001f94:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001f98:	bf00      	nop
 8001f9a:	46bd      	mov	sp, r7
 8001f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa0:	4770      	bx	lr
 8001fa2:	bf00      	nop
 8001fa4:	e000ed00 	.word	0xe000ed00

08001fa8 <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim3;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	b088      	sub	sp, #32
 8001fac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001fae:	f107 0310 	add.w	r3, r7, #16
 8001fb2:	2200      	movs	r2, #0
 8001fb4:	601a      	str	r2, [r3, #0]
 8001fb6:	605a      	str	r2, [r3, #4]
 8001fb8:	609a      	str	r2, [r3, #8]
 8001fba:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001fbc:	1d3b      	adds	r3, r7, #4
 8001fbe:	2200      	movs	r2, #0
 8001fc0:	601a      	str	r2, [r3, #0]
 8001fc2:	605a      	str	r2, [r3, #4]
 8001fc4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001fc6:	4b1d      	ldr	r3, [pc, #116]	@ (800203c <MX_TIM2_Init+0x94>)
 8001fc8:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001fcc:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 108-1;
 8001fce:	4b1b      	ldr	r3, [pc, #108]	@ (800203c <MX_TIM2_Init+0x94>)
 8001fd0:	226b      	movs	r2, #107	@ 0x6b
 8001fd2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001fd4:	4b19      	ldr	r3, [pc, #100]	@ (800203c <MX_TIM2_Init+0x94>)
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000000-1;
 8001fda:	4b18      	ldr	r3, [pc, #96]	@ (800203c <MX_TIM2_Init+0x94>)
 8001fdc:	4a18      	ldr	r2, [pc, #96]	@ (8002040 <MX_TIM2_Init+0x98>)
 8001fde:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001fe0:	4b16      	ldr	r3, [pc, #88]	@ (800203c <MX_TIM2_Init+0x94>)
 8001fe2:	2200      	movs	r2, #0
 8001fe4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001fe6:	4b15      	ldr	r3, [pc, #84]	@ (800203c <MX_TIM2_Init+0x94>)
 8001fe8:	2200      	movs	r2, #0
 8001fea:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001fec:	4813      	ldr	r0, [pc, #76]	@ (800203c <MX_TIM2_Init+0x94>)
 8001fee:	f002 fa5f 	bl	80044b0 <HAL_TIM_Base_Init>
 8001ff2:	4603      	mov	r3, r0
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d001      	beq.n	8001ffc <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001ff8:	f7ff fe90 	bl	8001d1c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001ffc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002000:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002002:	f107 0310 	add.w	r3, r7, #16
 8002006:	4619      	mov	r1, r3
 8002008:	480c      	ldr	r0, [pc, #48]	@ (800203c <MX_TIM2_Init+0x94>)
 800200a:	f002 fedf 	bl	8004dcc <HAL_TIM_ConfigClockSource>
 800200e:	4603      	mov	r3, r0
 8002010:	2b00      	cmp	r3, #0
 8002012:	d001      	beq.n	8002018 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8002014:	f7ff fe82 	bl	8001d1c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002018:	2300      	movs	r3, #0
 800201a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800201c:	2300      	movs	r3, #0
 800201e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002020:	1d3b      	adds	r3, r7, #4
 8002022:	4619      	mov	r1, r3
 8002024:	4805      	ldr	r0, [pc, #20]	@ (800203c <MX_TIM2_Init+0x94>)
 8002026:	f003 fb81 	bl	800572c <HAL_TIMEx_MasterConfigSynchronization>
 800202a:	4603      	mov	r3, r0
 800202c:	2b00      	cmp	r3, #0
 800202e:	d001      	beq.n	8002034 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8002030:	f7ff fe74 	bl	8001d1c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002034:	bf00      	nop
 8002036:	3720      	adds	r7, #32
 8002038:	46bd      	mov	sp, r7
 800203a:	bd80      	pop	{r7, pc}
 800203c:	20000128 	.word	0x20000128
 8002040:	000f423f 	.word	0x000f423f

08002044 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8002044:	b580      	push	{r7, lr}
 8002046:	b08e      	sub	sp, #56	@ 0x38
 8002048:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800204a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800204e:	2200      	movs	r2, #0
 8002050:	601a      	str	r2, [r3, #0]
 8002052:	605a      	str	r2, [r3, #4]
 8002054:	609a      	str	r2, [r3, #8]
 8002056:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002058:	f107 031c 	add.w	r3, r7, #28
 800205c:	2200      	movs	r2, #0
 800205e:	601a      	str	r2, [r3, #0]
 8002060:	605a      	str	r2, [r3, #4]
 8002062:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002064:	463b      	mov	r3, r7
 8002066:	2200      	movs	r2, #0
 8002068:	601a      	str	r2, [r3, #0]
 800206a:	605a      	str	r2, [r3, #4]
 800206c:	609a      	str	r2, [r3, #8]
 800206e:	60da      	str	r2, [r3, #12]
 8002070:	611a      	str	r2, [r3, #16]
 8002072:	615a      	str	r2, [r3, #20]
 8002074:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002076:	4b34      	ldr	r3, [pc, #208]	@ (8002148 <MX_TIM3_Init+0x104>)
 8002078:	4a34      	ldr	r2, [pc, #208]	@ (800214c <MX_TIM3_Init+0x108>)
 800207a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 108-1;
 800207c:	4b32      	ldr	r3, [pc, #200]	@ (8002148 <MX_TIM3_Init+0x104>)
 800207e:	226b      	movs	r2, #107	@ 0x6b
 8002080:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002082:	4b31      	ldr	r3, [pc, #196]	@ (8002148 <MX_TIM3_Init+0x104>)
 8002084:	2200      	movs	r2, #0
 8002086:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 10000-1;
 8002088:	4b2f      	ldr	r3, [pc, #188]	@ (8002148 <MX_TIM3_Init+0x104>)
 800208a:	f242 720f 	movw	r2, #9999	@ 0x270f
 800208e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002090:	4b2d      	ldr	r3, [pc, #180]	@ (8002148 <MX_TIM3_Init+0x104>)
 8002092:	2200      	movs	r2, #0
 8002094:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002096:	4b2c      	ldr	r3, [pc, #176]	@ (8002148 <MX_TIM3_Init+0x104>)
 8002098:	2200      	movs	r2, #0
 800209a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800209c:	482a      	ldr	r0, [pc, #168]	@ (8002148 <MX_TIM3_Init+0x104>)
 800209e:	f002 fa07 	bl	80044b0 <HAL_TIM_Base_Init>
 80020a2:	4603      	mov	r3, r0
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d001      	beq.n	80020ac <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 80020a8:	f7ff fe38 	bl	8001d1c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80020ac:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80020b0:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80020b2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80020b6:	4619      	mov	r1, r3
 80020b8:	4823      	ldr	r0, [pc, #140]	@ (8002148 <MX_TIM3_Init+0x104>)
 80020ba:	f002 fe87 	bl	8004dcc <HAL_TIM_ConfigClockSource>
 80020be:	4603      	mov	r3, r0
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d001      	beq.n	80020c8 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 80020c4:	f7ff fe2a 	bl	8001d1c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80020c8:	481f      	ldr	r0, [pc, #124]	@ (8002148 <MX_TIM3_Init+0x104>)
 80020ca:	f002 faf0 	bl	80046ae <HAL_TIM_PWM_Init>
 80020ce:	4603      	mov	r3, r0
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d001      	beq.n	80020d8 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 80020d4:	f7ff fe22 	bl	8001d1c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80020d8:	2300      	movs	r3, #0
 80020da:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80020dc:	2300      	movs	r3, #0
 80020de:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80020e0:	f107 031c 	add.w	r3, r7, #28
 80020e4:	4619      	mov	r1, r3
 80020e6:	4818      	ldr	r0, [pc, #96]	@ (8002148 <MX_TIM3_Init+0x104>)
 80020e8:	f003 fb20 	bl	800572c <HAL_TIMEx_MasterConfigSynchronization>
 80020ec:	4603      	mov	r3, r0
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d001      	beq.n	80020f6 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 80020f2:	f7ff fe13 	bl	8001d1c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80020f6:	2360      	movs	r3, #96	@ 0x60
 80020f8:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 4000;
 80020fa:	f44f 637a 	mov.w	r3, #4000	@ 0xfa0
 80020fe:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002100:	2300      	movs	r3, #0
 8002102:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002104:	2300      	movs	r3, #0
 8002106:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002108:	463b      	mov	r3, r7
 800210a:	2200      	movs	r2, #0
 800210c:	4619      	mov	r1, r3
 800210e:	480e      	ldr	r0, [pc, #56]	@ (8002148 <MX_TIM3_Init+0x104>)
 8002110:	f002 fd48 	bl	8004ba4 <HAL_TIM_PWM_ConfigChannel>
 8002114:	4603      	mov	r3, r0
 8002116:	2b00      	cmp	r3, #0
 8002118:	d001      	beq.n	800211e <MX_TIM3_Init+0xda>
  {
    Error_Handler();
 800211a:	f7ff fdff 	bl	8001d1c <Error_Handler>
  }
  sConfigOC.Pulse = 8000;
 800211e:	f44f 53fa 	mov.w	r3, #8000	@ 0x1f40
 8002122:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002124:	463b      	mov	r3, r7
 8002126:	2204      	movs	r2, #4
 8002128:	4619      	mov	r1, r3
 800212a:	4807      	ldr	r0, [pc, #28]	@ (8002148 <MX_TIM3_Init+0x104>)
 800212c:	f002 fd3a 	bl	8004ba4 <HAL_TIM_PWM_ConfigChannel>
 8002130:	4603      	mov	r3, r0
 8002132:	2b00      	cmp	r3, #0
 8002134:	d001      	beq.n	800213a <MX_TIM3_Init+0xf6>
  {
    Error_Handler();
 8002136:	f7ff fdf1 	bl	8001d1c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800213a:	4803      	ldr	r0, [pc, #12]	@ (8002148 <MX_TIM3_Init+0x104>)
 800213c:	f000 f840 	bl	80021c0 <HAL_TIM_MspPostInit>

}
 8002140:	bf00      	nop
 8002142:	3738      	adds	r7, #56	@ 0x38
 8002144:	46bd      	mov	sp, r7
 8002146:	bd80      	pop	{r7, pc}
 8002148:	20000174 	.word	0x20000174
 800214c:	40000400 	.word	0x40000400

08002150 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002150:	b580      	push	{r7, lr}
 8002152:	b084      	sub	sp, #16
 8002154:	af00      	add	r7, sp, #0
 8002156:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002160:	d114      	bne.n	800218c <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002162:	4b15      	ldr	r3, [pc, #84]	@ (80021b8 <HAL_TIM_Base_MspInit+0x68>)
 8002164:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002166:	4a14      	ldr	r2, [pc, #80]	@ (80021b8 <HAL_TIM_Base_MspInit+0x68>)
 8002168:	f043 0301 	orr.w	r3, r3, #1
 800216c:	6413      	str	r3, [r2, #64]	@ 0x40
 800216e:	4b12      	ldr	r3, [pc, #72]	@ (80021b8 <HAL_TIM_Base_MspInit+0x68>)
 8002170:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002172:	f003 0301 	and.w	r3, r3, #1
 8002176:	60fb      	str	r3, [r7, #12]
 8002178:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 1, 0);
 800217a:	2200      	movs	r2, #0
 800217c:	2101      	movs	r1, #1
 800217e:	201c      	movs	r0, #28
 8002180:	f000 fa6b 	bl	800265a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002184:	201c      	movs	r0, #28
 8002186:	f000 fa84 	bl	8002692 <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM3_CLK_ENABLE();
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 800218a:	e010      	b.n	80021ae <HAL_TIM_Base_MspInit+0x5e>
  else if(tim_baseHandle->Instance==TIM3)
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	4a0a      	ldr	r2, [pc, #40]	@ (80021bc <HAL_TIM_Base_MspInit+0x6c>)
 8002192:	4293      	cmp	r3, r2
 8002194:	d10b      	bne.n	80021ae <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002196:	4b08      	ldr	r3, [pc, #32]	@ (80021b8 <HAL_TIM_Base_MspInit+0x68>)
 8002198:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800219a:	4a07      	ldr	r2, [pc, #28]	@ (80021b8 <HAL_TIM_Base_MspInit+0x68>)
 800219c:	f043 0302 	orr.w	r3, r3, #2
 80021a0:	6413      	str	r3, [r2, #64]	@ 0x40
 80021a2:	4b05      	ldr	r3, [pc, #20]	@ (80021b8 <HAL_TIM_Base_MspInit+0x68>)
 80021a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021a6:	f003 0302 	and.w	r3, r3, #2
 80021aa:	60bb      	str	r3, [r7, #8]
 80021ac:	68bb      	ldr	r3, [r7, #8]
}
 80021ae:	bf00      	nop
 80021b0:	3710      	adds	r7, #16
 80021b2:	46bd      	mov	sp, r7
 80021b4:	bd80      	pop	{r7, pc}
 80021b6:	bf00      	nop
 80021b8:	40023800 	.word	0x40023800
 80021bc:	40000400 	.word	0x40000400

080021c0 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80021c0:	b580      	push	{r7, lr}
 80021c2:	b088      	sub	sp, #32
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021c8:	f107 030c 	add.w	r3, r7, #12
 80021cc:	2200      	movs	r2, #0
 80021ce:	601a      	str	r2, [r3, #0]
 80021d0:	605a      	str	r2, [r3, #4]
 80021d2:	609a      	str	r2, [r3, #8]
 80021d4:	60da      	str	r2, [r3, #12]
 80021d6:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	4a11      	ldr	r2, [pc, #68]	@ (8002224 <HAL_TIM_MspPostInit+0x64>)
 80021de:	4293      	cmp	r3, r2
 80021e0:	d11b      	bne.n	800221a <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80021e2:	4b11      	ldr	r3, [pc, #68]	@ (8002228 <HAL_TIM_MspPostInit+0x68>)
 80021e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021e6:	4a10      	ldr	r2, [pc, #64]	@ (8002228 <HAL_TIM_MspPostInit+0x68>)
 80021e8:	f043 0301 	orr.w	r3, r3, #1
 80021ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80021ee:	4b0e      	ldr	r3, [pc, #56]	@ (8002228 <HAL_TIM_MspPostInit+0x68>)
 80021f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021f2:	f003 0301 	and.w	r3, r3, #1
 80021f6:	60bb      	str	r3, [r7, #8]
 80021f8:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80021fa:	23c0      	movs	r3, #192	@ 0xc0
 80021fc:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021fe:	2302      	movs	r3, #2
 8002200:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002202:	2300      	movs	r3, #0
 8002204:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002206:	2303      	movs	r3, #3
 8002208:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800220a:	2302      	movs	r3, #2
 800220c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800220e:	f107 030c 	add.w	r3, r7, #12
 8002212:	4619      	mov	r1, r3
 8002214:	4805      	ldr	r0, [pc, #20]	@ (800222c <HAL_TIM_MspPostInit+0x6c>)
 8002216:	f000 fa57 	bl	80026c8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800221a:	bf00      	nop
 800221c:	3720      	adds	r7, #32
 800221e:	46bd      	mov	sp, r7
 8002220:	bd80      	pop	{r7, pc}
 8002222:	bf00      	nop
 8002224:	40000400 	.word	0x40000400
 8002228:	40023800 	.word	0x40023800
 800222c:	40020000 	.word	0x40020000

08002230 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8002230:	b580      	push	{r7, lr}
 8002232:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002234:	4b14      	ldr	r3, [pc, #80]	@ (8002288 <MX_USART3_UART_Init+0x58>)
 8002236:	4a15      	ldr	r2, [pc, #84]	@ (800228c <MX_USART3_UART_Init+0x5c>)
 8002238:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800223a:	4b13      	ldr	r3, [pc, #76]	@ (8002288 <MX_USART3_UART_Init+0x58>)
 800223c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002240:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002242:	4b11      	ldr	r3, [pc, #68]	@ (8002288 <MX_USART3_UART_Init+0x58>)
 8002244:	2200      	movs	r2, #0
 8002246:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002248:	4b0f      	ldr	r3, [pc, #60]	@ (8002288 <MX_USART3_UART_Init+0x58>)
 800224a:	2200      	movs	r2, #0
 800224c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800224e:	4b0e      	ldr	r3, [pc, #56]	@ (8002288 <MX_USART3_UART_Init+0x58>)
 8002250:	2200      	movs	r2, #0
 8002252:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002254:	4b0c      	ldr	r3, [pc, #48]	@ (8002288 <MX_USART3_UART_Init+0x58>)
 8002256:	220c      	movs	r2, #12
 8002258:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800225a:	4b0b      	ldr	r3, [pc, #44]	@ (8002288 <MX_USART3_UART_Init+0x58>)
 800225c:	2200      	movs	r2, #0
 800225e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002260:	4b09      	ldr	r3, [pc, #36]	@ (8002288 <MX_USART3_UART_Init+0x58>)
 8002262:	2200      	movs	r2, #0
 8002264:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002266:	4b08      	ldr	r3, [pc, #32]	@ (8002288 <MX_USART3_UART_Init+0x58>)
 8002268:	2200      	movs	r2, #0
 800226a:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800226c:	4b06      	ldr	r3, [pc, #24]	@ (8002288 <MX_USART3_UART_Init+0x58>)
 800226e:	2200      	movs	r2, #0
 8002270:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002272:	4805      	ldr	r0, [pc, #20]	@ (8002288 <MX_USART3_UART_Init+0x58>)
 8002274:	f003 fb06 	bl	8005884 <HAL_UART_Init>
 8002278:	4603      	mov	r3, r0
 800227a:	2b00      	cmp	r3, #0
 800227c:	d001      	beq.n	8002282 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 800227e:	f7ff fd4d 	bl	8001d1c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002282:	bf00      	nop
 8002284:	bd80      	pop	{r7, pc}
 8002286:	bf00      	nop
 8002288:	200001c0 	.word	0x200001c0
 800228c:	40004800 	.word	0x40004800

08002290 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002290:	b580      	push	{r7, lr}
 8002292:	b0ae      	sub	sp, #184	@ 0xb8
 8002294:	af00      	add	r7, sp, #0
 8002296:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002298:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 800229c:	2200      	movs	r2, #0
 800229e:	601a      	str	r2, [r3, #0]
 80022a0:	605a      	str	r2, [r3, #4]
 80022a2:	609a      	str	r2, [r3, #8]
 80022a4:	60da      	str	r2, [r3, #12]
 80022a6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80022a8:	f107 0314 	add.w	r3, r7, #20
 80022ac:	2290      	movs	r2, #144	@ 0x90
 80022ae:	2100      	movs	r1, #0
 80022b0:	4618      	mov	r0, r3
 80022b2:	f004 f80f 	bl	80062d4 <memset>
  if(uartHandle->Instance==USART3)
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	4a22      	ldr	r2, [pc, #136]	@ (8002344 <HAL_UART_MspInit+0xb4>)
 80022bc:	4293      	cmp	r3, r2
 80022be:	d13c      	bne.n	800233a <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80022c0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80022c4:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80022c6:	2300      	movs	r3, #0
 80022c8:	663b      	str	r3, [r7, #96]	@ 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80022ca:	f107 0314 	add.w	r3, r7, #20
 80022ce:	4618      	mov	r0, r3
 80022d0:	f001 f924 	bl	800351c <HAL_RCCEx_PeriphCLKConfig>
 80022d4:	4603      	mov	r3, r0
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d001      	beq.n	80022de <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80022da:	f7ff fd1f 	bl	8001d1c <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80022de:	4b1a      	ldr	r3, [pc, #104]	@ (8002348 <HAL_UART_MspInit+0xb8>)
 80022e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022e2:	4a19      	ldr	r2, [pc, #100]	@ (8002348 <HAL_UART_MspInit+0xb8>)
 80022e4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80022e8:	6413      	str	r3, [r2, #64]	@ 0x40
 80022ea:	4b17      	ldr	r3, [pc, #92]	@ (8002348 <HAL_UART_MspInit+0xb8>)
 80022ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022ee:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80022f2:	613b      	str	r3, [r7, #16]
 80022f4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80022f6:	4b14      	ldr	r3, [pc, #80]	@ (8002348 <HAL_UART_MspInit+0xb8>)
 80022f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022fa:	4a13      	ldr	r2, [pc, #76]	@ (8002348 <HAL_UART_MspInit+0xb8>)
 80022fc:	f043 0308 	orr.w	r3, r3, #8
 8002300:	6313      	str	r3, [r2, #48]	@ 0x30
 8002302:	4b11      	ldr	r3, [pc, #68]	@ (8002348 <HAL_UART_MspInit+0xb8>)
 8002304:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002306:	f003 0308 	and.w	r3, r3, #8
 800230a:	60fb      	str	r3, [r7, #12]
 800230c:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 800230e:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8002312:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002316:	2302      	movs	r3, #2
 8002318:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800231c:	2300      	movs	r3, #0
 800231e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002322:	2303      	movs	r3, #3
 8002324:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002328:	2307      	movs	r3, #7
 800232a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800232e:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8002332:	4619      	mov	r1, r3
 8002334:	4805      	ldr	r0, [pc, #20]	@ (800234c <HAL_UART_MspInit+0xbc>)
 8002336:	f000 f9c7 	bl	80026c8 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 800233a:	bf00      	nop
 800233c:	37b8      	adds	r7, #184	@ 0xb8
 800233e:	46bd      	mov	sp, r7
 8002340:	bd80      	pop	{r7, pc}
 8002342:	bf00      	nop
 8002344:	40004800 	.word	0x40004800
 8002348:	40023800 	.word	0x40023800
 800234c:	40020c00 	.word	0x40020c00

08002350 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002350:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002388 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002354:	480d      	ldr	r0, [pc, #52]	@ (800238c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002356:	490e      	ldr	r1, [pc, #56]	@ (8002390 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002358:	4a0e      	ldr	r2, [pc, #56]	@ (8002394 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800235a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800235c:	e002      	b.n	8002364 <LoopCopyDataInit>

0800235e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800235e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002360:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002362:	3304      	adds	r3, #4

08002364 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002364:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002366:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002368:	d3f9      	bcc.n	800235e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800236a:	4a0b      	ldr	r2, [pc, #44]	@ (8002398 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800236c:	4c0b      	ldr	r4, [pc, #44]	@ (800239c <LoopFillZerobss+0x26>)
  movs r3, #0
 800236e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002370:	e001      	b.n	8002376 <LoopFillZerobss>

08002372 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002372:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002374:	3204      	adds	r2, #4

08002376 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002376:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002378:	d3fb      	bcc.n	8002372 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800237a:	f7ff fe03 	bl	8001f84 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800237e:	f003 ffb7 	bl	80062f0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002382:	f7ff fa25 	bl	80017d0 <main>
  bx  lr    
 8002386:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002388:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 800238c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002390:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8002394:	08007c00 	.word	0x08007c00
  ldr r2, =_sbss
 8002398:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 800239c:	20000394 	.word	0x20000394

080023a0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80023a0:	e7fe      	b.n	80023a0 <ADC_IRQHandler>

080023a2 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80023a2:	b580      	push	{r7, lr}
 80023a4:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80023a6:	2003      	movs	r0, #3
 80023a8:	f000 f94c 	bl	8002644 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80023ac:	2000      	movs	r0, #0
 80023ae:	f000 f805 	bl	80023bc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80023b2:	f7ff fd3b 	bl	8001e2c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80023b6:	2300      	movs	r3, #0
}
 80023b8:	4618      	mov	r0, r3
 80023ba:	bd80      	pop	{r7, pc}

080023bc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80023bc:	b580      	push	{r7, lr}
 80023be:	b082      	sub	sp, #8
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80023c4:	4b12      	ldr	r3, [pc, #72]	@ (8002410 <HAL_InitTick+0x54>)
 80023c6:	681a      	ldr	r2, [r3, #0]
 80023c8:	4b12      	ldr	r3, [pc, #72]	@ (8002414 <HAL_InitTick+0x58>)
 80023ca:	781b      	ldrb	r3, [r3, #0]
 80023cc:	4619      	mov	r1, r3
 80023ce:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80023d2:	fbb3 f3f1 	udiv	r3, r3, r1
 80023d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80023da:	4618      	mov	r0, r3
 80023dc:	f000 f967 	bl	80026ae <HAL_SYSTICK_Config>
 80023e0:	4603      	mov	r3, r0
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d001      	beq.n	80023ea <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80023e6:	2301      	movs	r3, #1
 80023e8:	e00e      	b.n	8002408 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	2b0f      	cmp	r3, #15
 80023ee:	d80a      	bhi.n	8002406 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80023f0:	2200      	movs	r2, #0
 80023f2:	6879      	ldr	r1, [r7, #4]
 80023f4:	f04f 30ff 	mov.w	r0, #4294967295
 80023f8:	f000 f92f 	bl	800265a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80023fc:	4a06      	ldr	r2, [pc, #24]	@ (8002418 <HAL_InitTick+0x5c>)
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002402:	2300      	movs	r3, #0
 8002404:	e000      	b.n	8002408 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002406:	2301      	movs	r3, #1
}
 8002408:	4618      	mov	r0, r3
 800240a:	3708      	adds	r7, #8
 800240c:	46bd      	mov	sp, r7
 800240e:	bd80      	pop	{r7, pc}
 8002410:	20000018 	.word	0x20000018
 8002414:	20000020 	.word	0x20000020
 8002418:	2000001c 	.word	0x2000001c

0800241c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800241c:	b480      	push	{r7}
 800241e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002420:	4b06      	ldr	r3, [pc, #24]	@ (800243c <HAL_IncTick+0x20>)
 8002422:	781b      	ldrb	r3, [r3, #0]
 8002424:	461a      	mov	r2, r3
 8002426:	4b06      	ldr	r3, [pc, #24]	@ (8002440 <HAL_IncTick+0x24>)
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	4413      	add	r3, r2
 800242c:	4a04      	ldr	r2, [pc, #16]	@ (8002440 <HAL_IncTick+0x24>)
 800242e:	6013      	str	r3, [r2, #0]
}
 8002430:	bf00      	nop
 8002432:	46bd      	mov	sp, r7
 8002434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002438:	4770      	bx	lr
 800243a:	bf00      	nop
 800243c:	20000020 	.word	0x20000020
 8002440:	20000248 	.word	0x20000248

08002444 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002444:	b480      	push	{r7}
 8002446:	af00      	add	r7, sp, #0
  return uwTick;
 8002448:	4b03      	ldr	r3, [pc, #12]	@ (8002458 <HAL_GetTick+0x14>)
 800244a:	681b      	ldr	r3, [r3, #0]
}
 800244c:	4618      	mov	r0, r3
 800244e:	46bd      	mov	sp, r7
 8002450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002454:	4770      	bx	lr
 8002456:	bf00      	nop
 8002458:	20000248 	.word	0x20000248

0800245c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800245c:	b580      	push	{r7, lr}
 800245e:	b084      	sub	sp, #16
 8002460:	af00      	add	r7, sp, #0
 8002462:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002464:	f7ff ffee 	bl	8002444 <HAL_GetTick>
 8002468:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002474:	d005      	beq.n	8002482 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002476:	4b0a      	ldr	r3, [pc, #40]	@ (80024a0 <HAL_Delay+0x44>)
 8002478:	781b      	ldrb	r3, [r3, #0]
 800247a:	461a      	mov	r2, r3
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	4413      	add	r3, r2
 8002480:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002482:	bf00      	nop
 8002484:	f7ff ffde 	bl	8002444 <HAL_GetTick>
 8002488:	4602      	mov	r2, r0
 800248a:	68bb      	ldr	r3, [r7, #8]
 800248c:	1ad3      	subs	r3, r2, r3
 800248e:	68fa      	ldr	r2, [r7, #12]
 8002490:	429a      	cmp	r2, r3
 8002492:	d8f7      	bhi.n	8002484 <HAL_Delay+0x28>
  {
  }
}
 8002494:	bf00      	nop
 8002496:	bf00      	nop
 8002498:	3710      	adds	r7, #16
 800249a:	46bd      	mov	sp, r7
 800249c:	bd80      	pop	{r7, pc}
 800249e:	bf00      	nop
 80024a0:	20000020 	.word	0x20000020

080024a4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80024a4:	b480      	push	{r7}
 80024a6:	b085      	sub	sp, #20
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	f003 0307 	and.w	r3, r3, #7
 80024b2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80024b4:	4b0b      	ldr	r3, [pc, #44]	@ (80024e4 <__NVIC_SetPriorityGrouping+0x40>)
 80024b6:	68db      	ldr	r3, [r3, #12]
 80024b8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80024ba:	68ba      	ldr	r2, [r7, #8]
 80024bc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80024c0:	4013      	ands	r3, r2
 80024c2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80024c8:	68bb      	ldr	r3, [r7, #8]
 80024ca:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80024cc:	4b06      	ldr	r3, [pc, #24]	@ (80024e8 <__NVIC_SetPriorityGrouping+0x44>)
 80024ce:	4313      	orrs	r3, r2
 80024d0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80024d2:	4a04      	ldr	r2, [pc, #16]	@ (80024e4 <__NVIC_SetPriorityGrouping+0x40>)
 80024d4:	68bb      	ldr	r3, [r7, #8]
 80024d6:	60d3      	str	r3, [r2, #12]
}
 80024d8:	bf00      	nop
 80024da:	3714      	adds	r7, #20
 80024dc:	46bd      	mov	sp, r7
 80024de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e2:	4770      	bx	lr
 80024e4:	e000ed00 	.word	0xe000ed00
 80024e8:	05fa0000 	.word	0x05fa0000

080024ec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80024ec:	b480      	push	{r7}
 80024ee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80024f0:	4b04      	ldr	r3, [pc, #16]	@ (8002504 <__NVIC_GetPriorityGrouping+0x18>)
 80024f2:	68db      	ldr	r3, [r3, #12]
 80024f4:	0a1b      	lsrs	r3, r3, #8
 80024f6:	f003 0307 	and.w	r3, r3, #7
}
 80024fa:	4618      	mov	r0, r3
 80024fc:	46bd      	mov	sp, r7
 80024fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002502:	4770      	bx	lr
 8002504:	e000ed00 	.word	0xe000ed00

08002508 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002508:	b480      	push	{r7}
 800250a:	b083      	sub	sp, #12
 800250c:	af00      	add	r7, sp, #0
 800250e:	4603      	mov	r3, r0
 8002510:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002512:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002516:	2b00      	cmp	r3, #0
 8002518:	db0b      	blt.n	8002532 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800251a:	79fb      	ldrb	r3, [r7, #7]
 800251c:	f003 021f 	and.w	r2, r3, #31
 8002520:	4907      	ldr	r1, [pc, #28]	@ (8002540 <__NVIC_EnableIRQ+0x38>)
 8002522:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002526:	095b      	lsrs	r3, r3, #5
 8002528:	2001      	movs	r0, #1
 800252a:	fa00 f202 	lsl.w	r2, r0, r2
 800252e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002532:	bf00      	nop
 8002534:	370c      	adds	r7, #12
 8002536:	46bd      	mov	sp, r7
 8002538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800253c:	4770      	bx	lr
 800253e:	bf00      	nop
 8002540:	e000e100 	.word	0xe000e100

08002544 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002544:	b480      	push	{r7}
 8002546:	b083      	sub	sp, #12
 8002548:	af00      	add	r7, sp, #0
 800254a:	4603      	mov	r3, r0
 800254c:	6039      	str	r1, [r7, #0]
 800254e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002550:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002554:	2b00      	cmp	r3, #0
 8002556:	db0a      	blt.n	800256e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002558:	683b      	ldr	r3, [r7, #0]
 800255a:	b2da      	uxtb	r2, r3
 800255c:	490c      	ldr	r1, [pc, #48]	@ (8002590 <__NVIC_SetPriority+0x4c>)
 800255e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002562:	0112      	lsls	r2, r2, #4
 8002564:	b2d2      	uxtb	r2, r2
 8002566:	440b      	add	r3, r1
 8002568:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800256c:	e00a      	b.n	8002584 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800256e:	683b      	ldr	r3, [r7, #0]
 8002570:	b2da      	uxtb	r2, r3
 8002572:	4908      	ldr	r1, [pc, #32]	@ (8002594 <__NVIC_SetPriority+0x50>)
 8002574:	79fb      	ldrb	r3, [r7, #7]
 8002576:	f003 030f 	and.w	r3, r3, #15
 800257a:	3b04      	subs	r3, #4
 800257c:	0112      	lsls	r2, r2, #4
 800257e:	b2d2      	uxtb	r2, r2
 8002580:	440b      	add	r3, r1
 8002582:	761a      	strb	r2, [r3, #24]
}
 8002584:	bf00      	nop
 8002586:	370c      	adds	r7, #12
 8002588:	46bd      	mov	sp, r7
 800258a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800258e:	4770      	bx	lr
 8002590:	e000e100 	.word	0xe000e100
 8002594:	e000ed00 	.word	0xe000ed00

08002598 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002598:	b480      	push	{r7}
 800259a:	b089      	sub	sp, #36	@ 0x24
 800259c:	af00      	add	r7, sp, #0
 800259e:	60f8      	str	r0, [r7, #12]
 80025a0:	60b9      	str	r1, [r7, #8]
 80025a2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	f003 0307 	and.w	r3, r3, #7
 80025aa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80025ac:	69fb      	ldr	r3, [r7, #28]
 80025ae:	f1c3 0307 	rsb	r3, r3, #7
 80025b2:	2b04      	cmp	r3, #4
 80025b4:	bf28      	it	cs
 80025b6:	2304      	movcs	r3, #4
 80025b8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80025ba:	69fb      	ldr	r3, [r7, #28]
 80025bc:	3304      	adds	r3, #4
 80025be:	2b06      	cmp	r3, #6
 80025c0:	d902      	bls.n	80025c8 <NVIC_EncodePriority+0x30>
 80025c2:	69fb      	ldr	r3, [r7, #28]
 80025c4:	3b03      	subs	r3, #3
 80025c6:	e000      	b.n	80025ca <NVIC_EncodePriority+0x32>
 80025c8:	2300      	movs	r3, #0
 80025ca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80025cc:	f04f 32ff 	mov.w	r2, #4294967295
 80025d0:	69bb      	ldr	r3, [r7, #24]
 80025d2:	fa02 f303 	lsl.w	r3, r2, r3
 80025d6:	43da      	mvns	r2, r3
 80025d8:	68bb      	ldr	r3, [r7, #8]
 80025da:	401a      	ands	r2, r3
 80025dc:	697b      	ldr	r3, [r7, #20]
 80025de:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80025e0:	f04f 31ff 	mov.w	r1, #4294967295
 80025e4:	697b      	ldr	r3, [r7, #20]
 80025e6:	fa01 f303 	lsl.w	r3, r1, r3
 80025ea:	43d9      	mvns	r1, r3
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80025f0:	4313      	orrs	r3, r2
         );
}
 80025f2:	4618      	mov	r0, r3
 80025f4:	3724      	adds	r7, #36	@ 0x24
 80025f6:	46bd      	mov	sp, r7
 80025f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025fc:	4770      	bx	lr
	...

08002600 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002600:	b580      	push	{r7, lr}
 8002602:	b082      	sub	sp, #8
 8002604:	af00      	add	r7, sp, #0
 8002606:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	3b01      	subs	r3, #1
 800260c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002610:	d301      	bcc.n	8002616 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002612:	2301      	movs	r3, #1
 8002614:	e00f      	b.n	8002636 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002616:	4a0a      	ldr	r2, [pc, #40]	@ (8002640 <SysTick_Config+0x40>)
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	3b01      	subs	r3, #1
 800261c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800261e:	210f      	movs	r1, #15
 8002620:	f04f 30ff 	mov.w	r0, #4294967295
 8002624:	f7ff ff8e 	bl	8002544 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002628:	4b05      	ldr	r3, [pc, #20]	@ (8002640 <SysTick_Config+0x40>)
 800262a:	2200      	movs	r2, #0
 800262c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800262e:	4b04      	ldr	r3, [pc, #16]	@ (8002640 <SysTick_Config+0x40>)
 8002630:	2207      	movs	r2, #7
 8002632:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002634:	2300      	movs	r3, #0
}
 8002636:	4618      	mov	r0, r3
 8002638:	3708      	adds	r7, #8
 800263a:	46bd      	mov	sp, r7
 800263c:	bd80      	pop	{r7, pc}
 800263e:	bf00      	nop
 8002640:	e000e010 	.word	0xe000e010

08002644 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002644:	b580      	push	{r7, lr}
 8002646:	b082      	sub	sp, #8
 8002648:	af00      	add	r7, sp, #0
 800264a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800264c:	6878      	ldr	r0, [r7, #4]
 800264e:	f7ff ff29 	bl	80024a4 <__NVIC_SetPriorityGrouping>
}
 8002652:	bf00      	nop
 8002654:	3708      	adds	r7, #8
 8002656:	46bd      	mov	sp, r7
 8002658:	bd80      	pop	{r7, pc}

0800265a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800265a:	b580      	push	{r7, lr}
 800265c:	b086      	sub	sp, #24
 800265e:	af00      	add	r7, sp, #0
 8002660:	4603      	mov	r3, r0
 8002662:	60b9      	str	r1, [r7, #8]
 8002664:	607a      	str	r2, [r7, #4]
 8002666:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002668:	2300      	movs	r3, #0
 800266a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800266c:	f7ff ff3e 	bl	80024ec <__NVIC_GetPriorityGrouping>
 8002670:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002672:	687a      	ldr	r2, [r7, #4]
 8002674:	68b9      	ldr	r1, [r7, #8]
 8002676:	6978      	ldr	r0, [r7, #20]
 8002678:	f7ff ff8e 	bl	8002598 <NVIC_EncodePriority>
 800267c:	4602      	mov	r2, r0
 800267e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002682:	4611      	mov	r1, r2
 8002684:	4618      	mov	r0, r3
 8002686:	f7ff ff5d 	bl	8002544 <__NVIC_SetPriority>
}
 800268a:	bf00      	nop
 800268c:	3718      	adds	r7, #24
 800268e:	46bd      	mov	sp, r7
 8002690:	bd80      	pop	{r7, pc}

08002692 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002692:	b580      	push	{r7, lr}
 8002694:	b082      	sub	sp, #8
 8002696:	af00      	add	r7, sp, #0
 8002698:	4603      	mov	r3, r0
 800269a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800269c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026a0:	4618      	mov	r0, r3
 80026a2:	f7ff ff31 	bl	8002508 <__NVIC_EnableIRQ>
}
 80026a6:	bf00      	nop
 80026a8:	3708      	adds	r7, #8
 80026aa:	46bd      	mov	sp, r7
 80026ac:	bd80      	pop	{r7, pc}

080026ae <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80026ae:	b580      	push	{r7, lr}
 80026b0:	b082      	sub	sp, #8
 80026b2:	af00      	add	r7, sp, #0
 80026b4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80026b6:	6878      	ldr	r0, [r7, #4]
 80026b8:	f7ff ffa2 	bl	8002600 <SysTick_Config>
 80026bc:	4603      	mov	r3, r0
}
 80026be:	4618      	mov	r0, r3
 80026c0:	3708      	adds	r7, #8
 80026c2:	46bd      	mov	sp, r7
 80026c4:	bd80      	pop	{r7, pc}
	...

080026c8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80026c8:	b480      	push	{r7}
 80026ca:	b089      	sub	sp, #36	@ 0x24
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	6078      	str	r0, [r7, #4]
 80026d0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80026d2:	2300      	movs	r3, #0
 80026d4:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80026d6:	2300      	movs	r3, #0
 80026d8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80026da:	2300      	movs	r3, #0
 80026dc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80026de:	2300      	movs	r3, #0
 80026e0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80026e2:	2300      	movs	r3, #0
 80026e4:	61fb      	str	r3, [r7, #28]
 80026e6:	e175      	b.n	80029d4 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80026e8:	2201      	movs	r2, #1
 80026ea:	69fb      	ldr	r3, [r7, #28]
 80026ec:	fa02 f303 	lsl.w	r3, r2, r3
 80026f0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80026f2:	683b      	ldr	r3, [r7, #0]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	697a      	ldr	r2, [r7, #20]
 80026f8:	4013      	ands	r3, r2
 80026fa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80026fc:	693a      	ldr	r2, [r7, #16]
 80026fe:	697b      	ldr	r3, [r7, #20]
 8002700:	429a      	cmp	r2, r3
 8002702:	f040 8164 	bne.w	80029ce <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002706:	683b      	ldr	r3, [r7, #0]
 8002708:	685b      	ldr	r3, [r3, #4]
 800270a:	f003 0303 	and.w	r3, r3, #3
 800270e:	2b01      	cmp	r3, #1
 8002710:	d005      	beq.n	800271e <HAL_GPIO_Init+0x56>
 8002712:	683b      	ldr	r3, [r7, #0]
 8002714:	685b      	ldr	r3, [r3, #4]
 8002716:	f003 0303 	and.w	r3, r3, #3
 800271a:	2b02      	cmp	r3, #2
 800271c:	d130      	bne.n	8002780 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	689b      	ldr	r3, [r3, #8]
 8002722:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002724:	69fb      	ldr	r3, [r7, #28]
 8002726:	005b      	lsls	r3, r3, #1
 8002728:	2203      	movs	r2, #3
 800272a:	fa02 f303 	lsl.w	r3, r2, r3
 800272e:	43db      	mvns	r3, r3
 8002730:	69ba      	ldr	r2, [r7, #24]
 8002732:	4013      	ands	r3, r2
 8002734:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8002736:	683b      	ldr	r3, [r7, #0]
 8002738:	68da      	ldr	r2, [r3, #12]
 800273a:	69fb      	ldr	r3, [r7, #28]
 800273c:	005b      	lsls	r3, r3, #1
 800273e:	fa02 f303 	lsl.w	r3, r2, r3
 8002742:	69ba      	ldr	r2, [r7, #24]
 8002744:	4313      	orrs	r3, r2
 8002746:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	69ba      	ldr	r2, [r7, #24]
 800274c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	685b      	ldr	r3, [r3, #4]
 8002752:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002754:	2201      	movs	r2, #1
 8002756:	69fb      	ldr	r3, [r7, #28]
 8002758:	fa02 f303 	lsl.w	r3, r2, r3
 800275c:	43db      	mvns	r3, r3
 800275e:	69ba      	ldr	r2, [r7, #24]
 8002760:	4013      	ands	r3, r2
 8002762:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002764:	683b      	ldr	r3, [r7, #0]
 8002766:	685b      	ldr	r3, [r3, #4]
 8002768:	091b      	lsrs	r3, r3, #4
 800276a:	f003 0201 	and.w	r2, r3, #1
 800276e:	69fb      	ldr	r3, [r7, #28]
 8002770:	fa02 f303 	lsl.w	r3, r2, r3
 8002774:	69ba      	ldr	r2, [r7, #24]
 8002776:	4313      	orrs	r3, r2
 8002778:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	69ba      	ldr	r2, [r7, #24]
 800277e:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002780:	683b      	ldr	r3, [r7, #0]
 8002782:	685b      	ldr	r3, [r3, #4]
 8002784:	f003 0303 	and.w	r3, r3, #3
 8002788:	2b03      	cmp	r3, #3
 800278a:	d017      	beq.n	80027bc <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	68db      	ldr	r3, [r3, #12]
 8002790:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8002792:	69fb      	ldr	r3, [r7, #28]
 8002794:	005b      	lsls	r3, r3, #1
 8002796:	2203      	movs	r2, #3
 8002798:	fa02 f303 	lsl.w	r3, r2, r3
 800279c:	43db      	mvns	r3, r3
 800279e:	69ba      	ldr	r2, [r7, #24]
 80027a0:	4013      	ands	r3, r2
 80027a2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 80027a4:	683b      	ldr	r3, [r7, #0]
 80027a6:	689a      	ldr	r2, [r3, #8]
 80027a8:	69fb      	ldr	r3, [r7, #28]
 80027aa:	005b      	lsls	r3, r3, #1
 80027ac:	fa02 f303 	lsl.w	r3, r2, r3
 80027b0:	69ba      	ldr	r2, [r7, #24]
 80027b2:	4313      	orrs	r3, r2
 80027b4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	69ba      	ldr	r2, [r7, #24]
 80027ba:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80027bc:	683b      	ldr	r3, [r7, #0]
 80027be:	685b      	ldr	r3, [r3, #4]
 80027c0:	f003 0303 	and.w	r3, r3, #3
 80027c4:	2b02      	cmp	r3, #2
 80027c6:	d123      	bne.n	8002810 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80027c8:	69fb      	ldr	r3, [r7, #28]
 80027ca:	08da      	lsrs	r2, r3, #3
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	3208      	adds	r2, #8
 80027d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80027d4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80027d6:	69fb      	ldr	r3, [r7, #28]
 80027d8:	f003 0307 	and.w	r3, r3, #7
 80027dc:	009b      	lsls	r3, r3, #2
 80027de:	220f      	movs	r2, #15
 80027e0:	fa02 f303 	lsl.w	r3, r2, r3
 80027e4:	43db      	mvns	r3, r3
 80027e6:	69ba      	ldr	r2, [r7, #24]
 80027e8:	4013      	ands	r3, r2
 80027ea:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80027ec:	683b      	ldr	r3, [r7, #0]
 80027ee:	691a      	ldr	r2, [r3, #16]
 80027f0:	69fb      	ldr	r3, [r7, #28]
 80027f2:	f003 0307 	and.w	r3, r3, #7
 80027f6:	009b      	lsls	r3, r3, #2
 80027f8:	fa02 f303 	lsl.w	r3, r2, r3
 80027fc:	69ba      	ldr	r2, [r7, #24]
 80027fe:	4313      	orrs	r3, r2
 8002800:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8002802:	69fb      	ldr	r3, [r7, #28]
 8002804:	08da      	lsrs	r2, r3, #3
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	3208      	adds	r2, #8
 800280a:	69b9      	ldr	r1, [r7, #24]
 800280c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002816:	69fb      	ldr	r3, [r7, #28]
 8002818:	005b      	lsls	r3, r3, #1
 800281a:	2203      	movs	r2, #3
 800281c:	fa02 f303 	lsl.w	r3, r2, r3
 8002820:	43db      	mvns	r3, r3
 8002822:	69ba      	ldr	r2, [r7, #24]
 8002824:	4013      	ands	r3, r2
 8002826:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002828:	683b      	ldr	r3, [r7, #0]
 800282a:	685b      	ldr	r3, [r3, #4]
 800282c:	f003 0203 	and.w	r2, r3, #3
 8002830:	69fb      	ldr	r3, [r7, #28]
 8002832:	005b      	lsls	r3, r3, #1
 8002834:	fa02 f303 	lsl.w	r3, r2, r3
 8002838:	69ba      	ldr	r2, [r7, #24]
 800283a:	4313      	orrs	r3, r2
 800283c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	69ba      	ldr	r2, [r7, #24]
 8002842:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002844:	683b      	ldr	r3, [r7, #0]
 8002846:	685b      	ldr	r3, [r3, #4]
 8002848:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800284c:	2b00      	cmp	r3, #0
 800284e:	f000 80be 	beq.w	80029ce <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002852:	4b66      	ldr	r3, [pc, #408]	@ (80029ec <HAL_GPIO_Init+0x324>)
 8002854:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002856:	4a65      	ldr	r2, [pc, #404]	@ (80029ec <HAL_GPIO_Init+0x324>)
 8002858:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800285c:	6453      	str	r3, [r2, #68]	@ 0x44
 800285e:	4b63      	ldr	r3, [pc, #396]	@ (80029ec <HAL_GPIO_Init+0x324>)
 8002860:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002862:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002866:	60fb      	str	r3, [r7, #12]
 8002868:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800286a:	4a61      	ldr	r2, [pc, #388]	@ (80029f0 <HAL_GPIO_Init+0x328>)
 800286c:	69fb      	ldr	r3, [r7, #28]
 800286e:	089b      	lsrs	r3, r3, #2
 8002870:	3302      	adds	r3, #2
 8002872:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002876:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002878:	69fb      	ldr	r3, [r7, #28]
 800287a:	f003 0303 	and.w	r3, r3, #3
 800287e:	009b      	lsls	r3, r3, #2
 8002880:	220f      	movs	r2, #15
 8002882:	fa02 f303 	lsl.w	r3, r2, r3
 8002886:	43db      	mvns	r3, r3
 8002888:	69ba      	ldr	r2, [r7, #24]
 800288a:	4013      	ands	r3, r2
 800288c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	4a58      	ldr	r2, [pc, #352]	@ (80029f4 <HAL_GPIO_Init+0x32c>)
 8002892:	4293      	cmp	r3, r2
 8002894:	d037      	beq.n	8002906 <HAL_GPIO_Init+0x23e>
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	4a57      	ldr	r2, [pc, #348]	@ (80029f8 <HAL_GPIO_Init+0x330>)
 800289a:	4293      	cmp	r3, r2
 800289c:	d031      	beq.n	8002902 <HAL_GPIO_Init+0x23a>
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	4a56      	ldr	r2, [pc, #344]	@ (80029fc <HAL_GPIO_Init+0x334>)
 80028a2:	4293      	cmp	r3, r2
 80028a4:	d02b      	beq.n	80028fe <HAL_GPIO_Init+0x236>
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	4a55      	ldr	r2, [pc, #340]	@ (8002a00 <HAL_GPIO_Init+0x338>)
 80028aa:	4293      	cmp	r3, r2
 80028ac:	d025      	beq.n	80028fa <HAL_GPIO_Init+0x232>
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	4a54      	ldr	r2, [pc, #336]	@ (8002a04 <HAL_GPIO_Init+0x33c>)
 80028b2:	4293      	cmp	r3, r2
 80028b4:	d01f      	beq.n	80028f6 <HAL_GPIO_Init+0x22e>
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	4a53      	ldr	r2, [pc, #332]	@ (8002a08 <HAL_GPIO_Init+0x340>)
 80028ba:	4293      	cmp	r3, r2
 80028bc:	d019      	beq.n	80028f2 <HAL_GPIO_Init+0x22a>
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	4a52      	ldr	r2, [pc, #328]	@ (8002a0c <HAL_GPIO_Init+0x344>)
 80028c2:	4293      	cmp	r3, r2
 80028c4:	d013      	beq.n	80028ee <HAL_GPIO_Init+0x226>
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	4a51      	ldr	r2, [pc, #324]	@ (8002a10 <HAL_GPIO_Init+0x348>)
 80028ca:	4293      	cmp	r3, r2
 80028cc:	d00d      	beq.n	80028ea <HAL_GPIO_Init+0x222>
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	4a50      	ldr	r2, [pc, #320]	@ (8002a14 <HAL_GPIO_Init+0x34c>)
 80028d2:	4293      	cmp	r3, r2
 80028d4:	d007      	beq.n	80028e6 <HAL_GPIO_Init+0x21e>
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	4a4f      	ldr	r2, [pc, #316]	@ (8002a18 <HAL_GPIO_Init+0x350>)
 80028da:	4293      	cmp	r3, r2
 80028dc:	d101      	bne.n	80028e2 <HAL_GPIO_Init+0x21a>
 80028de:	2309      	movs	r3, #9
 80028e0:	e012      	b.n	8002908 <HAL_GPIO_Init+0x240>
 80028e2:	230a      	movs	r3, #10
 80028e4:	e010      	b.n	8002908 <HAL_GPIO_Init+0x240>
 80028e6:	2308      	movs	r3, #8
 80028e8:	e00e      	b.n	8002908 <HAL_GPIO_Init+0x240>
 80028ea:	2307      	movs	r3, #7
 80028ec:	e00c      	b.n	8002908 <HAL_GPIO_Init+0x240>
 80028ee:	2306      	movs	r3, #6
 80028f0:	e00a      	b.n	8002908 <HAL_GPIO_Init+0x240>
 80028f2:	2305      	movs	r3, #5
 80028f4:	e008      	b.n	8002908 <HAL_GPIO_Init+0x240>
 80028f6:	2304      	movs	r3, #4
 80028f8:	e006      	b.n	8002908 <HAL_GPIO_Init+0x240>
 80028fa:	2303      	movs	r3, #3
 80028fc:	e004      	b.n	8002908 <HAL_GPIO_Init+0x240>
 80028fe:	2302      	movs	r3, #2
 8002900:	e002      	b.n	8002908 <HAL_GPIO_Init+0x240>
 8002902:	2301      	movs	r3, #1
 8002904:	e000      	b.n	8002908 <HAL_GPIO_Init+0x240>
 8002906:	2300      	movs	r3, #0
 8002908:	69fa      	ldr	r2, [r7, #28]
 800290a:	f002 0203 	and.w	r2, r2, #3
 800290e:	0092      	lsls	r2, r2, #2
 8002910:	4093      	lsls	r3, r2
 8002912:	69ba      	ldr	r2, [r7, #24]
 8002914:	4313      	orrs	r3, r2
 8002916:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002918:	4935      	ldr	r1, [pc, #212]	@ (80029f0 <HAL_GPIO_Init+0x328>)
 800291a:	69fb      	ldr	r3, [r7, #28]
 800291c:	089b      	lsrs	r3, r3, #2
 800291e:	3302      	adds	r3, #2
 8002920:	69ba      	ldr	r2, [r7, #24]
 8002922:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002926:	4b3d      	ldr	r3, [pc, #244]	@ (8002a1c <HAL_GPIO_Init+0x354>)
 8002928:	689b      	ldr	r3, [r3, #8]
 800292a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800292c:	693b      	ldr	r3, [r7, #16]
 800292e:	43db      	mvns	r3, r3
 8002930:	69ba      	ldr	r2, [r7, #24]
 8002932:	4013      	ands	r3, r2
 8002934:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002936:	683b      	ldr	r3, [r7, #0]
 8002938:	685b      	ldr	r3, [r3, #4]
 800293a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800293e:	2b00      	cmp	r3, #0
 8002940:	d003      	beq.n	800294a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002942:	69ba      	ldr	r2, [r7, #24]
 8002944:	693b      	ldr	r3, [r7, #16]
 8002946:	4313      	orrs	r3, r2
 8002948:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800294a:	4a34      	ldr	r2, [pc, #208]	@ (8002a1c <HAL_GPIO_Init+0x354>)
 800294c:	69bb      	ldr	r3, [r7, #24]
 800294e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002950:	4b32      	ldr	r3, [pc, #200]	@ (8002a1c <HAL_GPIO_Init+0x354>)
 8002952:	68db      	ldr	r3, [r3, #12]
 8002954:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002956:	693b      	ldr	r3, [r7, #16]
 8002958:	43db      	mvns	r3, r3
 800295a:	69ba      	ldr	r2, [r7, #24]
 800295c:	4013      	ands	r3, r2
 800295e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002960:	683b      	ldr	r3, [r7, #0]
 8002962:	685b      	ldr	r3, [r3, #4]
 8002964:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002968:	2b00      	cmp	r3, #0
 800296a:	d003      	beq.n	8002974 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800296c:	69ba      	ldr	r2, [r7, #24]
 800296e:	693b      	ldr	r3, [r7, #16]
 8002970:	4313      	orrs	r3, r2
 8002972:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002974:	4a29      	ldr	r2, [pc, #164]	@ (8002a1c <HAL_GPIO_Init+0x354>)
 8002976:	69bb      	ldr	r3, [r7, #24]
 8002978:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800297a:	4b28      	ldr	r3, [pc, #160]	@ (8002a1c <HAL_GPIO_Init+0x354>)
 800297c:	685b      	ldr	r3, [r3, #4]
 800297e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002980:	693b      	ldr	r3, [r7, #16]
 8002982:	43db      	mvns	r3, r3
 8002984:	69ba      	ldr	r2, [r7, #24]
 8002986:	4013      	ands	r3, r2
 8002988:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800298a:	683b      	ldr	r3, [r7, #0]
 800298c:	685b      	ldr	r3, [r3, #4]
 800298e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002992:	2b00      	cmp	r3, #0
 8002994:	d003      	beq.n	800299e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002996:	69ba      	ldr	r2, [r7, #24]
 8002998:	693b      	ldr	r3, [r7, #16]
 800299a:	4313      	orrs	r3, r2
 800299c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800299e:	4a1f      	ldr	r2, [pc, #124]	@ (8002a1c <HAL_GPIO_Init+0x354>)
 80029a0:	69bb      	ldr	r3, [r7, #24]
 80029a2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80029a4:	4b1d      	ldr	r3, [pc, #116]	@ (8002a1c <HAL_GPIO_Init+0x354>)
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80029aa:	693b      	ldr	r3, [r7, #16]
 80029ac:	43db      	mvns	r3, r3
 80029ae:	69ba      	ldr	r2, [r7, #24]
 80029b0:	4013      	ands	r3, r2
 80029b2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80029b4:	683b      	ldr	r3, [r7, #0]
 80029b6:	685b      	ldr	r3, [r3, #4]
 80029b8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d003      	beq.n	80029c8 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80029c0:	69ba      	ldr	r2, [r7, #24]
 80029c2:	693b      	ldr	r3, [r7, #16]
 80029c4:	4313      	orrs	r3, r2
 80029c6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80029c8:	4a14      	ldr	r2, [pc, #80]	@ (8002a1c <HAL_GPIO_Init+0x354>)
 80029ca:	69bb      	ldr	r3, [r7, #24]
 80029cc:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 80029ce:	69fb      	ldr	r3, [r7, #28]
 80029d0:	3301      	adds	r3, #1
 80029d2:	61fb      	str	r3, [r7, #28]
 80029d4:	69fb      	ldr	r3, [r7, #28]
 80029d6:	2b0f      	cmp	r3, #15
 80029d8:	f67f ae86 	bls.w	80026e8 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80029dc:	bf00      	nop
 80029de:	bf00      	nop
 80029e0:	3724      	adds	r7, #36	@ 0x24
 80029e2:	46bd      	mov	sp, r7
 80029e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e8:	4770      	bx	lr
 80029ea:	bf00      	nop
 80029ec:	40023800 	.word	0x40023800
 80029f0:	40013800 	.word	0x40013800
 80029f4:	40020000 	.word	0x40020000
 80029f8:	40020400 	.word	0x40020400
 80029fc:	40020800 	.word	0x40020800
 8002a00:	40020c00 	.word	0x40020c00
 8002a04:	40021000 	.word	0x40021000
 8002a08:	40021400 	.word	0x40021400
 8002a0c:	40021800 	.word	0x40021800
 8002a10:	40021c00 	.word	0x40021c00
 8002a14:	40022000 	.word	0x40022000
 8002a18:	40022400 	.word	0x40022400
 8002a1c:	40013c00 	.word	0x40013c00

08002a20 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002a20:	b480      	push	{r7}
 8002a22:	b085      	sub	sp, #20
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	6078      	str	r0, [r7, #4]
 8002a28:	460b      	mov	r3, r1
 8002a2a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	691a      	ldr	r2, [r3, #16]
 8002a30:	887b      	ldrh	r3, [r7, #2]
 8002a32:	4013      	ands	r3, r2
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d002      	beq.n	8002a3e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002a38:	2301      	movs	r3, #1
 8002a3a:	73fb      	strb	r3, [r7, #15]
 8002a3c:	e001      	b.n	8002a42 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002a3e:	2300      	movs	r3, #0
 8002a40:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002a42:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a44:	4618      	mov	r0, r3
 8002a46:	3714      	adds	r7, #20
 8002a48:	46bd      	mov	sp, r7
 8002a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a4e:	4770      	bx	lr

08002a50 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002a50:	b480      	push	{r7}
 8002a52:	b083      	sub	sp, #12
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	6078      	str	r0, [r7, #4]
 8002a58:	460b      	mov	r3, r1
 8002a5a:	807b      	strh	r3, [r7, #2]
 8002a5c:	4613      	mov	r3, r2
 8002a5e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002a60:	787b      	ldrb	r3, [r7, #1]
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d003      	beq.n	8002a6e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002a66:	887a      	ldrh	r2, [r7, #2]
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8002a6c:	e003      	b.n	8002a76 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8002a6e:	887b      	ldrh	r3, [r7, #2]
 8002a70:	041a      	lsls	r2, r3, #16
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	619a      	str	r2, [r3, #24]
}
 8002a76:	bf00      	nop
 8002a78:	370c      	adds	r7, #12
 8002a7a:	46bd      	mov	sp, r7
 8002a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a80:	4770      	bx	lr
	...

08002a84 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002a84:	b580      	push	{r7, lr}
 8002a86:	b082      	sub	sp, #8
 8002a88:	af00      	add	r7, sp, #0
 8002a8a:	4603      	mov	r3, r0
 8002a8c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002a8e:	4b08      	ldr	r3, [pc, #32]	@ (8002ab0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002a90:	695a      	ldr	r2, [r3, #20]
 8002a92:	88fb      	ldrh	r3, [r7, #6]
 8002a94:	4013      	ands	r3, r2
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d006      	beq.n	8002aa8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002a9a:	4a05      	ldr	r2, [pc, #20]	@ (8002ab0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002a9c:	88fb      	ldrh	r3, [r7, #6]
 8002a9e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002aa0:	88fb      	ldrh	r3, [r7, #6]
 8002aa2:	4618      	mov	r0, r3
 8002aa4:	f7ff f8ae 	bl	8001c04 <HAL_GPIO_EXTI_Callback>
  }
}
 8002aa8:	bf00      	nop
 8002aaa:	3708      	adds	r7, #8
 8002aac:	46bd      	mov	sp, r7
 8002aae:	bd80      	pop	{r7, pc}
 8002ab0:	40013c00 	.word	0x40013c00

08002ab4 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002ab4:	b480      	push	{r7}
 8002ab6:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002ab8:	4b05      	ldr	r3, [pc, #20]	@ (8002ad0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	4a04      	ldr	r2, [pc, #16]	@ (8002ad0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002abe:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002ac2:	6013      	str	r3, [r2, #0]
}
 8002ac4:	bf00      	nop
 8002ac6:	46bd      	mov	sp, r7
 8002ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002acc:	4770      	bx	lr
 8002ace:	bf00      	nop
 8002ad0:	40007000 	.word	0x40007000

08002ad4 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8002ad4:	b580      	push	{r7, lr}
 8002ad6:	b082      	sub	sp, #8
 8002ad8:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8002ada:	2300      	movs	r3, #0
 8002adc:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8002ade:	4b23      	ldr	r3, [pc, #140]	@ (8002b6c <HAL_PWREx_EnableOverDrive+0x98>)
 8002ae0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ae2:	4a22      	ldr	r2, [pc, #136]	@ (8002b6c <HAL_PWREx_EnableOverDrive+0x98>)
 8002ae4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002ae8:	6413      	str	r3, [r2, #64]	@ 0x40
 8002aea:	4b20      	ldr	r3, [pc, #128]	@ (8002b6c <HAL_PWREx_EnableOverDrive+0x98>)
 8002aec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002aee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002af2:	603b      	str	r3, [r7, #0]
 8002af4:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8002af6:	4b1e      	ldr	r3, [pc, #120]	@ (8002b70 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	4a1d      	ldr	r2, [pc, #116]	@ (8002b70 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002afc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002b00:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002b02:	f7ff fc9f 	bl	8002444 <HAL_GetTick>
 8002b06:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002b08:	e009      	b.n	8002b1e <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002b0a:	f7ff fc9b 	bl	8002444 <HAL_GetTick>
 8002b0e:	4602      	mov	r2, r0
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	1ad3      	subs	r3, r2, r3
 8002b14:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002b18:	d901      	bls.n	8002b1e <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8002b1a:	2303      	movs	r3, #3
 8002b1c:	e022      	b.n	8002b64 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002b1e:	4b14      	ldr	r3, [pc, #80]	@ (8002b70 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002b20:	685b      	ldr	r3, [r3, #4]
 8002b22:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002b26:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002b2a:	d1ee      	bne.n	8002b0a <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002b2c:	4b10      	ldr	r3, [pc, #64]	@ (8002b70 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	4a0f      	ldr	r2, [pc, #60]	@ (8002b70 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002b32:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002b36:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002b38:	f7ff fc84 	bl	8002444 <HAL_GetTick>
 8002b3c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002b3e:	e009      	b.n	8002b54 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002b40:	f7ff fc80 	bl	8002444 <HAL_GetTick>
 8002b44:	4602      	mov	r2, r0
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	1ad3      	subs	r3, r2, r3
 8002b4a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002b4e:	d901      	bls.n	8002b54 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8002b50:	2303      	movs	r3, #3
 8002b52:	e007      	b.n	8002b64 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002b54:	4b06      	ldr	r3, [pc, #24]	@ (8002b70 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002b56:	685b      	ldr	r3, [r3, #4]
 8002b58:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b5c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002b60:	d1ee      	bne.n	8002b40 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8002b62:	2300      	movs	r3, #0
}
 8002b64:	4618      	mov	r0, r3
 8002b66:	3708      	adds	r7, #8
 8002b68:	46bd      	mov	sp, r7
 8002b6a:	bd80      	pop	{r7, pc}
 8002b6c:	40023800 	.word	0x40023800
 8002b70:	40007000 	.word	0x40007000

08002b74 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002b74:	b580      	push	{r7, lr}
 8002b76:	b086      	sub	sp, #24
 8002b78:	af00      	add	r7, sp, #0
 8002b7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8002b7c:	2300      	movs	r3, #0
 8002b7e:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d101      	bne.n	8002b8a <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8002b86:	2301      	movs	r3, #1
 8002b88:	e29b      	b.n	80030c2 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	f003 0301 	and.w	r3, r3, #1
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	f000 8087 	beq.w	8002ca6 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002b98:	4b96      	ldr	r3, [pc, #600]	@ (8002df4 <HAL_RCC_OscConfig+0x280>)
 8002b9a:	689b      	ldr	r3, [r3, #8]
 8002b9c:	f003 030c 	and.w	r3, r3, #12
 8002ba0:	2b04      	cmp	r3, #4
 8002ba2:	d00c      	beq.n	8002bbe <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002ba4:	4b93      	ldr	r3, [pc, #588]	@ (8002df4 <HAL_RCC_OscConfig+0x280>)
 8002ba6:	689b      	ldr	r3, [r3, #8]
 8002ba8:	f003 030c 	and.w	r3, r3, #12
 8002bac:	2b08      	cmp	r3, #8
 8002bae:	d112      	bne.n	8002bd6 <HAL_RCC_OscConfig+0x62>
 8002bb0:	4b90      	ldr	r3, [pc, #576]	@ (8002df4 <HAL_RCC_OscConfig+0x280>)
 8002bb2:	685b      	ldr	r3, [r3, #4]
 8002bb4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002bb8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002bbc:	d10b      	bne.n	8002bd6 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002bbe:	4b8d      	ldr	r3, [pc, #564]	@ (8002df4 <HAL_RCC_OscConfig+0x280>)
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d06c      	beq.n	8002ca4 <HAL_RCC_OscConfig+0x130>
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	685b      	ldr	r3, [r3, #4]
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d168      	bne.n	8002ca4 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002bd2:	2301      	movs	r3, #1
 8002bd4:	e275      	b.n	80030c2 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	685b      	ldr	r3, [r3, #4]
 8002bda:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002bde:	d106      	bne.n	8002bee <HAL_RCC_OscConfig+0x7a>
 8002be0:	4b84      	ldr	r3, [pc, #528]	@ (8002df4 <HAL_RCC_OscConfig+0x280>)
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	4a83      	ldr	r2, [pc, #524]	@ (8002df4 <HAL_RCC_OscConfig+0x280>)
 8002be6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002bea:	6013      	str	r3, [r2, #0]
 8002bec:	e02e      	b.n	8002c4c <HAL_RCC_OscConfig+0xd8>
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	685b      	ldr	r3, [r3, #4]
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d10c      	bne.n	8002c10 <HAL_RCC_OscConfig+0x9c>
 8002bf6:	4b7f      	ldr	r3, [pc, #508]	@ (8002df4 <HAL_RCC_OscConfig+0x280>)
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	4a7e      	ldr	r2, [pc, #504]	@ (8002df4 <HAL_RCC_OscConfig+0x280>)
 8002bfc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002c00:	6013      	str	r3, [r2, #0]
 8002c02:	4b7c      	ldr	r3, [pc, #496]	@ (8002df4 <HAL_RCC_OscConfig+0x280>)
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	4a7b      	ldr	r2, [pc, #492]	@ (8002df4 <HAL_RCC_OscConfig+0x280>)
 8002c08:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002c0c:	6013      	str	r3, [r2, #0]
 8002c0e:	e01d      	b.n	8002c4c <HAL_RCC_OscConfig+0xd8>
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	685b      	ldr	r3, [r3, #4]
 8002c14:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002c18:	d10c      	bne.n	8002c34 <HAL_RCC_OscConfig+0xc0>
 8002c1a:	4b76      	ldr	r3, [pc, #472]	@ (8002df4 <HAL_RCC_OscConfig+0x280>)
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	4a75      	ldr	r2, [pc, #468]	@ (8002df4 <HAL_RCC_OscConfig+0x280>)
 8002c20:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002c24:	6013      	str	r3, [r2, #0]
 8002c26:	4b73      	ldr	r3, [pc, #460]	@ (8002df4 <HAL_RCC_OscConfig+0x280>)
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	4a72      	ldr	r2, [pc, #456]	@ (8002df4 <HAL_RCC_OscConfig+0x280>)
 8002c2c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002c30:	6013      	str	r3, [r2, #0]
 8002c32:	e00b      	b.n	8002c4c <HAL_RCC_OscConfig+0xd8>
 8002c34:	4b6f      	ldr	r3, [pc, #444]	@ (8002df4 <HAL_RCC_OscConfig+0x280>)
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	4a6e      	ldr	r2, [pc, #440]	@ (8002df4 <HAL_RCC_OscConfig+0x280>)
 8002c3a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002c3e:	6013      	str	r3, [r2, #0]
 8002c40:	4b6c      	ldr	r3, [pc, #432]	@ (8002df4 <HAL_RCC_OscConfig+0x280>)
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	4a6b      	ldr	r2, [pc, #428]	@ (8002df4 <HAL_RCC_OscConfig+0x280>)
 8002c46:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002c4a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	685b      	ldr	r3, [r3, #4]
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d013      	beq.n	8002c7c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c54:	f7ff fbf6 	bl	8002444 <HAL_GetTick>
 8002c58:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c5a:	e008      	b.n	8002c6e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002c5c:	f7ff fbf2 	bl	8002444 <HAL_GetTick>
 8002c60:	4602      	mov	r2, r0
 8002c62:	693b      	ldr	r3, [r7, #16]
 8002c64:	1ad3      	subs	r3, r2, r3
 8002c66:	2b64      	cmp	r3, #100	@ 0x64
 8002c68:	d901      	bls.n	8002c6e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002c6a:	2303      	movs	r3, #3
 8002c6c:	e229      	b.n	80030c2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c6e:	4b61      	ldr	r3, [pc, #388]	@ (8002df4 <HAL_RCC_OscConfig+0x280>)
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d0f0      	beq.n	8002c5c <HAL_RCC_OscConfig+0xe8>
 8002c7a:	e014      	b.n	8002ca6 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c7c:	f7ff fbe2 	bl	8002444 <HAL_GetTick>
 8002c80:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c82:	e008      	b.n	8002c96 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002c84:	f7ff fbde 	bl	8002444 <HAL_GetTick>
 8002c88:	4602      	mov	r2, r0
 8002c8a:	693b      	ldr	r3, [r7, #16]
 8002c8c:	1ad3      	subs	r3, r2, r3
 8002c8e:	2b64      	cmp	r3, #100	@ 0x64
 8002c90:	d901      	bls.n	8002c96 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002c92:	2303      	movs	r3, #3
 8002c94:	e215      	b.n	80030c2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c96:	4b57      	ldr	r3, [pc, #348]	@ (8002df4 <HAL_RCC_OscConfig+0x280>)
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d1f0      	bne.n	8002c84 <HAL_RCC_OscConfig+0x110>
 8002ca2:	e000      	b.n	8002ca6 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ca4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	f003 0302 	and.w	r3, r3, #2
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d069      	beq.n	8002d86 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002cb2:	4b50      	ldr	r3, [pc, #320]	@ (8002df4 <HAL_RCC_OscConfig+0x280>)
 8002cb4:	689b      	ldr	r3, [r3, #8]
 8002cb6:	f003 030c 	and.w	r3, r3, #12
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d00b      	beq.n	8002cd6 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002cbe:	4b4d      	ldr	r3, [pc, #308]	@ (8002df4 <HAL_RCC_OscConfig+0x280>)
 8002cc0:	689b      	ldr	r3, [r3, #8]
 8002cc2:	f003 030c 	and.w	r3, r3, #12
 8002cc6:	2b08      	cmp	r3, #8
 8002cc8:	d11c      	bne.n	8002d04 <HAL_RCC_OscConfig+0x190>
 8002cca:	4b4a      	ldr	r3, [pc, #296]	@ (8002df4 <HAL_RCC_OscConfig+0x280>)
 8002ccc:	685b      	ldr	r3, [r3, #4]
 8002cce:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d116      	bne.n	8002d04 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002cd6:	4b47      	ldr	r3, [pc, #284]	@ (8002df4 <HAL_RCC_OscConfig+0x280>)
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	f003 0302 	and.w	r3, r3, #2
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d005      	beq.n	8002cee <HAL_RCC_OscConfig+0x17a>
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	68db      	ldr	r3, [r3, #12]
 8002ce6:	2b01      	cmp	r3, #1
 8002ce8:	d001      	beq.n	8002cee <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8002cea:	2301      	movs	r3, #1
 8002cec:	e1e9      	b.n	80030c2 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002cee:	4b41      	ldr	r3, [pc, #260]	@ (8002df4 <HAL_RCC_OscConfig+0x280>)
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	691b      	ldr	r3, [r3, #16]
 8002cfa:	00db      	lsls	r3, r3, #3
 8002cfc:	493d      	ldr	r1, [pc, #244]	@ (8002df4 <HAL_RCC_OscConfig+0x280>)
 8002cfe:	4313      	orrs	r3, r2
 8002d00:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d02:	e040      	b.n	8002d86 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	68db      	ldr	r3, [r3, #12]
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d023      	beq.n	8002d54 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002d0c:	4b39      	ldr	r3, [pc, #228]	@ (8002df4 <HAL_RCC_OscConfig+0x280>)
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	4a38      	ldr	r2, [pc, #224]	@ (8002df4 <HAL_RCC_OscConfig+0x280>)
 8002d12:	f043 0301 	orr.w	r3, r3, #1
 8002d16:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d18:	f7ff fb94 	bl	8002444 <HAL_GetTick>
 8002d1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d1e:	e008      	b.n	8002d32 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d20:	f7ff fb90 	bl	8002444 <HAL_GetTick>
 8002d24:	4602      	mov	r2, r0
 8002d26:	693b      	ldr	r3, [r7, #16]
 8002d28:	1ad3      	subs	r3, r2, r3
 8002d2a:	2b02      	cmp	r3, #2
 8002d2c:	d901      	bls.n	8002d32 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8002d2e:	2303      	movs	r3, #3
 8002d30:	e1c7      	b.n	80030c2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d32:	4b30      	ldr	r3, [pc, #192]	@ (8002df4 <HAL_RCC_OscConfig+0x280>)
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	f003 0302 	and.w	r3, r3, #2
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d0f0      	beq.n	8002d20 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d3e:	4b2d      	ldr	r3, [pc, #180]	@ (8002df4 <HAL_RCC_OscConfig+0x280>)
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	691b      	ldr	r3, [r3, #16]
 8002d4a:	00db      	lsls	r3, r3, #3
 8002d4c:	4929      	ldr	r1, [pc, #164]	@ (8002df4 <HAL_RCC_OscConfig+0x280>)
 8002d4e:	4313      	orrs	r3, r2
 8002d50:	600b      	str	r3, [r1, #0]
 8002d52:	e018      	b.n	8002d86 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002d54:	4b27      	ldr	r3, [pc, #156]	@ (8002df4 <HAL_RCC_OscConfig+0x280>)
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	4a26      	ldr	r2, [pc, #152]	@ (8002df4 <HAL_RCC_OscConfig+0x280>)
 8002d5a:	f023 0301 	bic.w	r3, r3, #1
 8002d5e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d60:	f7ff fb70 	bl	8002444 <HAL_GetTick>
 8002d64:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d66:	e008      	b.n	8002d7a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d68:	f7ff fb6c 	bl	8002444 <HAL_GetTick>
 8002d6c:	4602      	mov	r2, r0
 8002d6e:	693b      	ldr	r3, [r7, #16]
 8002d70:	1ad3      	subs	r3, r2, r3
 8002d72:	2b02      	cmp	r3, #2
 8002d74:	d901      	bls.n	8002d7a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002d76:	2303      	movs	r3, #3
 8002d78:	e1a3      	b.n	80030c2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d7a:	4b1e      	ldr	r3, [pc, #120]	@ (8002df4 <HAL_RCC_OscConfig+0x280>)
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	f003 0302 	and.w	r3, r3, #2
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d1f0      	bne.n	8002d68 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	f003 0308 	and.w	r3, r3, #8
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d038      	beq.n	8002e04 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	695b      	ldr	r3, [r3, #20]
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d019      	beq.n	8002dce <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002d9a:	4b16      	ldr	r3, [pc, #88]	@ (8002df4 <HAL_RCC_OscConfig+0x280>)
 8002d9c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002d9e:	4a15      	ldr	r2, [pc, #84]	@ (8002df4 <HAL_RCC_OscConfig+0x280>)
 8002da0:	f043 0301 	orr.w	r3, r3, #1
 8002da4:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002da6:	f7ff fb4d 	bl	8002444 <HAL_GetTick>
 8002daa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002dac:	e008      	b.n	8002dc0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002dae:	f7ff fb49 	bl	8002444 <HAL_GetTick>
 8002db2:	4602      	mov	r2, r0
 8002db4:	693b      	ldr	r3, [r7, #16]
 8002db6:	1ad3      	subs	r3, r2, r3
 8002db8:	2b02      	cmp	r3, #2
 8002dba:	d901      	bls.n	8002dc0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002dbc:	2303      	movs	r3, #3
 8002dbe:	e180      	b.n	80030c2 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002dc0:	4b0c      	ldr	r3, [pc, #48]	@ (8002df4 <HAL_RCC_OscConfig+0x280>)
 8002dc2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002dc4:	f003 0302 	and.w	r3, r3, #2
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d0f0      	beq.n	8002dae <HAL_RCC_OscConfig+0x23a>
 8002dcc:	e01a      	b.n	8002e04 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002dce:	4b09      	ldr	r3, [pc, #36]	@ (8002df4 <HAL_RCC_OscConfig+0x280>)
 8002dd0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002dd2:	4a08      	ldr	r2, [pc, #32]	@ (8002df4 <HAL_RCC_OscConfig+0x280>)
 8002dd4:	f023 0301 	bic.w	r3, r3, #1
 8002dd8:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002dda:	f7ff fb33 	bl	8002444 <HAL_GetTick>
 8002dde:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002de0:	e00a      	b.n	8002df8 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002de2:	f7ff fb2f 	bl	8002444 <HAL_GetTick>
 8002de6:	4602      	mov	r2, r0
 8002de8:	693b      	ldr	r3, [r7, #16]
 8002dea:	1ad3      	subs	r3, r2, r3
 8002dec:	2b02      	cmp	r3, #2
 8002dee:	d903      	bls.n	8002df8 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002df0:	2303      	movs	r3, #3
 8002df2:	e166      	b.n	80030c2 <HAL_RCC_OscConfig+0x54e>
 8002df4:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002df8:	4b92      	ldr	r3, [pc, #584]	@ (8003044 <HAL_RCC_OscConfig+0x4d0>)
 8002dfa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002dfc:	f003 0302 	and.w	r3, r3, #2
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d1ee      	bne.n	8002de2 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	f003 0304 	and.w	r3, r3, #4
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	f000 80a4 	beq.w	8002f5a <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002e12:	4b8c      	ldr	r3, [pc, #560]	@ (8003044 <HAL_RCC_OscConfig+0x4d0>)
 8002e14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e16:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d10d      	bne.n	8002e3a <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e1e:	4b89      	ldr	r3, [pc, #548]	@ (8003044 <HAL_RCC_OscConfig+0x4d0>)
 8002e20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e22:	4a88      	ldr	r2, [pc, #544]	@ (8003044 <HAL_RCC_OscConfig+0x4d0>)
 8002e24:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002e28:	6413      	str	r3, [r2, #64]	@ 0x40
 8002e2a:	4b86      	ldr	r3, [pc, #536]	@ (8003044 <HAL_RCC_OscConfig+0x4d0>)
 8002e2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e2e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002e32:	60bb      	str	r3, [r7, #8]
 8002e34:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002e36:	2301      	movs	r3, #1
 8002e38:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002e3a:	4b83      	ldr	r3, [pc, #524]	@ (8003048 <HAL_RCC_OscConfig+0x4d4>)
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d118      	bne.n	8002e78 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8002e46:	4b80      	ldr	r3, [pc, #512]	@ (8003048 <HAL_RCC_OscConfig+0x4d4>)
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	4a7f      	ldr	r2, [pc, #508]	@ (8003048 <HAL_RCC_OscConfig+0x4d4>)
 8002e4c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002e50:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002e52:	f7ff faf7 	bl	8002444 <HAL_GetTick>
 8002e56:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002e58:	e008      	b.n	8002e6c <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e5a:	f7ff faf3 	bl	8002444 <HAL_GetTick>
 8002e5e:	4602      	mov	r2, r0
 8002e60:	693b      	ldr	r3, [r7, #16]
 8002e62:	1ad3      	subs	r3, r2, r3
 8002e64:	2b64      	cmp	r3, #100	@ 0x64
 8002e66:	d901      	bls.n	8002e6c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002e68:	2303      	movs	r3, #3
 8002e6a:	e12a      	b.n	80030c2 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002e6c:	4b76      	ldr	r3, [pc, #472]	@ (8003048 <HAL_RCC_OscConfig+0x4d4>)
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d0f0      	beq.n	8002e5a <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	689b      	ldr	r3, [r3, #8]
 8002e7c:	2b01      	cmp	r3, #1
 8002e7e:	d106      	bne.n	8002e8e <HAL_RCC_OscConfig+0x31a>
 8002e80:	4b70      	ldr	r3, [pc, #448]	@ (8003044 <HAL_RCC_OscConfig+0x4d0>)
 8002e82:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e84:	4a6f      	ldr	r2, [pc, #444]	@ (8003044 <HAL_RCC_OscConfig+0x4d0>)
 8002e86:	f043 0301 	orr.w	r3, r3, #1
 8002e8a:	6713      	str	r3, [r2, #112]	@ 0x70
 8002e8c:	e02d      	b.n	8002eea <HAL_RCC_OscConfig+0x376>
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	689b      	ldr	r3, [r3, #8]
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d10c      	bne.n	8002eb0 <HAL_RCC_OscConfig+0x33c>
 8002e96:	4b6b      	ldr	r3, [pc, #428]	@ (8003044 <HAL_RCC_OscConfig+0x4d0>)
 8002e98:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e9a:	4a6a      	ldr	r2, [pc, #424]	@ (8003044 <HAL_RCC_OscConfig+0x4d0>)
 8002e9c:	f023 0301 	bic.w	r3, r3, #1
 8002ea0:	6713      	str	r3, [r2, #112]	@ 0x70
 8002ea2:	4b68      	ldr	r3, [pc, #416]	@ (8003044 <HAL_RCC_OscConfig+0x4d0>)
 8002ea4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ea6:	4a67      	ldr	r2, [pc, #412]	@ (8003044 <HAL_RCC_OscConfig+0x4d0>)
 8002ea8:	f023 0304 	bic.w	r3, r3, #4
 8002eac:	6713      	str	r3, [r2, #112]	@ 0x70
 8002eae:	e01c      	b.n	8002eea <HAL_RCC_OscConfig+0x376>
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	689b      	ldr	r3, [r3, #8]
 8002eb4:	2b05      	cmp	r3, #5
 8002eb6:	d10c      	bne.n	8002ed2 <HAL_RCC_OscConfig+0x35e>
 8002eb8:	4b62      	ldr	r3, [pc, #392]	@ (8003044 <HAL_RCC_OscConfig+0x4d0>)
 8002eba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ebc:	4a61      	ldr	r2, [pc, #388]	@ (8003044 <HAL_RCC_OscConfig+0x4d0>)
 8002ebe:	f043 0304 	orr.w	r3, r3, #4
 8002ec2:	6713      	str	r3, [r2, #112]	@ 0x70
 8002ec4:	4b5f      	ldr	r3, [pc, #380]	@ (8003044 <HAL_RCC_OscConfig+0x4d0>)
 8002ec6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ec8:	4a5e      	ldr	r2, [pc, #376]	@ (8003044 <HAL_RCC_OscConfig+0x4d0>)
 8002eca:	f043 0301 	orr.w	r3, r3, #1
 8002ece:	6713      	str	r3, [r2, #112]	@ 0x70
 8002ed0:	e00b      	b.n	8002eea <HAL_RCC_OscConfig+0x376>
 8002ed2:	4b5c      	ldr	r3, [pc, #368]	@ (8003044 <HAL_RCC_OscConfig+0x4d0>)
 8002ed4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ed6:	4a5b      	ldr	r2, [pc, #364]	@ (8003044 <HAL_RCC_OscConfig+0x4d0>)
 8002ed8:	f023 0301 	bic.w	r3, r3, #1
 8002edc:	6713      	str	r3, [r2, #112]	@ 0x70
 8002ede:	4b59      	ldr	r3, [pc, #356]	@ (8003044 <HAL_RCC_OscConfig+0x4d0>)
 8002ee0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ee2:	4a58      	ldr	r2, [pc, #352]	@ (8003044 <HAL_RCC_OscConfig+0x4d0>)
 8002ee4:	f023 0304 	bic.w	r3, r3, #4
 8002ee8:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	689b      	ldr	r3, [r3, #8]
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d015      	beq.n	8002f1e <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ef2:	f7ff faa7 	bl	8002444 <HAL_GetTick>
 8002ef6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ef8:	e00a      	b.n	8002f10 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002efa:	f7ff faa3 	bl	8002444 <HAL_GetTick>
 8002efe:	4602      	mov	r2, r0
 8002f00:	693b      	ldr	r3, [r7, #16]
 8002f02:	1ad3      	subs	r3, r2, r3
 8002f04:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002f08:	4293      	cmp	r3, r2
 8002f0a:	d901      	bls.n	8002f10 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8002f0c:	2303      	movs	r3, #3
 8002f0e:	e0d8      	b.n	80030c2 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f10:	4b4c      	ldr	r3, [pc, #304]	@ (8003044 <HAL_RCC_OscConfig+0x4d0>)
 8002f12:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f14:	f003 0302 	and.w	r3, r3, #2
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d0ee      	beq.n	8002efa <HAL_RCC_OscConfig+0x386>
 8002f1c:	e014      	b.n	8002f48 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f1e:	f7ff fa91 	bl	8002444 <HAL_GetTick>
 8002f22:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f24:	e00a      	b.n	8002f3c <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f26:	f7ff fa8d 	bl	8002444 <HAL_GetTick>
 8002f2a:	4602      	mov	r2, r0
 8002f2c:	693b      	ldr	r3, [r7, #16]
 8002f2e:	1ad3      	subs	r3, r2, r3
 8002f30:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002f34:	4293      	cmp	r3, r2
 8002f36:	d901      	bls.n	8002f3c <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8002f38:	2303      	movs	r3, #3
 8002f3a:	e0c2      	b.n	80030c2 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f3c:	4b41      	ldr	r3, [pc, #260]	@ (8003044 <HAL_RCC_OscConfig+0x4d0>)
 8002f3e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f40:	f003 0302 	and.w	r3, r3, #2
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d1ee      	bne.n	8002f26 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002f48:	7dfb      	ldrb	r3, [r7, #23]
 8002f4a:	2b01      	cmp	r3, #1
 8002f4c:	d105      	bne.n	8002f5a <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f4e:	4b3d      	ldr	r3, [pc, #244]	@ (8003044 <HAL_RCC_OscConfig+0x4d0>)
 8002f50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f52:	4a3c      	ldr	r2, [pc, #240]	@ (8003044 <HAL_RCC_OscConfig+0x4d0>)
 8002f54:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002f58:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	699b      	ldr	r3, [r3, #24]
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	f000 80ae 	beq.w	80030c0 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002f64:	4b37      	ldr	r3, [pc, #220]	@ (8003044 <HAL_RCC_OscConfig+0x4d0>)
 8002f66:	689b      	ldr	r3, [r3, #8]
 8002f68:	f003 030c 	and.w	r3, r3, #12
 8002f6c:	2b08      	cmp	r3, #8
 8002f6e:	d06d      	beq.n	800304c <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	699b      	ldr	r3, [r3, #24]
 8002f74:	2b02      	cmp	r3, #2
 8002f76:	d14b      	bne.n	8003010 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f78:	4b32      	ldr	r3, [pc, #200]	@ (8003044 <HAL_RCC_OscConfig+0x4d0>)
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	4a31      	ldr	r2, [pc, #196]	@ (8003044 <HAL_RCC_OscConfig+0x4d0>)
 8002f7e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002f82:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f84:	f7ff fa5e 	bl	8002444 <HAL_GetTick>
 8002f88:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f8a:	e008      	b.n	8002f9e <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f8c:	f7ff fa5a 	bl	8002444 <HAL_GetTick>
 8002f90:	4602      	mov	r2, r0
 8002f92:	693b      	ldr	r3, [r7, #16]
 8002f94:	1ad3      	subs	r3, r2, r3
 8002f96:	2b02      	cmp	r3, #2
 8002f98:	d901      	bls.n	8002f9e <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8002f9a:	2303      	movs	r3, #3
 8002f9c:	e091      	b.n	80030c2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f9e:	4b29      	ldr	r3, [pc, #164]	@ (8003044 <HAL_RCC_OscConfig+0x4d0>)
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d1f0      	bne.n	8002f8c <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	69da      	ldr	r2, [r3, #28]
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	6a1b      	ldr	r3, [r3, #32]
 8002fb2:	431a      	orrs	r2, r3
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fb8:	019b      	lsls	r3, r3, #6
 8002fba:	431a      	orrs	r2, r3
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002fc0:	085b      	lsrs	r3, r3, #1
 8002fc2:	3b01      	subs	r3, #1
 8002fc4:	041b      	lsls	r3, r3, #16
 8002fc6:	431a      	orrs	r2, r3
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002fcc:	061b      	lsls	r3, r3, #24
 8002fce:	431a      	orrs	r2, r3
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fd4:	071b      	lsls	r3, r3, #28
 8002fd6:	491b      	ldr	r1, [pc, #108]	@ (8003044 <HAL_RCC_OscConfig+0x4d0>)
 8002fd8:	4313      	orrs	r3, r2
 8002fda:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002fdc:	4b19      	ldr	r3, [pc, #100]	@ (8003044 <HAL_RCC_OscConfig+0x4d0>)
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	4a18      	ldr	r2, [pc, #96]	@ (8003044 <HAL_RCC_OscConfig+0x4d0>)
 8002fe2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002fe6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fe8:	f7ff fa2c 	bl	8002444 <HAL_GetTick>
 8002fec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002fee:	e008      	b.n	8003002 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ff0:	f7ff fa28 	bl	8002444 <HAL_GetTick>
 8002ff4:	4602      	mov	r2, r0
 8002ff6:	693b      	ldr	r3, [r7, #16]
 8002ff8:	1ad3      	subs	r3, r2, r3
 8002ffa:	2b02      	cmp	r3, #2
 8002ffc:	d901      	bls.n	8003002 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8002ffe:	2303      	movs	r3, #3
 8003000:	e05f      	b.n	80030c2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003002:	4b10      	ldr	r3, [pc, #64]	@ (8003044 <HAL_RCC_OscConfig+0x4d0>)
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800300a:	2b00      	cmp	r3, #0
 800300c:	d0f0      	beq.n	8002ff0 <HAL_RCC_OscConfig+0x47c>
 800300e:	e057      	b.n	80030c0 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003010:	4b0c      	ldr	r3, [pc, #48]	@ (8003044 <HAL_RCC_OscConfig+0x4d0>)
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	4a0b      	ldr	r2, [pc, #44]	@ (8003044 <HAL_RCC_OscConfig+0x4d0>)
 8003016:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800301a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800301c:	f7ff fa12 	bl	8002444 <HAL_GetTick>
 8003020:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003022:	e008      	b.n	8003036 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003024:	f7ff fa0e 	bl	8002444 <HAL_GetTick>
 8003028:	4602      	mov	r2, r0
 800302a:	693b      	ldr	r3, [r7, #16]
 800302c:	1ad3      	subs	r3, r2, r3
 800302e:	2b02      	cmp	r3, #2
 8003030:	d901      	bls.n	8003036 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8003032:	2303      	movs	r3, #3
 8003034:	e045      	b.n	80030c2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003036:	4b03      	ldr	r3, [pc, #12]	@ (8003044 <HAL_RCC_OscConfig+0x4d0>)
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800303e:	2b00      	cmp	r3, #0
 8003040:	d1f0      	bne.n	8003024 <HAL_RCC_OscConfig+0x4b0>
 8003042:	e03d      	b.n	80030c0 <HAL_RCC_OscConfig+0x54c>
 8003044:	40023800 	.word	0x40023800
 8003048:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 800304c:	4b1f      	ldr	r3, [pc, #124]	@ (80030cc <HAL_RCC_OscConfig+0x558>)
 800304e:	685b      	ldr	r3, [r3, #4]
 8003050:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	699b      	ldr	r3, [r3, #24]
 8003056:	2b01      	cmp	r3, #1
 8003058:	d030      	beq.n	80030bc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003064:	429a      	cmp	r2, r3
 8003066:	d129      	bne.n	80030bc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003072:	429a      	cmp	r2, r3
 8003074:	d122      	bne.n	80030bc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003076:	68fa      	ldr	r2, [r7, #12]
 8003078:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800307c:	4013      	ands	r3, r2
 800307e:	687a      	ldr	r2, [r7, #4]
 8003080:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003082:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003084:	4293      	cmp	r3, r2
 8003086:	d119      	bne.n	80030bc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003092:	085b      	lsrs	r3, r3, #1
 8003094:	3b01      	subs	r3, #1
 8003096:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003098:	429a      	cmp	r2, r3
 800309a:	d10f      	bne.n	80030bc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80030a6:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80030a8:	429a      	cmp	r2, r3
 80030aa:	d107      	bne.n	80030bc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030b6:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80030b8:	429a      	cmp	r2, r3
 80030ba:	d001      	beq.n	80030c0 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 80030bc:	2301      	movs	r3, #1
 80030be:	e000      	b.n	80030c2 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 80030c0:	2300      	movs	r3, #0
}
 80030c2:	4618      	mov	r0, r3
 80030c4:	3718      	adds	r7, #24
 80030c6:	46bd      	mov	sp, r7
 80030c8:	bd80      	pop	{r7, pc}
 80030ca:	bf00      	nop
 80030cc:	40023800 	.word	0x40023800

080030d0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80030d0:	b580      	push	{r7, lr}
 80030d2:	b084      	sub	sp, #16
 80030d4:	af00      	add	r7, sp, #0
 80030d6:	6078      	str	r0, [r7, #4]
 80030d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80030da:	2300      	movs	r3, #0
 80030dc:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d101      	bne.n	80030e8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80030e4:	2301      	movs	r3, #1
 80030e6:	e0d0      	b.n	800328a <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80030e8:	4b6a      	ldr	r3, [pc, #424]	@ (8003294 <HAL_RCC_ClockConfig+0x1c4>)
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	f003 030f 	and.w	r3, r3, #15
 80030f0:	683a      	ldr	r2, [r7, #0]
 80030f2:	429a      	cmp	r2, r3
 80030f4:	d910      	bls.n	8003118 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030f6:	4b67      	ldr	r3, [pc, #412]	@ (8003294 <HAL_RCC_ClockConfig+0x1c4>)
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	f023 020f 	bic.w	r2, r3, #15
 80030fe:	4965      	ldr	r1, [pc, #404]	@ (8003294 <HAL_RCC_ClockConfig+0x1c4>)
 8003100:	683b      	ldr	r3, [r7, #0]
 8003102:	4313      	orrs	r3, r2
 8003104:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003106:	4b63      	ldr	r3, [pc, #396]	@ (8003294 <HAL_RCC_ClockConfig+0x1c4>)
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	f003 030f 	and.w	r3, r3, #15
 800310e:	683a      	ldr	r2, [r7, #0]
 8003110:	429a      	cmp	r2, r3
 8003112:	d001      	beq.n	8003118 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003114:	2301      	movs	r3, #1
 8003116:	e0b8      	b.n	800328a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	f003 0302 	and.w	r3, r3, #2
 8003120:	2b00      	cmp	r3, #0
 8003122:	d020      	beq.n	8003166 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	f003 0304 	and.w	r3, r3, #4
 800312c:	2b00      	cmp	r3, #0
 800312e:	d005      	beq.n	800313c <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003130:	4b59      	ldr	r3, [pc, #356]	@ (8003298 <HAL_RCC_ClockConfig+0x1c8>)
 8003132:	689b      	ldr	r3, [r3, #8]
 8003134:	4a58      	ldr	r2, [pc, #352]	@ (8003298 <HAL_RCC_ClockConfig+0x1c8>)
 8003136:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800313a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	f003 0308 	and.w	r3, r3, #8
 8003144:	2b00      	cmp	r3, #0
 8003146:	d005      	beq.n	8003154 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003148:	4b53      	ldr	r3, [pc, #332]	@ (8003298 <HAL_RCC_ClockConfig+0x1c8>)
 800314a:	689b      	ldr	r3, [r3, #8]
 800314c:	4a52      	ldr	r2, [pc, #328]	@ (8003298 <HAL_RCC_ClockConfig+0x1c8>)
 800314e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003152:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003154:	4b50      	ldr	r3, [pc, #320]	@ (8003298 <HAL_RCC_ClockConfig+0x1c8>)
 8003156:	689b      	ldr	r3, [r3, #8]
 8003158:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	689b      	ldr	r3, [r3, #8]
 8003160:	494d      	ldr	r1, [pc, #308]	@ (8003298 <HAL_RCC_ClockConfig+0x1c8>)
 8003162:	4313      	orrs	r3, r2
 8003164:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	f003 0301 	and.w	r3, r3, #1
 800316e:	2b00      	cmp	r3, #0
 8003170:	d040      	beq.n	80031f4 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	685b      	ldr	r3, [r3, #4]
 8003176:	2b01      	cmp	r3, #1
 8003178:	d107      	bne.n	800318a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800317a:	4b47      	ldr	r3, [pc, #284]	@ (8003298 <HAL_RCC_ClockConfig+0x1c8>)
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003182:	2b00      	cmp	r3, #0
 8003184:	d115      	bne.n	80031b2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003186:	2301      	movs	r3, #1
 8003188:	e07f      	b.n	800328a <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	685b      	ldr	r3, [r3, #4]
 800318e:	2b02      	cmp	r3, #2
 8003190:	d107      	bne.n	80031a2 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003192:	4b41      	ldr	r3, [pc, #260]	@ (8003298 <HAL_RCC_ClockConfig+0x1c8>)
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800319a:	2b00      	cmp	r3, #0
 800319c:	d109      	bne.n	80031b2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800319e:	2301      	movs	r3, #1
 80031a0:	e073      	b.n	800328a <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80031a2:	4b3d      	ldr	r3, [pc, #244]	@ (8003298 <HAL_RCC_ClockConfig+0x1c8>)
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	f003 0302 	and.w	r3, r3, #2
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d101      	bne.n	80031b2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80031ae:	2301      	movs	r3, #1
 80031b0:	e06b      	b.n	800328a <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80031b2:	4b39      	ldr	r3, [pc, #228]	@ (8003298 <HAL_RCC_ClockConfig+0x1c8>)
 80031b4:	689b      	ldr	r3, [r3, #8]
 80031b6:	f023 0203 	bic.w	r2, r3, #3
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	685b      	ldr	r3, [r3, #4]
 80031be:	4936      	ldr	r1, [pc, #216]	@ (8003298 <HAL_RCC_ClockConfig+0x1c8>)
 80031c0:	4313      	orrs	r3, r2
 80031c2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80031c4:	f7ff f93e 	bl	8002444 <HAL_GetTick>
 80031c8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80031ca:	e00a      	b.n	80031e2 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80031cc:	f7ff f93a 	bl	8002444 <HAL_GetTick>
 80031d0:	4602      	mov	r2, r0
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	1ad3      	subs	r3, r2, r3
 80031d6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80031da:	4293      	cmp	r3, r2
 80031dc:	d901      	bls.n	80031e2 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80031de:	2303      	movs	r3, #3
 80031e0:	e053      	b.n	800328a <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80031e2:	4b2d      	ldr	r3, [pc, #180]	@ (8003298 <HAL_RCC_ClockConfig+0x1c8>)
 80031e4:	689b      	ldr	r3, [r3, #8]
 80031e6:	f003 020c 	and.w	r2, r3, #12
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	685b      	ldr	r3, [r3, #4]
 80031ee:	009b      	lsls	r3, r3, #2
 80031f0:	429a      	cmp	r2, r3
 80031f2:	d1eb      	bne.n	80031cc <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80031f4:	4b27      	ldr	r3, [pc, #156]	@ (8003294 <HAL_RCC_ClockConfig+0x1c4>)
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	f003 030f 	and.w	r3, r3, #15
 80031fc:	683a      	ldr	r2, [r7, #0]
 80031fe:	429a      	cmp	r2, r3
 8003200:	d210      	bcs.n	8003224 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003202:	4b24      	ldr	r3, [pc, #144]	@ (8003294 <HAL_RCC_ClockConfig+0x1c4>)
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	f023 020f 	bic.w	r2, r3, #15
 800320a:	4922      	ldr	r1, [pc, #136]	@ (8003294 <HAL_RCC_ClockConfig+0x1c4>)
 800320c:	683b      	ldr	r3, [r7, #0]
 800320e:	4313      	orrs	r3, r2
 8003210:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003212:	4b20      	ldr	r3, [pc, #128]	@ (8003294 <HAL_RCC_ClockConfig+0x1c4>)
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	f003 030f 	and.w	r3, r3, #15
 800321a:	683a      	ldr	r2, [r7, #0]
 800321c:	429a      	cmp	r2, r3
 800321e:	d001      	beq.n	8003224 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8003220:	2301      	movs	r3, #1
 8003222:	e032      	b.n	800328a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	f003 0304 	and.w	r3, r3, #4
 800322c:	2b00      	cmp	r3, #0
 800322e:	d008      	beq.n	8003242 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003230:	4b19      	ldr	r3, [pc, #100]	@ (8003298 <HAL_RCC_ClockConfig+0x1c8>)
 8003232:	689b      	ldr	r3, [r3, #8]
 8003234:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	68db      	ldr	r3, [r3, #12]
 800323c:	4916      	ldr	r1, [pc, #88]	@ (8003298 <HAL_RCC_ClockConfig+0x1c8>)
 800323e:	4313      	orrs	r3, r2
 8003240:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	f003 0308 	and.w	r3, r3, #8
 800324a:	2b00      	cmp	r3, #0
 800324c:	d009      	beq.n	8003262 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800324e:	4b12      	ldr	r3, [pc, #72]	@ (8003298 <HAL_RCC_ClockConfig+0x1c8>)
 8003250:	689b      	ldr	r3, [r3, #8]
 8003252:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	691b      	ldr	r3, [r3, #16]
 800325a:	00db      	lsls	r3, r3, #3
 800325c:	490e      	ldr	r1, [pc, #56]	@ (8003298 <HAL_RCC_ClockConfig+0x1c8>)
 800325e:	4313      	orrs	r3, r2
 8003260:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003262:	f000 f821 	bl	80032a8 <HAL_RCC_GetSysClockFreq>
 8003266:	4602      	mov	r2, r0
 8003268:	4b0b      	ldr	r3, [pc, #44]	@ (8003298 <HAL_RCC_ClockConfig+0x1c8>)
 800326a:	689b      	ldr	r3, [r3, #8]
 800326c:	091b      	lsrs	r3, r3, #4
 800326e:	f003 030f 	and.w	r3, r3, #15
 8003272:	490a      	ldr	r1, [pc, #40]	@ (800329c <HAL_RCC_ClockConfig+0x1cc>)
 8003274:	5ccb      	ldrb	r3, [r1, r3]
 8003276:	fa22 f303 	lsr.w	r3, r2, r3
 800327a:	4a09      	ldr	r2, [pc, #36]	@ (80032a0 <HAL_RCC_ClockConfig+0x1d0>)
 800327c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800327e:	4b09      	ldr	r3, [pc, #36]	@ (80032a4 <HAL_RCC_ClockConfig+0x1d4>)
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	4618      	mov	r0, r3
 8003284:	f7ff f89a 	bl	80023bc <HAL_InitTick>

  return HAL_OK;
 8003288:	2300      	movs	r3, #0
}
 800328a:	4618      	mov	r0, r3
 800328c:	3710      	adds	r7, #16
 800328e:	46bd      	mov	sp, r7
 8003290:	bd80      	pop	{r7, pc}
 8003292:	bf00      	nop
 8003294:	40023c00 	.word	0x40023c00
 8003298:	40023800 	.word	0x40023800
 800329c:	08007ba4 	.word	0x08007ba4
 80032a0:	20000018 	.word	0x20000018
 80032a4:	2000001c 	.word	0x2000001c

080032a8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80032a8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80032ac:	b094      	sub	sp, #80	@ 0x50
 80032ae:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80032b0:	2300      	movs	r3, #0
 80032b2:	647b      	str	r3, [r7, #68]	@ 0x44
 80032b4:	2300      	movs	r3, #0
 80032b6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80032b8:	2300      	movs	r3, #0
 80032ba:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0;
 80032bc:	2300      	movs	r3, #0
 80032be:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80032c0:	4b79      	ldr	r3, [pc, #484]	@ (80034a8 <HAL_RCC_GetSysClockFreq+0x200>)
 80032c2:	689b      	ldr	r3, [r3, #8]
 80032c4:	f003 030c 	and.w	r3, r3, #12
 80032c8:	2b08      	cmp	r3, #8
 80032ca:	d00d      	beq.n	80032e8 <HAL_RCC_GetSysClockFreq+0x40>
 80032cc:	2b08      	cmp	r3, #8
 80032ce:	f200 80e1 	bhi.w	8003494 <HAL_RCC_GetSysClockFreq+0x1ec>
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d002      	beq.n	80032dc <HAL_RCC_GetSysClockFreq+0x34>
 80032d6:	2b04      	cmp	r3, #4
 80032d8:	d003      	beq.n	80032e2 <HAL_RCC_GetSysClockFreq+0x3a>
 80032da:	e0db      	b.n	8003494 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80032dc:	4b73      	ldr	r3, [pc, #460]	@ (80034ac <HAL_RCC_GetSysClockFreq+0x204>)
 80032de:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80032e0:	e0db      	b.n	800349a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80032e2:	4b73      	ldr	r3, [pc, #460]	@ (80034b0 <HAL_RCC_GetSysClockFreq+0x208>)
 80032e4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80032e6:	e0d8      	b.n	800349a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80032e8:	4b6f      	ldr	r3, [pc, #444]	@ (80034a8 <HAL_RCC_GetSysClockFreq+0x200>)
 80032ea:	685b      	ldr	r3, [r3, #4]
 80032ec:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80032f0:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80032f2:	4b6d      	ldr	r3, [pc, #436]	@ (80034a8 <HAL_RCC_GetSysClockFreq+0x200>)
 80032f4:	685b      	ldr	r3, [r3, #4]
 80032f6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d063      	beq.n	80033c6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80032fe:	4b6a      	ldr	r3, [pc, #424]	@ (80034a8 <HAL_RCC_GetSysClockFreq+0x200>)
 8003300:	685b      	ldr	r3, [r3, #4]
 8003302:	099b      	lsrs	r3, r3, #6
 8003304:	2200      	movs	r2, #0
 8003306:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003308:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800330a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800330c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003310:	633b      	str	r3, [r7, #48]	@ 0x30
 8003312:	2300      	movs	r3, #0
 8003314:	637b      	str	r3, [r7, #52]	@ 0x34
 8003316:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800331a:	4622      	mov	r2, r4
 800331c:	462b      	mov	r3, r5
 800331e:	f04f 0000 	mov.w	r0, #0
 8003322:	f04f 0100 	mov.w	r1, #0
 8003326:	0159      	lsls	r1, r3, #5
 8003328:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800332c:	0150      	lsls	r0, r2, #5
 800332e:	4602      	mov	r2, r0
 8003330:	460b      	mov	r3, r1
 8003332:	4621      	mov	r1, r4
 8003334:	1a51      	subs	r1, r2, r1
 8003336:	6139      	str	r1, [r7, #16]
 8003338:	4629      	mov	r1, r5
 800333a:	eb63 0301 	sbc.w	r3, r3, r1
 800333e:	617b      	str	r3, [r7, #20]
 8003340:	f04f 0200 	mov.w	r2, #0
 8003344:	f04f 0300 	mov.w	r3, #0
 8003348:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800334c:	4659      	mov	r1, fp
 800334e:	018b      	lsls	r3, r1, #6
 8003350:	4651      	mov	r1, sl
 8003352:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003356:	4651      	mov	r1, sl
 8003358:	018a      	lsls	r2, r1, #6
 800335a:	4651      	mov	r1, sl
 800335c:	ebb2 0801 	subs.w	r8, r2, r1
 8003360:	4659      	mov	r1, fp
 8003362:	eb63 0901 	sbc.w	r9, r3, r1
 8003366:	f04f 0200 	mov.w	r2, #0
 800336a:	f04f 0300 	mov.w	r3, #0
 800336e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003372:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003376:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800337a:	4690      	mov	r8, r2
 800337c:	4699      	mov	r9, r3
 800337e:	4623      	mov	r3, r4
 8003380:	eb18 0303 	adds.w	r3, r8, r3
 8003384:	60bb      	str	r3, [r7, #8]
 8003386:	462b      	mov	r3, r5
 8003388:	eb49 0303 	adc.w	r3, r9, r3
 800338c:	60fb      	str	r3, [r7, #12]
 800338e:	f04f 0200 	mov.w	r2, #0
 8003392:	f04f 0300 	mov.w	r3, #0
 8003396:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800339a:	4629      	mov	r1, r5
 800339c:	024b      	lsls	r3, r1, #9
 800339e:	4621      	mov	r1, r4
 80033a0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80033a4:	4621      	mov	r1, r4
 80033a6:	024a      	lsls	r2, r1, #9
 80033a8:	4610      	mov	r0, r2
 80033aa:	4619      	mov	r1, r3
 80033ac:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80033ae:	2200      	movs	r2, #0
 80033b0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80033b2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80033b4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80033b8:	f7fc ff9a 	bl	80002f0 <__aeabi_uldivmod>
 80033bc:	4602      	mov	r2, r0
 80033be:	460b      	mov	r3, r1
 80033c0:	4613      	mov	r3, r2
 80033c2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80033c4:	e058      	b.n	8003478 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80033c6:	4b38      	ldr	r3, [pc, #224]	@ (80034a8 <HAL_RCC_GetSysClockFreq+0x200>)
 80033c8:	685b      	ldr	r3, [r3, #4]
 80033ca:	099b      	lsrs	r3, r3, #6
 80033cc:	2200      	movs	r2, #0
 80033ce:	4618      	mov	r0, r3
 80033d0:	4611      	mov	r1, r2
 80033d2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80033d6:	623b      	str	r3, [r7, #32]
 80033d8:	2300      	movs	r3, #0
 80033da:	627b      	str	r3, [r7, #36]	@ 0x24
 80033dc:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80033e0:	4642      	mov	r2, r8
 80033e2:	464b      	mov	r3, r9
 80033e4:	f04f 0000 	mov.w	r0, #0
 80033e8:	f04f 0100 	mov.w	r1, #0
 80033ec:	0159      	lsls	r1, r3, #5
 80033ee:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80033f2:	0150      	lsls	r0, r2, #5
 80033f4:	4602      	mov	r2, r0
 80033f6:	460b      	mov	r3, r1
 80033f8:	4641      	mov	r1, r8
 80033fa:	ebb2 0a01 	subs.w	sl, r2, r1
 80033fe:	4649      	mov	r1, r9
 8003400:	eb63 0b01 	sbc.w	fp, r3, r1
 8003404:	f04f 0200 	mov.w	r2, #0
 8003408:	f04f 0300 	mov.w	r3, #0
 800340c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003410:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003414:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003418:	ebb2 040a 	subs.w	r4, r2, sl
 800341c:	eb63 050b 	sbc.w	r5, r3, fp
 8003420:	f04f 0200 	mov.w	r2, #0
 8003424:	f04f 0300 	mov.w	r3, #0
 8003428:	00eb      	lsls	r3, r5, #3
 800342a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800342e:	00e2      	lsls	r2, r4, #3
 8003430:	4614      	mov	r4, r2
 8003432:	461d      	mov	r5, r3
 8003434:	4643      	mov	r3, r8
 8003436:	18e3      	adds	r3, r4, r3
 8003438:	603b      	str	r3, [r7, #0]
 800343a:	464b      	mov	r3, r9
 800343c:	eb45 0303 	adc.w	r3, r5, r3
 8003440:	607b      	str	r3, [r7, #4]
 8003442:	f04f 0200 	mov.w	r2, #0
 8003446:	f04f 0300 	mov.w	r3, #0
 800344a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800344e:	4629      	mov	r1, r5
 8003450:	028b      	lsls	r3, r1, #10
 8003452:	4621      	mov	r1, r4
 8003454:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003458:	4621      	mov	r1, r4
 800345a:	028a      	lsls	r2, r1, #10
 800345c:	4610      	mov	r0, r2
 800345e:	4619      	mov	r1, r3
 8003460:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003462:	2200      	movs	r2, #0
 8003464:	61bb      	str	r3, [r7, #24]
 8003466:	61fa      	str	r2, [r7, #28]
 8003468:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800346c:	f7fc ff40 	bl	80002f0 <__aeabi_uldivmod>
 8003470:	4602      	mov	r2, r0
 8003472:	460b      	mov	r3, r1
 8003474:	4613      	mov	r3, r2
 8003476:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8003478:	4b0b      	ldr	r3, [pc, #44]	@ (80034a8 <HAL_RCC_GetSysClockFreq+0x200>)
 800347a:	685b      	ldr	r3, [r3, #4]
 800347c:	0c1b      	lsrs	r3, r3, #16
 800347e:	f003 0303 	and.w	r3, r3, #3
 8003482:	3301      	adds	r3, #1
 8003484:	005b      	lsls	r3, r3, #1
 8003486:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8003488:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800348a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800348c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003490:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003492:	e002      	b.n	800349a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003494:	4b05      	ldr	r3, [pc, #20]	@ (80034ac <HAL_RCC_GetSysClockFreq+0x204>)
 8003496:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003498:	bf00      	nop
    }
  }
  return sysclockfreq;
 800349a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 800349c:	4618      	mov	r0, r3
 800349e:	3750      	adds	r7, #80	@ 0x50
 80034a0:	46bd      	mov	sp, r7
 80034a2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80034a6:	bf00      	nop
 80034a8:	40023800 	.word	0x40023800
 80034ac:	00f42400 	.word	0x00f42400
 80034b0:	007a1200 	.word	0x007a1200

080034b4 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80034b4:	b480      	push	{r7}
 80034b6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80034b8:	4b03      	ldr	r3, [pc, #12]	@ (80034c8 <HAL_RCC_GetHCLKFreq+0x14>)
 80034ba:	681b      	ldr	r3, [r3, #0]
}
 80034bc:	4618      	mov	r0, r3
 80034be:	46bd      	mov	sp, r7
 80034c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c4:	4770      	bx	lr
 80034c6:	bf00      	nop
 80034c8:	20000018 	.word	0x20000018

080034cc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80034cc:	b580      	push	{r7, lr}
 80034ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80034d0:	f7ff fff0 	bl	80034b4 <HAL_RCC_GetHCLKFreq>
 80034d4:	4602      	mov	r2, r0
 80034d6:	4b05      	ldr	r3, [pc, #20]	@ (80034ec <HAL_RCC_GetPCLK1Freq+0x20>)
 80034d8:	689b      	ldr	r3, [r3, #8]
 80034da:	0a9b      	lsrs	r3, r3, #10
 80034dc:	f003 0307 	and.w	r3, r3, #7
 80034e0:	4903      	ldr	r1, [pc, #12]	@ (80034f0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80034e2:	5ccb      	ldrb	r3, [r1, r3]
 80034e4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80034e8:	4618      	mov	r0, r3
 80034ea:	bd80      	pop	{r7, pc}
 80034ec:	40023800 	.word	0x40023800
 80034f0:	08007bb4 	.word	0x08007bb4

080034f4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80034f4:	b580      	push	{r7, lr}
 80034f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80034f8:	f7ff ffdc 	bl	80034b4 <HAL_RCC_GetHCLKFreq>
 80034fc:	4602      	mov	r2, r0
 80034fe:	4b05      	ldr	r3, [pc, #20]	@ (8003514 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003500:	689b      	ldr	r3, [r3, #8]
 8003502:	0b5b      	lsrs	r3, r3, #13
 8003504:	f003 0307 	and.w	r3, r3, #7
 8003508:	4903      	ldr	r1, [pc, #12]	@ (8003518 <HAL_RCC_GetPCLK2Freq+0x24>)
 800350a:	5ccb      	ldrb	r3, [r1, r3]
 800350c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003510:	4618      	mov	r0, r3
 8003512:	bd80      	pop	{r7, pc}
 8003514:	40023800 	.word	0x40023800
 8003518:	08007bb4 	.word	0x08007bb4

0800351c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800351c:	b580      	push	{r7, lr}
 800351e:	b088      	sub	sp, #32
 8003520:	af00      	add	r7, sp, #0
 8003522:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8003524:	2300      	movs	r3, #0
 8003526:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8003528:	2300      	movs	r3, #0
 800352a:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 800352c:	2300      	movs	r3, #0
 800352e:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8003530:	2300      	movs	r3, #0
 8003532:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8003534:	2300      	movs	r3, #0
 8003536:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	f003 0301 	and.w	r3, r3, #1
 8003540:	2b00      	cmp	r3, #0
 8003542:	d012      	beq.n	800356a <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003544:	4b69      	ldr	r3, [pc, #420]	@ (80036ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003546:	689b      	ldr	r3, [r3, #8]
 8003548:	4a68      	ldr	r2, [pc, #416]	@ (80036ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800354a:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800354e:	6093      	str	r3, [r2, #8]
 8003550:	4b66      	ldr	r3, [pc, #408]	@ (80036ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003552:	689a      	ldr	r2, [r3, #8]
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003558:	4964      	ldr	r1, [pc, #400]	@ (80036ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800355a:	4313      	orrs	r3, r2
 800355c:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003562:	2b00      	cmp	r3, #0
 8003564:	d101      	bne.n	800356a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8003566:	2301      	movs	r3, #1
 8003568:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003572:	2b00      	cmp	r3, #0
 8003574:	d017      	beq.n	80035a6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003576:	4b5d      	ldr	r3, [pc, #372]	@ (80036ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003578:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800357c:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003584:	4959      	ldr	r1, [pc, #356]	@ (80036ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003586:	4313      	orrs	r3, r2
 8003588:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003590:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003594:	d101      	bne.n	800359a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8003596:	2301      	movs	r3, #1
 8003598:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d101      	bne.n	80035a6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80035a2:	2301      	movs	r3, #1
 80035a4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d017      	beq.n	80035e2 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80035b2:	4b4e      	ldr	r3, [pc, #312]	@ (80036ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80035b4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80035b8:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035c0:	494a      	ldr	r1, [pc, #296]	@ (80036ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80035c2:	4313      	orrs	r3, r2
 80035c4:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035cc:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80035d0:	d101      	bne.n	80035d6 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80035d2:	2301      	movs	r3, #1
 80035d4:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d101      	bne.n	80035e2 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80035de:	2301      	movs	r3, #1
 80035e0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d001      	beq.n	80035f2 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80035ee:	2301      	movs	r3, #1
 80035f0:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	f003 0320 	and.w	r3, r3, #32
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	f000 808b 	beq.w	8003716 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003600:	4b3a      	ldr	r3, [pc, #232]	@ (80036ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003602:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003604:	4a39      	ldr	r2, [pc, #228]	@ (80036ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003606:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800360a:	6413      	str	r3, [r2, #64]	@ 0x40
 800360c:	4b37      	ldr	r3, [pc, #220]	@ (80036ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800360e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003610:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003614:	60bb      	str	r3, [r7, #8]
 8003616:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003618:	4b35      	ldr	r3, [pc, #212]	@ (80036f0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	4a34      	ldr	r2, [pc, #208]	@ (80036f0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800361e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003622:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003624:	f7fe ff0e 	bl	8002444 <HAL_GetTick>
 8003628:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800362a:	e008      	b.n	800363e <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800362c:	f7fe ff0a 	bl	8002444 <HAL_GetTick>
 8003630:	4602      	mov	r2, r0
 8003632:	697b      	ldr	r3, [r7, #20]
 8003634:	1ad3      	subs	r3, r2, r3
 8003636:	2b64      	cmp	r3, #100	@ 0x64
 8003638:	d901      	bls.n	800363e <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800363a:	2303      	movs	r3, #3
 800363c:	e38f      	b.n	8003d5e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800363e:	4b2c      	ldr	r3, [pc, #176]	@ (80036f0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003646:	2b00      	cmp	r3, #0
 8003648:	d0f0      	beq.n	800362c <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800364a:	4b28      	ldr	r3, [pc, #160]	@ (80036ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800364c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800364e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003652:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003654:	693b      	ldr	r3, [r7, #16]
 8003656:	2b00      	cmp	r3, #0
 8003658:	d035      	beq.n	80036c6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800365e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003662:	693a      	ldr	r2, [r7, #16]
 8003664:	429a      	cmp	r2, r3
 8003666:	d02e      	beq.n	80036c6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003668:	4b20      	ldr	r3, [pc, #128]	@ (80036ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800366a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800366c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003670:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003672:	4b1e      	ldr	r3, [pc, #120]	@ (80036ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003674:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003676:	4a1d      	ldr	r2, [pc, #116]	@ (80036ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003678:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800367c:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800367e:	4b1b      	ldr	r3, [pc, #108]	@ (80036ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003680:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003682:	4a1a      	ldr	r2, [pc, #104]	@ (80036ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003684:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003688:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800368a:	4a18      	ldr	r2, [pc, #96]	@ (80036ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800368c:	693b      	ldr	r3, [r7, #16]
 800368e:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003690:	4b16      	ldr	r3, [pc, #88]	@ (80036ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003692:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003694:	f003 0301 	and.w	r3, r3, #1
 8003698:	2b01      	cmp	r3, #1
 800369a:	d114      	bne.n	80036c6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800369c:	f7fe fed2 	bl	8002444 <HAL_GetTick>
 80036a0:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80036a2:	e00a      	b.n	80036ba <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80036a4:	f7fe fece 	bl	8002444 <HAL_GetTick>
 80036a8:	4602      	mov	r2, r0
 80036aa:	697b      	ldr	r3, [r7, #20]
 80036ac:	1ad3      	subs	r3, r2, r3
 80036ae:	f241 3288 	movw	r2, #5000	@ 0x1388
 80036b2:	4293      	cmp	r3, r2
 80036b4:	d901      	bls.n	80036ba <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80036b6:	2303      	movs	r3, #3
 80036b8:	e351      	b.n	8003d5e <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80036ba:	4b0c      	ldr	r3, [pc, #48]	@ (80036ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80036bc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80036be:	f003 0302 	and.w	r3, r3, #2
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d0ee      	beq.n	80036a4 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036ca:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80036ce:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80036d2:	d111      	bne.n	80036f8 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80036d4:	4b05      	ldr	r3, [pc, #20]	@ (80036ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80036d6:	689b      	ldr	r3, [r3, #8]
 80036d8:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80036e0:	4b04      	ldr	r3, [pc, #16]	@ (80036f4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80036e2:	400b      	ands	r3, r1
 80036e4:	4901      	ldr	r1, [pc, #4]	@ (80036ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80036e6:	4313      	orrs	r3, r2
 80036e8:	608b      	str	r3, [r1, #8]
 80036ea:	e00b      	b.n	8003704 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80036ec:	40023800 	.word	0x40023800
 80036f0:	40007000 	.word	0x40007000
 80036f4:	0ffffcff 	.word	0x0ffffcff
 80036f8:	4bac      	ldr	r3, [pc, #688]	@ (80039ac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80036fa:	689b      	ldr	r3, [r3, #8]
 80036fc:	4aab      	ldr	r2, [pc, #684]	@ (80039ac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80036fe:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8003702:	6093      	str	r3, [r2, #8]
 8003704:	4ba9      	ldr	r3, [pc, #676]	@ (80039ac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003706:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800370c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003710:	49a6      	ldr	r1, [pc, #664]	@ (80039ac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003712:	4313      	orrs	r3, r2
 8003714:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	f003 0310 	and.w	r3, r3, #16
 800371e:	2b00      	cmp	r3, #0
 8003720:	d010      	beq.n	8003744 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003722:	4ba2      	ldr	r3, [pc, #648]	@ (80039ac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003724:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003728:	4aa0      	ldr	r2, [pc, #640]	@ (80039ac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800372a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800372e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8003732:	4b9e      	ldr	r3, [pc, #632]	@ (80039ac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003734:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800373c:	499b      	ldr	r1, [pc, #620]	@ (80039ac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800373e:	4313      	orrs	r3, r2
 8003740:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800374c:	2b00      	cmp	r3, #0
 800374e:	d00a      	beq.n	8003766 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003750:	4b96      	ldr	r3, [pc, #600]	@ (80039ac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003752:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003756:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800375e:	4993      	ldr	r1, [pc, #588]	@ (80039ac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003760:	4313      	orrs	r3, r2
 8003762:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800376e:	2b00      	cmp	r3, #0
 8003770:	d00a      	beq.n	8003788 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003772:	4b8e      	ldr	r3, [pc, #568]	@ (80039ac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003774:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003778:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003780:	498a      	ldr	r1, [pc, #552]	@ (80039ac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003782:	4313      	orrs	r3, r2
 8003784:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003790:	2b00      	cmp	r3, #0
 8003792:	d00a      	beq.n	80037aa <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003794:	4b85      	ldr	r3, [pc, #532]	@ (80039ac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003796:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800379a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80037a2:	4982      	ldr	r1, [pc, #520]	@ (80039ac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80037a4:	4313      	orrs	r3, r2
 80037a6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d00a      	beq.n	80037cc <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80037b6:	4b7d      	ldr	r3, [pc, #500]	@ (80039ac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80037b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80037bc:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80037c4:	4979      	ldr	r1, [pc, #484]	@ (80039ac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80037c6:	4313      	orrs	r3, r2
 80037c8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d00a      	beq.n	80037ee <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80037d8:	4b74      	ldr	r3, [pc, #464]	@ (80039ac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80037da:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80037de:	f023 0203 	bic.w	r2, r3, #3
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80037e6:	4971      	ldr	r1, [pc, #452]	@ (80039ac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80037e8:	4313      	orrs	r3, r2
 80037ea:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d00a      	beq.n	8003810 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80037fa:	4b6c      	ldr	r3, [pc, #432]	@ (80039ac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80037fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003800:	f023 020c 	bic.w	r2, r3, #12
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003808:	4968      	ldr	r1, [pc, #416]	@ (80039ac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800380a:	4313      	orrs	r3, r2
 800380c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003818:	2b00      	cmp	r3, #0
 800381a:	d00a      	beq.n	8003832 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800381c:	4b63      	ldr	r3, [pc, #396]	@ (80039ac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800381e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003822:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800382a:	4960      	ldr	r1, [pc, #384]	@ (80039ac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800382c:	4313      	orrs	r3, r2
 800382e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800383a:	2b00      	cmp	r3, #0
 800383c:	d00a      	beq.n	8003854 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800383e:	4b5b      	ldr	r3, [pc, #364]	@ (80039ac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003840:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003844:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800384c:	4957      	ldr	r1, [pc, #348]	@ (80039ac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800384e:	4313      	orrs	r3, r2
 8003850:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800385c:	2b00      	cmp	r3, #0
 800385e:	d00a      	beq.n	8003876 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003860:	4b52      	ldr	r3, [pc, #328]	@ (80039ac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003862:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003866:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800386e:	494f      	ldr	r1, [pc, #316]	@ (80039ac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003870:	4313      	orrs	r3, r2
 8003872:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800387e:	2b00      	cmp	r3, #0
 8003880:	d00a      	beq.n	8003898 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8003882:	4b4a      	ldr	r3, [pc, #296]	@ (80039ac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003884:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003888:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003890:	4946      	ldr	r1, [pc, #280]	@ (80039ac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003892:	4313      	orrs	r3, r2
 8003894:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d00a      	beq.n	80038ba <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80038a4:	4b41      	ldr	r3, [pc, #260]	@ (80039ac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80038a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80038aa:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80038b2:	493e      	ldr	r1, [pc, #248]	@ (80039ac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80038b4:	4313      	orrs	r3, r2
 80038b6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d00a      	beq.n	80038dc <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80038c6:	4b39      	ldr	r3, [pc, #228]	@ (80039ac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80038c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80038cc:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80038d4:	4935      	ldr	r1, [pc, #212]	@ (80039ac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80038d6:	4313      	orrs	r3, r2
 80038d8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d00a      	beq.n	80038fe <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80038e8:	4b30      	ldr	r3, [pc, #192]	@ (80039ac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80038ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80038ee:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80038f6:	492d      	ldr	r1, [pc, #180]	@ (80039ac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80038f8:	4313      	orrs	r3, r2
 80038fa:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003906:	2b00      	cmp	r3, #0
 8003908:	d011      	beq.n	800392e <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800390a:	4b28      	ldr	r3, [pc, #160]	@ (80039ac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800390c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003910:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003918:	4924      	ldr	r1, [pc, #144]	@ (80039ac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800391a:	4313      	orrs	r3, r2
 800391c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003924:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003928:	d101      	bne.n	800392e <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800392a:	2301      	movs	r3, #1
 800392c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	f003 0308 	and.w	r3, r3, #8
 8003936:	2b00      	cmp	r3, #0
 8003938:	d001      	beq.n	800393e <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800393a:	2301      	movs	r3, #1
 800393c:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003946:	2b00      	cmp	r3, #0
 8003948:	d00a      	beq.n	8003960 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800394a:	4b18      	ldr	r3, [pc, #96]	@ (80039ac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800394c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003950:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003958:	4914      	ldr	r1, [pc, #80]	@ (80039ac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800395a:	4313      	orrs	r3, r2
 800395c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003968:	2b00      	cmp	r3, #0
 800396a:	d00b      	beq.n	8003984 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800396c:	4b0f      	ldr	r3, [pc, #60]	@ (80039ac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800396e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003972:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800397c:	490b      	ldr	r1, [pc, #44]	@ (80039ac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800397e:	4313      	orrs	r3, r2
 8003980:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800398c:	2b00      	cmp	r3, #0
 800398e:	d00f      	beq.n	80039b0 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8003990:	4b06      	ldr	r3, [pc, #24]	@ (80039ac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003992:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003996:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80039a0:	4902      	ldr	r1, [pc, #8]	@ (80039ac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80039a2:	4313      	orrs	r3, r2
 80039a4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80039a8:	e002      	b.n	80039b0 <HAL_RCCEx_PeriphCLKConfig+0x494>
 80039aa:	bf00      	nop
 80039ac:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d00b      	beq.n	80039d4 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80039bc:	4b8a      	ldr	r3, [pc, #552]	@ (8003be8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80039be:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80039c2:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80039cc:	4986      	ldr	r1, [pc, #536]	@ (8003be8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80039ce:	4313      	orrs	r3, r2
 80039d0:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d00b      	beq.n	80039f8 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80039e0:	4b81      	ldr	r3, [pc, #516]	@ (8003be8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80039e2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80039e6:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80039f0:	497d      	ldr	r1, [pc, #500]	@ (8003be8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80039f2:	4313      	orrs	r3, r2
 80039f4:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80039f8:	69fb      	ldr	r3, [r7, #28]
 80039fa:	2b01      	cmp	r3, #1
 80039fc:	d006      	beq.n	8003a0c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	f000 80d6 	beq.w	8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003a0c:	4b76      	ldr	r3, [pc, #472]	@ (8003be8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	4a75      	ldr	r2, [pc, #468]	@ (8003be8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003a12:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8003a16:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003a18:	f7fe fd14 	bl	8002444 <HAL_GetTick>
 8003a1c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003a1e:	e008      	b.n	8003a32 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003a20:	f7fe fd10 	bl	8002444 <HAL_GetTick>
 8003a24:	4602      	mov	r2, r0
 8003a26:	697b      	ldr	r3, [r7, #20]
 8003a28:	1ad3      	subs	r3, r2, r3
 8003a2a:	2b64      	cmp	r3, #100	@ 0x64
 8003a2c:	d901      	bls.n	8003a32 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003a2e:	2303      	movs	r3, #3
 8003a30:	e195      	b.n	8003d5e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003a32:	4b6d      	ldr	r3, [pc, #436]	@ (8003be8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d1f0      	bne.n	8003a20 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	f003 0301 	and.w	r3, r3, #1
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d021      	beq.n	8003a8e <HAL_RCCEx_PeriphCLKConfig+0x572>
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d11d      	bne.n	8003a8e <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003a52:	4b65      	ldr	r3, [pc, #404]	@ (8003be8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003a54:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003a58:	0c1b      	lsrs	r3, r3, #16
 8003a5a:	f003 0303 	and.w	r3, r3, #3
 8003a5e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003a60:	4b61      	ldr	r3, [pc, #388]	@ (8003be8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003a62:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003a66:	0e1b      	lsrs	r3, r3, #24
 8003a68:	f003 030f 	and.w	r3, r3, #15
 8003a6c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	685b      	ldr	r3, [r3, #4]
 8003a72:	019a      	lsls	r2, r3, #6
 8003a74:	693b      	ldr	r3, [r7, #16]
 8003a76:	041b      	lsls	r3, r3, #16
 8003a78:	431a      	orrs	r2, r3
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	061b      	lsls	r3, r3, #24
 8003a7e:	431a      	orrs	r2, r3
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	689b      	ldr	r3, [r3, #8]
 8003a84:	071b      	lsls	r3, r3, #28
 8003a86:	4958      	ldr	r1, [pc, #352]	@ (8003be8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003a88:	4313      	orrs	r3, r2
 8003a8a:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d004      	beq.n	8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x588>
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003a9e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003aa2:	d00a      	beq.n	8003aba <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d02e      	beq.n	8003b0e <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ab4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003ab8:	d129      	bne.n	8003b0e <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003aba:	4b4b      	ldr	r3, [pc, #300]	@ (8003be8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003abc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003ac0:	0c1b      	lsrs	r3, r3, #16
 8003ac2:	f003 0303 	and.w	r3, r3, #3
 8003ac6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003ac8:	4b47      	ldr	r3, [pc, #284]	@ (8003be8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003aca:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003ace:	0f1b      	lsrs	r3, r3, #28
 8003ad0:	f003 0307 	and.w	r3, r3, #7
 8003ad4:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	685b      	ldr	r3, [r3, #4]
 8003ada:	019a      	lsls	r2, r3, #6
 8003adc:	693b      	ldr	r3, [r7, #16]
 8003ade:	041b      	lsls	r3, r3, #16
 8003ae0:	431a      	orrs	r2, r3
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	68db      	ldr	r3, [r3, #12]
 8003ae6:	061b      	lsls	r3, r3, #24
 8003ae8:	431a      	orrs	r2, r3
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	071b      	lsls	r3, r3, #28
 8003aee:	493e      	ldr	r1, [pc, #248]	@ (8003be8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003af0:	4313      	orrs	r3, r2
 8003af2:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003af6:	4b3c      	ldr	r3, [pc, #240]	@ (8003be8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003af8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003afc:	f023 021f 	bic.w	r2, r3, #31
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b04:	3b01      	subs	r3, #1
 8003b06:	4938      	ldr	r1, [pc, #224]	@ (8003be8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003b08:	4313      	orrs	r3, r2
 8003b0a:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d01d      	beq.n	8003b56 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003b1a:	4b33      	ldr	r3, [pc, #204]	@ (8003be8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003b1c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003b20:	0e1b      	lsrs	r3, r3, #24
 8003b22:	f003 030f 	and.w	r3, r3, #15
 8003b26:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003b28:	4b2f      	ldr	r3, [pc, #188]	@ (8003be8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003b2a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003b2e:	0f1b      	lsrs	r3, r3, #28
 8003b30:	f003 0307 	and.w	r3, r3, #7
 8003b34:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	685b      	ldr	r3, [r3, #4]
 8003b3a:	019a      	lsls	r2, r3, #6
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	691b      	ldr	r3, [r3, #16]
 8003b40:	041b      	lsls	r3, r3, #16
 8003b42:	431a      	orrs	r2, r3
 8003b44:	693b      	ldr	r3, [r7, #16]
 8003b46:	061b      	lsls	r3, r3, #24
 8003b48:	431a      	orrs	r2, r3
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	071b      	lsls	r3, r3, #28
 8003b4e:	4926      	ldr	r1, [pc, #152]	@ (8003be8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003b50:	4313      	orrs	r3, r2
 8003b52:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d011      	beq.n	8003b86 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	685b      	ldr	r3, [r3, #4]
 8003b66:	019a      	lsls	r2, r3, #6
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	691b      	ldr	r3, [r3, #16]
 8003b6c:	041b      	lsls	r3, r3, #16
 8003b6e:	431a      	orrs	r2, r3
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	68db      	ldr	r3, [r3, #12]
 8003b74:	061b      	lsls	r3, r3, #24
 8003b76:	431a      	orrs	r2, r3
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	689b      	ldr	r3, [r3, #8]
 8003b7c:	071b      	lsls	r3, r3, #28
 8003b7e:	491a      	ldr	r1, [pc, #104]	@ (8003be8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003b80:	4313      	orrs	r3, r2
 8003b82:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003b86:	4b18      	ldr	r3, [pc, #96]	@ (8003be8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	4a17      	ldr	r2, [pc, #92]	@ (8003be8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003b8c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003b90:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003b92:	f7fe fc57 	bl	8002444 <HAL_GetTick>
 8003b96:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003b98:	e008      	b.n	8003bac <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003b9a:	f7fe fc53 	bl	8002444 <HAL_GetTick>
 8003b9e:	4602      	mov	r2, r0
 8003ba0:	697b      	ldr	r3, [r7, #20]
 8003ba2:	1ad3      	subs	r3, r2, r3
 8003ba4:	2b64      	cmp	r3, #100	@ 0x64
 8003ba6:	d901      	bls.n	8003bac <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003ba8:	2303      	movs	r3, #3
 8003baa:	e0d8      	b.n	8003d5e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003bac:	4b0e      	ldr	r3, [pc, #56]	@ (8003be8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d0f0      	beq.n	8003b9a <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8003bb8:	69bb      	ldr	r3, [r7, #24]
 8003bba:	2b01      	cmp	r3, #1
 8003bbc:	f040 80ce 	bne.w	8003d5c <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8003bc0:	4b09      	ldr	r3, [pc, #36]	@ (8003be8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	4a08      	ldr	r2, [pc, #32]	@ (8003be8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003bc6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003bca:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003bcc:	f7fe fc3a 	bl	8002444 <HAL_GetTick>
 8003bd0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003bd2:	e00b      	b.n	8003bec <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003bd4:	f7fe fc36 	bl	8002444 <HAL_GetTick>
 8003bd8:	4602      	mov	r2, r0
 8003bda:	697b      	ldr	r3, [r7, #20]
 8003bdc:	1ad3      	subs	r3, r2, r3
 8003bde:	2b64      	cmp	r3, #100	@ 0x64
 8003be0:	d904      	bls.n	8003bec <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003be2:	2303      	movs	r3, #3
 8003be4:	e0bb      	b.n	8003d5e <HAL_RCCEx_PeriphCLKConfig+0x842>
 8003be6:	bf00      	nop
 8003be8:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003bec:	4b5e      	ldr	r3, [pc, #376]	@ (8003d68 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003bf4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003bf8:	d0ec      	beq.n	8003bd4 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d003      	beq.n	8003c0e <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d009      	beq.n	8003c22 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d02e      	beq.n	8003c78 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d12a      	bne.n	8003c78 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003c22:	4b51      	ldr	r3, [pc, #324]	@ (8003d68 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003c24:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c28:	0c1b      	lsrs	r3, r3, #16
 8003c2a:	f003 0303 	and.w	r3, r3, #3
 8003c2e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003c30:	4b4d      	ldr	r3, [pc, #308]	@ (8003d68 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003c32:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c36:	0f1b      	lsrs	r3, r3, #28
 8003c38:	f003 0307 	and.w	r3, r3, #7
 8003c3c:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	695b      	ldr	r3, [r3, #20]
 8003c42:	019a      	lsls	r2, r3, #6
 8003c44:	693b      	ldr	r3, [r7, #16]
 8003c46:	041b      	lsls	r3, r3, #16
 8003c48:	431a      	orrs	r2, r3
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	699b      	ldr	r3, [r3, #24]
 8003c4e:	061b      	lsls	r3, r3, #24
 8003c50:	431a      	orrs	r2, r3
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	071b      	lsls	r3, r3, #28
 8003c56:	4944      	ldr	r1, [pc, #272]	@ (8003d68 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003c58:	4313      	orrs	r3, r2
 8003c5a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8003c5e:	4b42      	ldr	r3, [pc, #264]	@ (8003d68 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003c60:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003c64:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c6c:	3b01      	subs	r3, #1
 8003c6e:	021b      	lsls	r3, r3, #8
 8003c70:	493d      	ldr	r1, [pc, #244]	@ (8003d68 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003c72:	4313      	orrs	r3, r2
 8003c74:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d022      	beq.n	8003cca <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003c88:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003c8c:	d11d      	bne.n	8003cca <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003c8e:	4b36      	ldr	r3, [pc, #216]	@ (8003d68 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003c90:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c94:	0e1b      	lsrs	r3, r3, #24
 8003c96:	f003 030f 	and.w	r3, r3, #15
 8003c9a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003c9c:	4b32      	ldr	r3, [pc, #200]	@ (8003d68 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003c9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ca2:	0f1b      	lsrs	r3, r3, #28
 8003ca4:	f003 0307 	and.w	r3, r3, #7
 8003ca8:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	695b      	ldr	r3, [r3, #20]
 8003cae:	019a      	lsls	r2, r3, #6
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	6a1b      	ldr	r3, [r3, #32]
 8003cb4:	041b      	lsls	r3, r3, #16
 8003cb6:	431a      	orrs	r2, r3
 8003cb8:	693b      	ldr	r3, [r7, #16]
 8003cba:	061b      	lsls	r3, r3, #24
 8003cbc:	431a      	orrs	r2, r3
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	071b      	lsls	r3, r3, #28
 8003cc2:	4929      	ldr	r1, [pc, #164]	@ (8003d68 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003cc4:	4313      	orrs	r3, r2
 8003cc6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	f003 0308 	and.w	r3, r3, #8
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d028      	beq.n	8003d28 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003cd6:	4b24      	ldr	r3, [pc, #144]	@ (8003d68 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003cd8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003cdc:	0e1b      	lsrs	r3, r3, #24
 8003cde:	f003 030f 	and.w	r3, r3, #15
 8003ce2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003ce4:	4b20      	ldr	r3, [pc, #128]	@ (8003d68 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003ce6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003cea:	0c1b      	lsrs	r3, r3, #16
 8003cec:	f003 0303 	and.w	r3, r3, #3
 8003cf0:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	695b      	ldr	r3, [r3, #20]
 8003cf6:	019a      	lsls	r2, r3, #6
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	041b      	lsls	r3, r3, #16
 8003cfc:	431a      	orrs	r2, r3
 8003cfe:	693b      	ldr	r3, [r7, #16]
 8003d00:	061b      	lsls	r3, r3, #24
 8003d02:	431a      	orrs	r2, r3
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	69db      	ldr	r3, [r3, #28]
 8003d08:	071b      	lsls	r3, r3, #28
 8003d0a:	4917      	ldr	r1, [pc, #92]	@ (8003d68 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003d0c:	4313      	orrs	r3, r2
 8003d0e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8003d12:	4b15      	ldr	r3, [pc, #84]	@ (8003d68 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003d14:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003d18:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d20:	4911      	ldr	r1, [pc, #68]	@ (8003d68 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003d22:	4313      	orrs	r3, r2
 8003d24:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003d28:	4b0f      	ldr	r3, [pc, #60]	@ (8003d68 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	4a0e      	ldr	r2, [pc, #56]	@ (8003d68 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003d2e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003d32:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003d34:	f7fe fb86 	bl	8002444 <HAL_GetTick>
 8003d38:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003d3a:	e008      	b.n	8003d4e <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003d3c:	f7fe fb82 	bl	8002444 <HAL_GetTick>
 8003d40:	4602      	mov	r2, r0
 8003d42:	697b      	ldr	r3, [r7, #20]
 8003d44:	1ad3      	subs	r3, r2, r3
 8003d46:	2b64      	cmp	r3, #100	@ 0x64
 8003d48:	d901      	bls.n	8003d4e <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003d4a:	2303      	movs	r3, #3
 8003d4c:	e007      	b.n	8003d5e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003d4e:	4b06      	ldr	r3, [pc, #24]	@ (8003d68 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003d56:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003d5a:	d1ef      	bne.n	8003d3c <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8003d5c:	2300      	movs	r3, #0
}
 8003d5e:	4618      	mov	r0, r3
 8003d60:	3720      	adds	r7, #32
 8003d62:	46bd      	mov	sp, r7
 8003d64:	bd80      	pop	{r7, pc}
 8003d66:	bf00      	nop
 8003d68:	40023800 	.word	0x40023800

08003d6c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003d6c:	b580      	push	{r7, lr}
 8003d6e:	b084      	sub	sp, #16
 8003d70:	af00      	add	r7, sp, #0
 8003d72:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d101      	bne.n	8003d7e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003d7a:	2301      	movs	r3, #1
 8003d7c:	e09d      	b.n	8003eba <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d108      	bne.n	8003d98 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	685b      	ldr	r3, [r3, #4]
 8003d8a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003d8e:	d009      	beq.n	8003da4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	2200      	movs	r2, #0
 8003d94:	61da      	str	r2, [r3, #28]
 8003d96:	e005      	b.n	8003da4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	2200      	movs	r2, #0
 8003d9c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	2200      	movs	r2, #0
 8003da2:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	2200      	movs	r2, #0
 8003da8:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8003db0:	b2db      	uxtb	r3, r3
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d106      	bne.n	8003dc4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	2200      	movs	r2, #0
 8003dba:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003dbe:	6878      	ldr	r0, [r7, #4]
 8003dc0:	f7fd fff0 	bl	8001da4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	2202      	movs	r2, #2
 8003dc8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	681a      	ldr	r2, [r3, #0]
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003dda:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	68db      	ldr	r3, [r3, #12]
 8003de0:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003de4:	d902      	bls.n	8003dec <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003de6:	2300      	movs	r3, #0
 8003de8:	60fb      	str	r3, [r7, #12]
 8003dea:	e002      	b.n	8003df2 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003dec:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003df0:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	68db      	ldr	r3, [r3, #12]
 8003df6:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8003dfa:	d007      	beq.n	8003e0c <HAL_SPI_Init+0xa0>
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	68db      	ldr	r3, [r3, #12]
 8003e00:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003e04:	d002      	beq.n	8003e0c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	2200      	movs	r2, #0
 8003e0a:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	685b      	ldr	r3, [r3, #4]
 8003e10:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	689b      	ldr	r3, [r3, #8]
 8003e18:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8003e1c:	431a      	orrs	r2, r3
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	691b      	ldr	r3, [r3, #16]
 8003e22:	f003 0302 	and.w	r3, r3, #2
 8003e26:	431a      	orrs	r2, r3
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	695b      	ldr	r3, [r3, #20]
 8003e2c:	f003 0301 	and.w	r3, r3, #1
 8003e30:	431a      	orrs	r2, r3
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	699b      	ldr	r3, [r3, #24]
 8003e36:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003e3a:	431a      	orrs	r2, r3
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	69db      	ldr	r3, [r3, #28]
 8003e40:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003e44:	431a      	orrs	r2, r3
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	6a1b      	ldr	r3, [r3, #32]
 8003e4a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003e4e:	ea42 0103 	orr.w	r1, r2, r3
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e56:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	430a      	orrs	r2, r1
 8003e60:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	699b      	ldr	r3, [r3, #24]
 8003e66:	0c1b      	lsrs	r3, r3, #16
 8003e68:	f003 0204 	and.w	r2, r3, #4
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e70:	f003 0310 	and.w	r3, r3, #16
 8003e74:	431a      	orrs	r2, r3
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003e7a:	f003 0308 	and.w	r3, r3, #8
 8003e7e:	431a      	orrs	r2, r3
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	68db      	ldr	r3, [r3, #12]
 8003e84:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8003e88:	ea42 0103 	orr.w	r1, r2, r3
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	430a      	orrs	r2, r1
 8003e98:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	69da      	ldr	r2, [r3, #28]
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003ea8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	2200      	movs	r2, #0
 8003eae:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	2201      	movs	r2, #1
 8003eb4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8003eb8:	2300      	movs	r3, #0
}
 8003eba:	4618      	mov	r0, r3
 8003ebc:	3710      	adds	r7, #16
 8003ebe:	46bd      	mov	sp, r7
 8003ec0:	bd80      	pop	{r7, pc}

08003ec2 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003ec2:	b580      	push	{r7, lr}
 8003ec4:	b088      	sub	sp, #32
 8003ec6:	af00      	add	r7, sp, #0
 8003ec8:	60f8      	str	r0, [r7, #12]
 8003eca:	60b9      	str	r1, [r7, #8]
 8003ecc:	603b      	str	r3, [r7, #0]
 8003ece:	4613      	mov	r3, r2
 8003ed0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003ed2:	2300      	movs	r3, #0
 8003ed4:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8003edc:	2b01      	cmp	r3, #1
 8003ede:	d101      	bne.n	8003ee4 <HAL_SPI_Transmit+0x22>
 8003ee0:	2302      	movs	r3, #2
 8003ee2:	e158      	b.n	8004196 <HAL_SPI_Transmit+0x2d4>
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	2201      	movs	r2, #1
 8003ee8:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003eec:	f7fe faaa 	bl	8002444 <HAL_GetTick>
 8003ef0:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8003ef2:	88fb      	ldrh	r3, [r7, #6]
 8003ef4:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8003efc:	b2db      	uxtb	r3, r3
 8003efe:	2b01      	cmp	r3, #1
 8003f00:	d002      	beq.n	8003f08 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8003f02:	2302      	movs	r3, #2
 8003f04:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003f06:	e13d      	b.n	8004184 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8003f08:	68bb      	ldr	r3, [r7, #8]
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d002      	beq.n	8003f14 <HAL_SPI_Transmit+0x52>
 8003f0e:	88fb      	ldrh	r3, [r7, #6]
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d102      	bne.n	8003f1a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003f14:	2301      	movs	r3, #1
 8003f16:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003f18:	e134      	b.n	8004184 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	2203      	movs	r2, #3
 8003f1e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	2200      	movs	r2, #0
 8003f26:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	68ba      	ldr	r2, [r7, #8]
 8003f2c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	88fa      	ldrh	r2, [r7, #6]
 8003f32:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	88fa      	ldrh	r2, [r7, #6]
 8003f38:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	2200      	movs	r2, #0
 8003f3e:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	2200      	movs	r2, #0
 8003f44:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	2200      	movs	r2, #0
 8003f4c:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	2200      	movs	r2, #0
 8003f54:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	2200      	movs	r2, #0
 8003f5a:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	689b      	ldr	r3, [r3, #8]
 8003f60:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003f64:	d10f      	bne.n	8003f86 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	681a      	ldr	r2, [r3, #0]
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003f74:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	681a      	ldr	r2, [r3, #0]
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003f84:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003f90:	2b40      	cmp	r3, #64	@ 0x40
 8003f92:	d007      	beq.n	8003fa4 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	681a      	ldr	r2, [r3, #0]
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003fa2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	68db      	ldr	r3, [r3, #12]
 8003fa8:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003fac:	d94b      	bls.n	8004046 <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	685b      	ldr	r3, [r3, #4]
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d002      	beq.n	8003fbc <HAL_SPI_Transmit+0xfa>
 8003fb6:	8afb      	ldrh	r3, [r7, #22]
 8003fb8:	2b01      	cmp	r3, #1
 8003fba:	d13e      	bne.n	800403a <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003fc0:	881a      	ldrh	r2, [r3, #0]
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003fcc:	1c9a      	adds	r2, r3, #2
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003fd6:	b29b      	uxth	r3, r3
 8003fd8:	3b01      	subs	r3, #1
 8003fda:	b29a      	uxth	r2, r3
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003fe0:	e02b      	b.n	800403a <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	689b      	ldr	r3, [r3, #8]
 8003fe8:	f003 0302 	and.w	r3, r3, #2
 8003fec:	2b02      	cmp	r3, #2
 8003fee:	d112      	bne.n	8004016 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ff4:	881a      	ldrh	r2, [r3, #0]
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004000:	1c9a      	adds	r2, r3, #2
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800400a:	b29b      	uxth	r3, r3
 800400c:	3b01      	subs	r3, #1
 800400e:	b29a      	uxth	r2, r3
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004014:	e011      	b.n	800403a <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004016:	f7fe fa15 	bl	8002444 <HAL_GetTick>
 800401a:	4602      	mov	r2, r0
 800401c:	69bb      	ldr	r3, [r7, #24]
 800401e:	1ad3      	subs	r3, r2, r3
 8004020:	683a      	ldr	r2, [r7, #0]
 8004022:	429a      	cmp	r2, r3
 8004024:	d803      	bhi.n	800402e <HAL_SPI_Transmit+0x16c>
 8004026:	683b      	ldr	r3, [r7, #0]
 8004028:	f1b3 3fff 	cmp.w	r3, #4294967295
 800402c:	d102      	bne.n	8004034 <HAL_SPI_Transmit+0x172>
 800402e:	683b      	ldr	r3, [r7, #0]
 8004030:	2b00      	cmp	r3, #0
 8004032:	d102      	bne.n	800403a <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8004034:	2303      	movs	r3, #3
 8004036:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004038:	e0a4      	b.n	8004184 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800403e:	b29b      	uxth	r3, r3
 8004040:	2b00      	cmp	r3, #0
 8004042:	d1ce      	bne.n	8003fe2 <HAL_SPI_Transmit+0x120>
 8004044:	e07c      	b.n	8004140 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	685b      	ldr	r3, [r3, #4]
 800404a:	2b00      	cmp	r3, #0
 800404c:	d002      	beq.n	8004054 <HAL_SPI_Transmit+0x192>
 800404e:	8afb      	ldrh	r3, [r7, #22]
 8004050:	2b01      	cmp	r3, #1
 8004052:	d170      	bne.n	8004136 <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004058:	b29b      	uxth	r3, r3
 800405a:	2b01      	cmp	r3, #1
 800405c:	d912      	bls.n	8004084 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004062:	881a      	ldrh	r2, [r3, #0]
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800406e:	1c9a      	adds	r2, r3, #2
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004078:	b29b      	uxth	r3, r3
 800407a:	3b02      	subs	r3, #2
 800407c:	b29a      	uxth	r2, r3
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004082:	e058      	b.n	8004136 <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	330c      	adds	r3, #12
 800408e:	7812      	ldrb	r2, [r2, #0]
 8004090:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004096:	1c5a      	adds	r2, r3, #1
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80040a0:	b29b      	uxth	r3, r3
 80040a2:	3b01      	subs	r3, #1
 80040a4:	b29a      	uxth	r2, r3
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 80040aa:	e044      	b.n	8004136 <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	689b      	ldr	r3, [r3, #8]
 80040b2:	f003 0302 	and.w	r3, r3, #2
 80040b6:	2b02      	cmp	r3, #2
 80040b8:	d12b      	bne.n	8004112 <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80040be:	b29b      	uxth	r3, r3
 80040c0:	2b01      	cmp	r3, #1
 80040c2:	d912      	bls.n	80040ea <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80040c8:	881a      	ldrh	r2, [r3, #0]
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80040d4:	1c9a      	adds	r2, r3, #2
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80040de:	b29b      	uxth	r3, r3
 80040e0:	3b02      	subs	r3, #2
 80040e2:	b29a      	uxth	r2, r3
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80040e8:	e025      	b.n	8004136 <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	330c      	adds	r3, #12
 80040f4:	7812      	ldrb	r2, [r2, #0]
 80040f6:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80040fc:	1c5a      	adds	r2, r3, #1
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004106:	b29b      	uxth	r3, r3
 8004108:	3b01      	subs	r3, #1
 800410a:	b29a      	uxth	r2, r3
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004110:	e011      	b.n	8004136 <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004112:	f7fe f997 	bl	8002444 <HAL_GetTick>
 8004116:	4602      	mov	r2, r0
 8004118:	69bb      	ldr	r3, [r7, #24]
 800411a:	1ad3      	subs	r3, r2, r3
 800411c:	683a      	ldr	r2, [r7, #0]
 800411e:	429a      	cmp	r2, r3
 8004120:	d803      	bhi.n	800412a <HAL_SPI_Transmit+0x268>
 8004122:	683b      	ldr	r3, [r7, #0]
 8004124:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004128:	d102      	bne.n	8004130 <HAL_SPI_Transmit+0x26e>
 800412a:	683b      	ldr	r3, [r7, #0]
 800412c:	2b00      	cmp	r3, #0
 800412e:	d102      	bne.n	8004136 <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8004130:	2303      	movs	r3, #3
 8004132:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004134:	e026      	b.n	8004184 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800413a:	b29b      	uxth	r3, r3
 800413c:	2b00      	cmp	r3, #0
 800413e:	d1b5      	bne.n	80040ac <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004140:	69ba      	ldr	r2, [r7, #24]
 8004142:	6839      	ldr	r1, [r7, #0]
 8004144:	68f8      	ldr	r0, [r7, #12]
 8004146:	f000 f949 	bl	80043dc <SPI_EndRxTxTransaction>
 800414a:	4603      	mov	r3, r0
 800414c:	2b00      	cmp	r3, #0
 800414e:	d002      	beq.n	8004156 <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	2220      	movs	r2, #32
 8004154:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	689b      	ldr	r3, [r3, #8]
 800415a:	2b00      	cmp	r3, #0
 800415c:	d10a      	bne.n	8004174 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800415e:	2300      	movs	r3, #0
 8004160:	613b      	str	r3, [r7, #16]
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	68db      	ldr	r3, [r3, #12]
 8004168:	613b      	str	r3, [r7, #16]
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	689b      	ldr	r3, [r3, #8]
 8004170:	613b      	str	r3, [r7, #16]
 8004172:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004178:	2b00      	cmp	r3, #0
 800417a:	d002      	beq.n	8004182 <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 800417c:	2301      	movs	r3, #1
 800417e:	77fb      	strb	r3, [r7, #31]
 8004180:	e000      	b.n	8004184 <HAL_SPI_Transmit+0x2c2>
  }

error:
 8004182:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	2201      	movs	r2, #1
 8004188:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	2200      	movs	r2, #0
 8004190:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 8004194:	7ffb      	ldrb	r3, [r7, #31]
}
 8004196:	4618      	mov	r0, r3
 8004198:	3720      	adds	r7, #32
 800419a:	46bd      	mov	sp, r7
 800419c:	bd80      	pop	{r7, pc}
	...

080041a0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80041a0:	b580      	push	{r7, lr}
 80041a2:	b088      	sub	sp, #32
 80041a4:	af00      	add	r7, sp, #0
 80041a6:	60f8      	str	r0, [r7, #12]
 80041a8:	60b9      	str	r1, [r7, #8]
 80041aa:	603b      	str	r3, [r7, #0]
 80041ac:	4613      	mov	r3, r2
 80041ae:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80041b0:	f7fe f948 	bl	8002444 <HAL_GetTick>
 80041b4:	4602      	mov	r2, r0
 80041b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80041b8:	1a9b      	subs	r3, r3, r2
 80041ba:	683a      	ldr	r2, [r7, #0]
 80041bc:	4413      	add	r3, r2
 80041be:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80041c0:	f7fe f940 	bl	8002444 <HAL_GetTick>
 80041c4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80041c6:	4b39      	ldr	r3, [pc, #228]	@ (80042ac <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	015b      	lsls	r3, r3, #5
 80041cc:	0d1b      	lsrs	r3, r3, #20
 80041ce:	69fa      	ldr	r2, [r7, #28]
 80041d0:	fb02 f303 	mul.w	r3, r2, r3
 80041d4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80041d6:	e054      	b.n	8004282 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80041d8:	683b      	ldr	r3, [r7, #0]
 80041da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041de:	d050      	beq.n	8004282 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80041e0:	f7fe f930 	bl	8002444 <HAL_GetTick>
 80041e4:	4602      	mov	r2, r0
 80041e6:	69bb      	ldr	r3, [r7, #24]
 80041e8:	1ad3      	subs	r3, r2, r3
 80041ea:	69fa      	ldr	r2, [r7, #28]
 80041ec:	429a      	cmp	r2, r3
 80041ee:	d902      	bls.n	80041f6 <SPI_WaitFlagStateUntilTimeout+0x56>
 80041f0:	69fb      	ldr	r3, [r7, #28]
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d13d      	bne.n	8004272 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	685a      	ldr	r2, [r3, #4]
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8004204:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	685b      	ldr	r3, [r3, #4]
 800420a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800420e:	d111      	bne.n	8004234 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	689b      	ldr	r3, [r3, #8]
 8004214:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004218:	d004      	beq.n	8004224 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	689b      	ldr	r3, [r3, #8]
 800421e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004222:	d107      	bne.n	8004234 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	681a      	ldr	r2, [r3, #0]
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004232:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004238:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800423c:	d10f      	bne.n	800425e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	681a      	ldr	r2, [r3, #0]
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800424c:	601a      	str	r2, [r3, #0]
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	681a      	ldr	r2, [r3, #0]
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800425c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	2201      	movs	r2, #1
 8004262:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	2200      	movs	r2, #0
 800426a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 800426e:	2303      	movs	r3, #3
 8004270:	e017      	b.n	80042a2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004272:	697b      	ldr	r3, [r7, #20]
 8004274:	2b00      	cmp	r3, #0
 8004276:	d101      	bne.n	800427c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004278:	2300      	movs	r3, #0
 800427a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800427c:	697b      	ldr	r3, [r7, #20]
 800427e:	3b01      	subs	r3, #1
 8004280:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	689a      	ldr	r2, [r3, #8]
 8004288:	68bb      	ldr	r3, [r7, #8]
 800428a:	4013      	ands	r3, r2
 800428c:	68ba      	ldr	r2, [r7, #8]
 800428e:	429a      	cmp	r2, r3
 8004290:	bf0c      	ite	eq
 8004292:	2301      	moveq	r3, #1
 8004294:	2300      	movne	r3, #0
 8004296:	b2db      	uxtb	r3, r3
 8004298:	461a      	mov	r2, r3
 800429a:	79fb      	ldrb	r3, [r7, #7]
 800429c:	429a      	cmp	r2, r3
 800429e:	d19b      	bne.n	80041d8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80042a0:	2300      	movs	r3, #0
}
 80042a2:	4618      	mov	r0, r3
 80042a4:	3720      	adds	r7, #32
 80042a6:	46bd      	mov	sp, r7
 80042a8:	bd80      	pop	{r7, pc}
 80042aa:	bf00      	nop
 80042ac:	20000018 	.word	0x20000018

080042b0 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80042b0:	b580      	push	{r7, lr}
 80042b2:	b08a      	sub	sp, #40	@ 0x28
 80042b4:	af00      	add	r7, sp, #0
 80042b6:	60f8      	str	r0, [r7, #12]
 80042b8:	60b9      	str	r1, [r7, #8]
 80042ba:	607a      	str	r2, [r7, #4]
 80042bc:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80042be:	2300      	movs	r3, #0
 80042c0:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80042c2:	f7fe f8bf 	bl	8002444 <HAL_GetTick>
 80042c6:	4602      	mov	r2, r0
 80042c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80042ca:	1a9b      	subs	r3, r3, r2
 80042cc:	683a      	ldr	r2, [r7, #0]
 80042ce:	4413      	add	r3, r2
 80042d0:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 80042d2:	f7fe f8b7 	bl	8002444 <HAL_GetTick>
 80042d6:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	330c      	adds	r3, #12
 80042de:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80042e0:	4b3d      	ldr	r3, [pc, #244]	@ (80043d8 <SPI_WaitFifoStateUntilTimeout+0x128>)
 80042e2:	681a      	ldr	r2, [r3, #0]
 80042e4:	4613      	mov	r3, r2
 80042e6:	009b      	lsls	r3, r3, #2
 80042e8:	4413      	add	r3, r2
 80042ea:	00da      	lsls	r2, r3, #3
 80042ec:	1ad3      	subs	r3, r2, r3
 80042ee:	0d1b      	lsrs	r3, r3, #20
 80042f0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80042f2:	fb02 f303 	mul.w	r3, r2, r3
 80042f6:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80042f8:	e060      	b.n	80043bc <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80042fa:	68bb      	ldr	r3, [r7, #8]
 80042fc:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8004300:	d107      	bne.n	8004312 <SPI_WaitFifoStateUntilTimeout+0x62>
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	2b00      	cmp	r3, #0
 8004306:	d104      	bne.n	8004312 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8004308:	69fb      	ldr	r3, [r7, #28]
 800430a:	781b      	ldrb	r3, [r3, #0]
 800430c:	b2db      	uxtb	r3, r3
 800430e:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8004310:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8004312:	683b      	ldr	r3, [r7, #0]
 8004314:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004318:	d050      	beq.n	80043bc <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800431a:	f7fe f893 	bl	8002444 <HAL_GetTick>
 800431e:	4602      	mov	r2, r0
 8004320:	6a3b      	ldr	r3, [r7, #32]
 8004322:	1ad3      	subs	r3, r2, r3
 8004324:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004326:	429a      	cmp	r2, r3
 8004328:	d902      	bls.n	8004330 <SPI_WaitFifoStateUntilTimeout+0x80>
 800432a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800432c:	2b00      	cmp	r3, #0
 800432e:	d13d      	bne.n	80043ac <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	685a      	ldr	r2, [r3, #4]
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800433e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	685b      	ldr	r3, [r3, #4]
 8004344:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004348:	d111      	bne.n	800436e <SPI_WaitFifoStateUntilTimeout+0xbe>
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	689b      	ldr	r3, [r3, #8]
 800434e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004352:	d004      	beq.n	800435e <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	689b      	ldr	r3, [r3, #8]
 8004358:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800435c:	d107      	bne.n	800436e <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	681a      	ldr	r2, [r3, #0]
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800436c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004372:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004376:	d10f      	bne.n	8004398 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	681a      	ldr	r2, [r3, #0]
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004386:	601a      	str	r2, [r3, #0]
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	681a      	ldr	r2, [r3, #0]
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004396:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	2201      	movs	r2, #1
 800439c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	2200      	movs	r2, #0
 80043a4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 80043a8:	2303      	movs	r3, #3
 80043aa:	e010      	b.n	80043ce <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80043ac:	69bb      	ldr	r3, [r7, #24]
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d101      	bne.n	80043b6 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 80043b2:	2300      	movs	r3, #0
 80043b4:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 80043b6:	69bb      	ldr	r3, [r7, #24]
 80043b8:	3b01      	subs	r3, #1
 80043ba:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	689a      	ldr	r2, [r3, #8]
 80043c2:	68bb      	ldr	r3, [r7, #8]
 80043c4:	4013      	ands	r3, r2
 80043c6:	687a      	ldr	r2, [r7, #4]
 80043c8:	429a      	cmp	r2, r3
 80043ca:	d196      	bne.n	80042fa <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 80043cc:	2300      	movs	r3, #0
}
 80043ce:	4618      	mov	r0, r3
 80043d0:	3728      	adds	r7, #40	@ 0x28
 80043d2:	46bd      	mov	sp, r7
 80043d4:	bd80      	pop	{r7, pc}
 80043d6:	bf00      	nop
 80043d8:	20000018 	.word	0x20000018

080043dc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80043dc:	b580      	push	{r7, lr}
 80043de:	b088      	sub	sp, #32
 80043e0:	af02      	add	r7, sp, #8
 80043e2:	60f8      	str	r0, [r7, #12]
 80043e4:	60b9      	str	r1, [r7, #8]
 80043e6:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	9300      	str	r3, [sp, #0]
 80043ec:	68bb      	ldr	r3, [r7, #8]
 80043ee:	2200      	movs	r2, #0
 80043f0:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 80043f4:	68f8      	ldr	r0, [r7, #12]
 80043f6:	f7ff ff5b 	bl	80042b0 <SPI_WaitFifoStateUntilTimeout>
 80043fa:	4603      	mov	r3, r0
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d007      	beq.n	8004410 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004404:	f043 0220 	orr.w	r2, r3, #32
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800440c:	2303      	movs	r3, #3
 800440e:	e046      	b.n	800449e <SPI_EndRxTxTransaction+0xc2>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004410:	4b25      	ldr	r3, [pc, #148]	@ (80044a8 <SPI_EndRxTxTransaction+0xcc>)
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	4a25      	ldr	r2, [pc, #148]	@ (80044ac <SPI_EndRxTxTransaction+0xd0>)
 8004416:	fba2 2303 	umull	r2, r3, r2, r3
 800441a:	0d5b      	lsrs	r3, r3, #21
 800441c:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8004420:	fb02 f303 	mul.w	r3, r2, r3
 8004424:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	685b      	ldr	r3, [r3, #4]
 800442a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800442e:	d112      	bne.n	8004456 <SPI_EndRxTxTransaction+0x7a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	9300      	str	r3, [sp, #0]
 8004434:	68bb      	ldr	r3, [r7, #8]
 8004436:	2200      	movs	r2, #0
 8004438:	2180      	movs	r1, #128	@ 0x80
 800443a:	68f8      	ldr	r0, [r7, #12]
 800443c:	f7ff feb0 	bl	80041a0 <SPI_WaitFlagStateUntilTimeout>
 8004440:	4603      	mov	r3, r0
 8004442:	2b00      	cmp	r3, #0
 8004444:	d016      	beq.n	8004474 <SPI_EndRxTxTransaction+0x98>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800444a:	f043 0220 	orr.w	r2, r3, #32
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 8004452:	2303      	movs	r3, #3
 8004454:	e023      	b.n	800449e <SPI_EndRxTxTransaction+0xc2>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8004456:	697b      	ldr	r3, [r7, #20]
 8004458:	2b00      	cmp	r3, #0
 800445a:	d00a      	beq.n	8004472 <SPI_EndRxTxTransaction+0x96>
      {
        break;
      }
      count--;
 800445c:	697b      	ldr	r3, [r7, #20]
 800445e:	3b01      	subs	r3, #1
 8004460:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	689b      	ldr	r3, [r3, #8]
 8004468:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800446c:	2b80      	cmp	r3, #128	@ 0x80
 800446e:	d0f2      	beq.n	8004456 <SPI_EndRxTxTransaction+0x7a>
 8004470:	e000      	b.n	8004474 <SPI_EndRxTxTransaction+0x98>
        break;
 8004472:	bf00      	nop
  }


  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	9300      	str	r3, [sp, #0]
 8004478:	68bb      	ldr	r3, [r7, #8]
 800447a:	2200      	movs	r2, #0
 800447c:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8004480:	68f8      	ldr	r0, [r7, #12]
 8004482:	f7ff ff15 	bl	80042b0 <SPI_WaitFifoStateUntilTimeout>
 8004486:	4603      	mov	r3, r0
 8004488:	2b00      	cmp	r3, #0
 800448a:	d007      	beq.n	800449c <SPI_EndRxTxTransaction+0xc0>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004490:	f043 0220 	orr.w	r2, r3, #32
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8004498:	2303      	movs	r3, #3
 800449a:	e000      	b.n	800449e <SPI_EndRxTxTransaction+0xc2>
  }

  return HAL_OK;
 800449c:	2300      	movs	r3, #0
}
 800449e:	4618      	mov	r0, r3
 80044a0:	3718      	adds	r7, #24
 80044a2:	46bd      	mov	sp, r7
 80044a4:	bd80      	pop	{r7, pc}
 80044a6:	bf00      	nop
 80044a8:	20000018 	.word	0x20000018
 80044ac:	165e9f81 	.word	0x165e9f81

080044b0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80044b0:	b580      	push	{r7, lr}
 80044b2:	b082      	sub	sp, #8
 80044b4:	af00      	add	r7, sp, #0
 80044b6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d101      	bne.n	80044c2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80044be:	2301      	movs	r3, #1
 80044c0:	e049      	b.n	8004556 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80044c8:	b2db      	uxtb	r3, r3
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d106      	bne.n	80044dc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	2200      	movs	r2, #0
 80044d2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80044d6:	6878      	ldr	r0, [r7, #4]
 80044d8:	f7fd fe3a 	bl	8002150 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	2202      	movs	r2, #2
 80044e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681a      	ldr	r2, [r3, #0]
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	3304      	adds	r3, #4
 80044ec:	4619      	mov	r1, r3
 80044ee:	4610      	mov	r0, r2
 80044f0:	f000 fd5e 	bl	8004fb0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	2201      	movs	r2, #1
 80044f8:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	2201      	movs	r2, #1
 8004500:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	2201      	movs	r2, #1
 8004508:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	2201      	movs	r2, #1
 8004510:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	2201      	movs	r2, #1
 8004518:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	2201      	movs	r2, #1
 8004520:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	2201      	movs	r2, #1
 8004528:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	2201      	movs	r2, #1
 8004530:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	2201      	movs	r2, #1
 8004538:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	2201      	movs	r2, #1
 8004540:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	2201      	movs	r2, #1
 8004548:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	2201      	movs	r2, #1
 8004550:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004554:	2300      	movs	r3, #0
}
 8004556:	4618      	mov	r0, r3
 8004558:	3708      	adds	r7, #8
 800455a:	46bd      	mov	sp, r7
 800455c:	bd80      	pop	{r7, pc}
	...

08004560 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004560:	b480      	push	{r7}
 8004562:	b085      	sub	sp, #20
 8004564:	af00      	add	r7, sp, #0
 8004566:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800456e:	b2db      	uxtb	r3, r3
 8004570:	2b01      	cmp	r3, #1
 8004572:	d001      	beq.n	8004578 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004574:	2301      	movs	r3, #1
 8004576:	e054      	b.n	8004622 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	2202      	movs	r2, #2
 800457c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	68da      	ldr	r2, [r3, #12]
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	f042 0201 	orr.w	r2, r2, #1
 800458e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	4a26      	ldr	r2, [pc, #152]	@ (8004630 <HAL_TIM_Base_Start_IT+0xd0>)
 8004596:	4293      	cmp	r3, r2
 8004598:	d022      	beq.n	80045e0 <HAL_TIM_Base_Start_IT+0x80>
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80045a2:	d01d      	beq.n	80045e0 <HAL_TIM_Base_Start_IT+0x80>
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	4a22      	ldr	r2, [pc, #136]	@ (8004634 <HAL_TIM_Base_Start_IT+0xd4>)
 80045aa:	4293      	cmp	r3, r2
 80045ac:	d018      	beq.n	80045e0 <HAL_TIM_Base_Start_IT+0x80>
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	4a21      	ldr	r2, [pc, #132]	@ (8004638 <HAL_TIM_Base_Start_IT+0xd8>)
 80045b4:	4293      	cmp	r3, r2
 80045b6:	d013      	beq.n	80045e0 <HAL_TIM_Base_Start_IT+0x80>
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	4a1f      	ldr	r2, [pc, #124]	@ (800463c <HAL_TIM_Base_Start_IT+0xdc>)
 80045be:	4293      	cmp	r3, r2
 80045c0:	d00e      	beq.n	80045e0 <HAL_TIM_Base_Start_IT+0x80>
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	4a1e      	ldr	r2, [pc, #120]	@ (8004640 <HAL_TIM_Base_Start_IT+0xe0>)
 80045c8:	4293      	cmp	r3, r2
 80045ca:	d009      	beq.n	80045e0 <HAL_TIM_Base_Start_IT+0x80>
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	4a1c      	ldr	r2, [pc, #112]	@ (8004644 <HAL_TIM_Base_Start_IT+0xe4>)
 80045d2:	4293      	cmp	r3, r2
 80045d4:	d004      	beq.n	80045e0 <HAL_TIM_Base_Start_IT+0x80>
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	4a1b      	ldr	r2, [pc, #108]	@ (8004648 <HAL_TIM_Base_Start_IT+0xe8>)
 80045dc:	4293      	cmp	r3, r2
 80045de:	d115      	bne.n	800460c <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	689a      	ldr	r2, [r3, #8]
 80045e6:	4b19      	ldr	r3, [pc, #100]	@ (800464c <HAL_TIM_Base_Start_IT+0xec>)
 80045e8:	4013      	ands	r3, r2
 80045ea:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	2b06      	cmp	r3, #6
 80045f0:	d015      	beq.n	800461e <HAL_TIM_Base_Start_IT+0xbe>
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80045f8:	d011      	beq.n	800461e <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	681a      	ldr	r2, [r3, #0]
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	f042 0201 	orr.w	r2, r2, #1
 8004608:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800460a:	e008      	b.n	800461e <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	681a      	ldr	r2, [r3, #0]
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	f042 0201 	orr.w	r2, r2, #1
 800461a:	601a      	str	r2, [r3, #0]
 800461c:	e000      	b.n	8004620 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800461e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004620:	2300      	movs	r3, #0
}
 8004622:	4618      	mov	r0, r3
 8004624:	3714      	adds	r7, #20
 8004626:	46bd      	mov	sp, r7
 8004628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800462c:	4770      	bx	lr
 800462e:	bf00      	nop
 8004630:	40010000 	.word	0x40010000
 8004634:	40000400 	.word	0x40000400
 8004638:	40000800 	.word	0x40000800
 800463c:	40000c00 	.word	0x40000c00
 8004640:	40010400 	.word	0x40010400
 8004644:	40014000 	.word	0x40014000
 8004648:	40001800 	.word	0x40001800
 800464c:	00010007 	.word	0x00010007

08004650 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8004650:	b480      	push	{r7}
 8004652:	b083      	sub	sp, #12
 8004654:	af00      	add	r7, sp, #0
 8004656:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	68da      	ldr	r2, [r3, #12]
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	f022 0201 	bic.w	r2, r2, #1
 8004666:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	6a1a      	ldr	r2, [r3, #32]
 800466e:	f241 1311 	movw	r3, #4369	@ 0x1111
 8004672:	4013      	ands	r3, r2
 8004674:	2b00      	cmp	r3, #0
 8004676:	d10f      	bne.n	8004698 <HAL_TIM_Base_Stop_IT+0x48>
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	6a1a      	ldr	r2, [r3, #32]
 800467e:	f240 4344 	movw	r3, #1092	@ 0x444
 8004682:	4013      	ands	r3, r2
 8004684:	2b00      	cmp	r3, #0
 8004686:	d107      	bne.n	8004698 <HAL_TIM_Base_Stop_IT+0x48>
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	681a      	ldr	r2, [r3, #0]
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	f022 0201 	bic.w	r2, r2, #1
 8004696:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	2201      	movs	r2, #1
 800469c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 80046a0:	2300      	movs	r3, #0
}
 80046a2:	4618      	mov	r0, r3
 80046a4:	370c      	adds	r7, #12
 80046a6:	46bd      	mov	sp, r7
 80046a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ac:	4770      	bx	lr

080046ae <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80046ae:	b580      	push	{r7, lr}
 80046b0:	b082      	sub	sp, #8
 80046b2:	af00      	add	r7, sp, #0
 80046b4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d101      	bne.n	80046c0 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80046bc:	2301      	movs	r3, #1
 80046be:	e049      	b.n	8004754 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80046c6:	b2db      	uxtb	r3, r3
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d106      	bne.n	80046da <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	2200      	movs	r2, #0
 80046d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80046d4:	6878      	ldr	r0, [r7, #4]
 80046d6:	f000 f841 	bl	800475c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	2202      	movs	r2, #2
 80046de:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681a      	ldr	r2, [r3, #0]
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	3304      	adds	r3, #4
 80046ea:	4619      	mov	r1, r3
 80046ec:	4610      	mov	r0, r2
 80046ee:	f000 fc5f 	bl	8004fb0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	2201      	movs	r2, #1
 80046f6:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	2201      	movs	r2, #1
 80046fe:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	2201      	movs	r2, #1
 8004706:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	2201      	movs	r2, #1
 800470e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	2201      	movs	r2, #1
 8004716:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	2201      	movs	r2, #1
 800471e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	2201      	movs	r2, #1
 8004726:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	2201      	movs	r2, #1
 800472e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	2201      	movs	r2, #1
 8004736:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	2201      	movs	r2, #1
 800473e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	2201      	movs	r2, #1
 8004746:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	2201      	movs	r2, #1
 800474e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004752:	2300      	movs	r3, #0
}
 8004754:	4618      	mov	r0, r3
 8004756:	3708      	adds	r7, #8
 8004758:	46bd      	mov	sp, r7
 800475a:	bd80      	pop	{r7, pc}

0800475c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800475c:	b480      	push	{r7}
 800475e:	b083      	sub	sp, #12
 8004760:	af00      	add	r7, sp, #0
 8004762:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004764:	bf00      	nop
 8004766:	370c      	adds	r7, #12
 8004768:	46bd      	mov	sp, r7
 800476a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800476e:	4770      	bx	lr

08004770 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004770:	b580      	push	{r7, lr}
 8004772:	b084      	sub	sp, #16
 8004774:	af00      	add	r7, sp, #0
 8004776:	6078      	str	r0, [r7, #4]
 8004778:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800477a:	683b      	ldr	r3, [r7, #0]
 800477c:	2b00      	cmp	r3, #0
 800477e:	d109      	bne.n	8004794 <HAL_TIM_PWM_Start+0x24>
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004786:	b2db      	uxtb	r3, r3
 8004788:	2b01      	cmp	r3, #1
 800478a:	bf14      	ite	ne
 800478c:	2301      	movne	r3, #1
 800478e:	2300      	moveq	r3, #0
 8004790:	b2db      	uxtb	r3, r3
 8004792:	e03c      	b.n	800480e <HAL_TIM_PWM_Start+0x9e>
 8004794:	683b      	ldr	r3, [r7, #0]
 8004796:	2b04      	cmp	r3, #4
 8004798:	d109      	bne.n	80047ae <HAL_TIM_PWM_Start+0x3e>
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80047a0:	b2db      	uxtb	r3, r3
 80047a2:	2b01      	cmp	r3, #1
 80047a4:	bf14      	ite	ne
 80047a6:	2301      	movne	r3, #1
 80047a8:	2300      	moveq	r3, #0
 80047aa:	b2db      	uxtb	r3, r3
 80047ac:	e02f      	b.n	800480e <HAL_TIM_PWM_Start+0x9e>
 80047ae:	683b      	ldr	r3, [r7, #0]
 80047b0:	2b08      	cmp	r3, #8
 80047b2:	d109      	bne.n	80047c8 <HAL_TIM_PWM_Start+0x58>
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80047ba:	b2db      	uxtb	r3, r3
 80047bc:	2b01      	cmp	r3, #1
 80047be:	bf14      	ite	ne
 80047c0:	2301      	movne	r3, #1
 80047c2:	2300      	moveq	r3, #0
 80047c4:	b2db      	uxtb	r3, r3
 80047c6:	e022      	b.n	800480e <HAL_TIM_PWM_Start+0x9e>
 80047c8:	683b      	ldr	r3, [r7, #0]
 80047ca:	2b0c      	cmp	r3, #12
 80047cc:	d109      	bne.n	80047e2 <HAL_TIM_PWM_Start+0x72>
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80047d4:	b2db      	uxtb	r3, r3
 80047d6:	2b01      	cmp	r3, #1
 80047d8:	bf14      	ite	ne
 80047da:	2301      	movne	r3, #1
 80047dc:	2300      	moveq	r3, #0
 80047de:	b2db      	uxtb	r3, r3
 80047e0:	e015      	b.n	800480e <HAL_TIM_PWM_Start+0x9e>
 80047e2:	683b      	ldr	r3, [r7, #0]
 80047e4:	2b10      	cmp	r3, #16
 80047e6:	d109      	bne.n	80047fc <HAL_TIM_PWM_Start+0x8c>
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80047ee:	b2db      	uxtb	r3, r3
 80047f0:	2b01      	cmp	r3, #1
 80047f2:	bf14      	ite	ne
 80047f4:	2301      	movne	r3, #1
 80047f6:	2300      	moveq	r3, #0
 80047f8:	b2db      	uxtb	r3, r3
 80047fa:	e008      	b.n	800480e <HAL_TIM_PWM_Start+0x9e>
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8004802:	b2db      	uxtb	r3, r3
 8004804:	2b01      	cmp	r3, #1
 8004806:	bf14      	ite	ne
 8004808:	2301      	movne	r3, #1
 800480a:	2300      	moveq	r3, #0
 800480c:	b2db      	uxtb	r3, r3
 800480e:	2b00      	cmp	r3, #0
 8004810:	d001      	beq.n	8004816 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8004812:	2301      	movs	r3, #1
 8004814:	e092      	b.n	800493c <HAL_TIM_PWM_Start+0x1cc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004816:	683b      	ldr	r3, [r7, #0]
 8004818:	2b00      	cmp	r3, #0
 800481a:	d104      	bne.n	8004826 <HAL_TIM_PWM_Start+0xb6>
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	2202      	movs	r2, #2
 8004820:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004824:	e023      	b.n	800486e <HAL_TIM_PWM_Start+0xfe>
 8004826:	683b      	ldr	r3, [r7, #0]
 8004828:	2b04      	cmp	r3, #4
 800482a:	d104      	bne.n	8004836 <HAL_TIM_PWM_Start+0xc6>
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	2202      	movs	r2, #2
 8004830:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004834:	e01b      	b.n	800486e <HAL_TIM_PWM_Start+0xfe>
 8004836:	683b      	ldr	r3, [r7, #0]
 8004838:	2b08      	cmp	r3, #8
 800483a:	d104      	bne.n	8004846 <HAL_TIM_PWM_Start+0xd6>
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	2202      	movs	r2, #2
 8004840:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004844:	e013      	b.n	800486e <HAL_TIM_PWM_Start+0xfe>
 8004846:	683b      	ldr	r3, [r7, #0]
 8004848:	2b0c      	cmp	r3, #12
 800484a:	d104      	bne.n	8004856 <HAL_TIM_PWM_Start+0xe6>
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	2202      	movs	r2, #2
 8004850:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004854:	e00b      	b.n	800486e <HAL_TIM_PWM_Start+0xfe>
 8004856:	683b      	ldr	r3, [r7, #0]
 8004858:	2b10      	cmp	r3, #16
 800485a:	d104      	bne.n	8004866 <HAL_TIM_PWM_Start+0xf6>
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	2202      	movs	r2, #2
 8004860:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004864:	e003      	b.n	800486e <HAL_TIM_PWM_Start+0xfe>
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	2202      	movs	r2, #2
 800486a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	2201      	movs	r2, #1
 8004874:	6839      	ldr	r1, [r7, #0]
 8004876:	4618      	mov	r0, r3
 8004878:	f000 ff32 	bl	80056e0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	4a30      	ldr	r2, [pc, #192]	@ (8004944 <HAL_TIM_PWM_Start+0x1d4>)
 8004882:	4293      	cmp	r3, r2
 8004884:	d004      	beq.n	8004890 <HAL_TIM_PWM_Start+0x120>
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	4a2f      	ldr	r2, [pc, #188]	@ (8004948 <HAL_TIM_PWM_Start+0x1d8>)
 800488c:	4293      	cmp	r3, r2
 800488e:	d101      	bne.n	8004894 <HAL_TIM_PWM_Start+0x124>
 8004890:	2301      	movs	r3, #1
 8004892:	e000      	b.n	8004896 <HAL_TIM_PWM_Start+0x126>
 8004894:	2300      	movs	r3, #0
 8004896:	2b00      	cmp	r3, #0
 8004898:	d007      	beq.n	80048aa <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80048a8:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	4a25      	ldr	r2, [pc, #148]	@ (8004944 <HAL_TIM_PWM_Start+0x1d4>)
 80048b0:	4293      	cmp	r3, r2
 80048b2:	d022      	beq.n	80048fa <HAL_TIM_PWM_Start+0x18a>
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80048bc:	d01d      	beq.n	80048fa <HAL_TIM_PWM_Start+0x18a>
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	4a22      	ldr	r2, [pc, #136]	@ (800494c <HAL_TIM_PWM_Start+0x1dc>)
 80048c4:	4293      	cmp	r3, r2
 80048c6:	d018      	beq.n	80048fa <HAL_TIM_PWM_Start+0x18a>
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	4a20      	ldr	r2, [pc, #128]	@ (8004950 <HAL_TIM_PWM_Start+0x1e0>)
 80048ce:	4293      	cmp	r3, r2
 80048d0:	d013      	beq.n	80048fa <HAL_TIM_PWM_Start+0x18a>
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	4a1f      	ldr	r2, [pc, #124]	@ (8004954 <HAL_TIM_PWM_Start+0x1e4>)
 80048d8:	4293      	cmp	r3, r2
 80048da:	d00e      	beq.n	80048fa <HAL_TIM_PWM_Start+0x18a>
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	4a19      	ldr	r2, [pc, #100]	@ (8004948 <HAL_TIM_PWM_Start+0x1d8>)
 80048e2:	4293      	cmp	r3, r2
 80048e4:	d009      	beq.n	80048fa <HAL_TIM_PWM_Start+0x18a>
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	4a1b      	ldr	r2, [pc, #108]	@ (8004958 <HAL_TIM_PWM_Start+0x1e8>)
 80048ec:	4293      	cmp	r3, r2
 80048ee:	d004      	beq.n	80048fa <HAL_TIM_PWM_Start+0x18a>
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	4a19      	ldr	r2, [pc, #100]	@ (800495c <HAL_TIM_PWM_Start+0x1ec>)
 80048f6:	4293      	cmp	r3, r2
 80048f8:	d115      	bne.n	8004926 <HAL_TIM_PWM_Start+0x1b6>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	689a      	ldr	r2, [r3, #8]
 8004900:	4b17      	ldr	r3, [pc, #92]	@ (8004960 <HAL_TIM_PWM_Start+0x1f0>)
 8004902:	4013      	ands	r3, r2
 8004904:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	2b06      	cmp	r3, #6
 800490a:	d015      	beq.n	8004938 <HAL_TIM_PWM_Start+0x1c8>
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004912:	d011      	beq.n	8004938 <HAL_TIM_PWM_Start+0x1c8>
    {
      __HAL_TIM_ENABLE(htim);
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	681a      	ldr	r2, [r3, #0]
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	f042 0201 	orr.w	r2, r2, #1
 8004922:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004924:	e008      	b.n	8004938 <HAL_TIM_PWM_Start+0x1c8>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	681a      	ldr	r2, [r3, #0]
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	f042 0201 	orr.w	r2, r2, #1
 8004934:	601a      	str	r2, [r3, #0]
 8004936:	e000      	b.n	800493a <HAL_TIM_PWM_Start+0x1ca>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004938:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800493a:	2300      	movs	r3, #0
}
 800493c:	4618      	mov	r0, r3
 800493e:	3710      	adds	r7, #16
 8004940:	46bd      	mov	sp, r7
 8004942:	bd80      	pop	{r7, pc}
 8004944:	40010000 	.word	0x40010000
 8004948:	40010400 	.word	0x40010400
 800494c:	40000400 	.word	0x40000400
 8004950:	40000800 	.word	0x40000800
 8004954:	40000c00 	.word	0x40000c00
 8004958:	40014000 	.word	0x40014000
 800495c:	40001800 	.word	0x40001800
 8004960:	00010007 	.word	0x00010007

08004964 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004964:	b580      	push	{r7, lr}
 8004966:	b082      	sub	sp, #8
 8004968:	af00      	add	r7, sp, #0
 800496a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	691b      	ldr	r3, [r3, #16]
 8004972:	f003 0302 	and.w	r3, r3, #2
 8004976:	2b02      	cmp	r3, #2
 8004978:	d122      	bne.n	80049c0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	68db      	ldr	r3, [r3, #12]
 8004980:	f003 0302 	and.w	r3, r3, #2
 8004984:	2b02      	cmp	r3, #2
 8004986:	d11b      	bne.n	80049c0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	f06f 0202 	mvn.w	r2, #2
 8004990:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	2201      	movs	r2, #1
 8004996:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	699b      	ldr	r3, [r3, #24]
 800499e:	f003 0303 	and.w	r3, r3, #3
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d003      	beq.n	80049ae <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80049a6:	6878      	ldr	r0, [r7, #4]
 80049a8:	f000 fae4 	bl	8004f74 <HAL_TIM_IC_CaptureCallback>
 80049ac:	e005      	b.n	80049ba <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80049ae:	6878      	ldr	r0, [r7, #4]
 80049b0:	f000 fad6 	bl	8004f60 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80049b4:	6878      	ldr	r0, [r7, #4]
 80049b6:	f000 fae7 	bl	8004f88 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	2200      	movs	r2, #0
 80049be:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	691b      	ldr	r3, [r3, #16]
 80049c6:	f003 0304 	and.w	r3, r3, #4
 80049ca:	2b04      	cmp	r3, #4
 80049cc:	d122      	bne.n	8004a14 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	68db      	ldr	r3, [r3, #12]
 80049d4:	f003 0304 	and.w	r3, r3, #4
 80049d8:	2b04      	cmp	r3, #4
 80049da:	d11b      	bne.n	8004a14 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	f06f 0204 	mvn.w	r2, #4
 80049e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	2202      	movs	r2, #2
 80049ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	699b      	ldr	r3, [r3, #24]
 80049f2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d003      	beq.n	8004a02 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80049fa:	6878      	ldr	r0, [r7, #4]
 80049fc:	f000 faba 	bl	8004f74 <HAL_TIM_IC_CaptureCallback>
 8004a00:	e005      	b.n	8004a0e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a02:	6878      	ldr	r0, [r7, #4]
 8004a04:	f000 faac 	bl	8004f60 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a08:	6878      	ldr	r0, [r7, #4]
 8004a0a:	f000 fabd 	bl	8004f88 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	2200      	movs	r2, #0
 8004a12:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	691b      	ldr	r3, [r3, #16]
 8004a1a:	f003 0308 	and.w	r3, r3, #8
 8004a1e:	2b08      	cmp	r3, #8
 8004a20:	d122      	bne.n	8004a68 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	68db      	ldr	r3, [r3, #12]
 8004a28:	f003 0308 	and.w	r3, r3, #8
 8004a2c:	2b08      	cmp	r3, #8
 8004a2e:	d11b      	bne.n	8004a68 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	f06f 0208 	mvn.w	r2, #8
 8004a38:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	2204      	movs	r2, #4
 8004a3e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	69db      	ldr	r3, [r3, #28]
 8004a46:	f003 0303 	and.w	r3, r3, #3
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d003      	beq.n	8004a56 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004a4e:	6878      	ldr	r0, [r7, #4]
 8004a50:	f000 fa90 	bl	8004f74 <HAL_TIM_IC_CaptureCallback>
 8004a54:	e005      	b.n	8004a62 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a56:	6878      	ldr	r0, [r7, #4]
 8004a58:	f000 fa82 	bl	8004f60 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a5c:	6878      	ldr	r0, [r7, #4]
 8004a5e:	f000 fa93 	bl	8004f88 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	2200      	movs	r2, #0
 8004a66:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	691b      	ldr	r3, [r3, #16]
 8004a6e:	f003 0310 	and.w	r3, r3, #16
 8004a72:	2b10      	cmp	r3, #16
 8004a74:	d122      	bne.n	8004abc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	68db      	ldr	r3, [r3, #12]
 8004a7c:	f003 0310 	and.w	r3, r3, #16
 8004a80:	2b10      	cmp	r3, #16
 8004a82:	d11b      	bne.n	8004abc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	f06f 0210 	mvn.w	r2, #16
 8004a8c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	2208      	movs	r2, #8
 8004a92:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	69db      	ldr	r3, [r3, #28]
 8004a9a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d003      	beq.n	8004aaa <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004aa2:	6878      	ldr	r0, [r7, #4]
 8004aa4:	f000 fa66 	bl	8004f74 <HAL_TIM_IC_CaptureCallback>
 8004aa8:	e005      	b.n	8004ab6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004aaa:	6878      	ldr	r0, [r7, #4]
 8004aac:	f000 fa58 	bl	8004f60 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ab0:	6878      	ldr	r0, [r7, #4]
 8004ab2:	f000 fa69 	bl	8004f88 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	2200      	movs	r2, #0
 8004aba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	691b      	ldr	r3, [r3, #16]
 8004ac2:	f003 0301 	and.w	r3, r3, #1
 8004ac6:	2b01      	cmp	r3, #1
 8004ac8:	d10e      	bne.n	8004ae8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	68db      	ldr	r3, [r3, #12]
 8004ad0:	f003 0301 	and.w	r3, r3, #1
 8004ad4:	2b01      	cmp	r3, #1
 8004ad6:	d107      	bne.n	8004ae8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	f06f 0201 	mvn.w	r2, #1
 8004ae0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004ae2:	6878      	ldr	r0, [r7, #4]
 8004ae4:	f7fd f8d0 	bl	8001c88 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	691b      	ldr	r3, [r3, #16]
 8004aee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004af2:	2b80      	cmp	r3, #128	@ 0x80
 8004af4:	d10e      	bne.n	8004b14 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	68db      	ldr	r3, [r3, #12]
 8004afc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004b00:	2b80      	cmp	r3, #128	@ 0x80
 8004b02:	d107      	bne.n	8004b14 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8004b0c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004b0e:	6878      	ldr	r0, [r7, #4]
 8004b10:	f000 fea4 	bl	800585c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	691b      	ldr	r3, [r3, #16]
 8004b1a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004b1e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004b22:	d10e      	bne.n	8004b42 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	68db      	ldr	r3, [r3, #12]
 8004b2a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004b2e:	2b80      	cmp	r3, #128	@ 0x80
 8004b30:	d107      	bne.n	8004b42 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8004b3a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004b3c:	6878      	ldr	r0, [r7, #4]
 8004b3e:	f000 fe97 	bl	8005870 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	691b      	ldr	r3, [r3, #16]
 8004b48:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004b4c:	2b40      	cmp	r3, #64	@ 0x40
 8004b4e:	d10e      	bne.n	8004b6e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	68db      	ldr	r3, [r3, #12]
 8004b56:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004b5a:	2b40      	cmp	r3, #64	@ 0x40
 8004b5c:	d107      	bne.n	8004b6e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004b66:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004b68:	6878      	ldr	r0, [r7, #4]
 8004b6a:	f000 fa17 	bl	8004f9c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	691b      	ldr	r3, [r3, #16]
 8004b74:	f003 0320 	and.w	r3, r3, #32
 8004b78:	2b20      	cmp	r3, #32
 8004b7a:	d10e      	bne.n	8004b9a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	68db      	ldr	r3, [r3, #12]
 8004b82:	f003 0320 	and.w	r3, r3, #32
 8004b86:	2b20      	cmp	r3, #32
 8004b88:	d107      	bne.n	8004b9a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	f06f 0220 	mvn.w	r2, #32
 8004b92:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004b94:	6878      	ldr	r0, [r7, #4]
 8004b96:	f000 fe57 	bl	8005848 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004b9a:	bf00      	nop
 8004b9c:	3708      	adds	r7, #8
 8004b9e:	46bd      	mov	sp, r7
 8004ba0:	bd80      	pop	{r7, pc}
	...

08004ba4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004ba4:	b580      	push	{r7, lr}
 8004ba6:	b086      	sub	sp, #24
 8004ba8:	af00      	add	r7, sp, #0
 8004baa:	60f8      	str	r0, [r7, #12]
 8004bac:	60b9      	str	r1, [r7, #8]
 8004bae:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004bb0:	2300      	movs	r3, #0
 8004bb2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004bba:	2b01      	cmp	r3, #1
 8004bbc:	d101      	bne.n	8004bc2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004bbe:	2302      	movs	r3, #2
 8004bc0:	e0ff      	b.n	8004dc2 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	2201      	movs	r2, #1
 8004bc6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	2b14      	cmp	r3, #20
 8004bce:	f200 80f0 	bhi.w	8004db2 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8004bd2:	a201      	add	r2, pc, #4	@ (adr r2, 8004bd8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004bd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004bd8:	08004c2d 	.word	0x08004c2d
 8004bdc:	08004db3 	.word	0x08004db3
 8004be0:	08004db3 	.word	0x08004db3
 8004be4:	08004db3 	.word	0x08004db3
 8004be8:	08004c6d 	.word	0x08004c6d
 8004bec:	08004db3 	.word	0x08004db3
 8004bf0:	08004db3 	.word	0x08004db3
 8004bf4:	08004db3 	.word	0x08004db3
 8004bf8:	08004caf 	.word	0x08004caf
 8004bfc:	08004db3 	.word	0x08004db3
 8004c00:	08004db3 	.word	0x08004db3
 8004c04:	08004db3 	.word	0x08004db3
 8004c08:	08004cef 	.word	0x08004cef
 8004c0c:	08004db3 	.word	0x08004db3
 8004c10:	08004db3 	.word	0x08004db3
 8004c14:	08004db3 	.word	0x08004db3
 8004c18:	08004d31 	.word	0x08004d31
 8004c1c:	08004db3 	.word	0x08004db3
 8004c20:	08004db3 	.word	0x08004db3
 8004c24:	08004db3 	.word	0x08004db3
 8004c28:	08004d71 	.word	0x08004d71
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	68b9      	ldr	r1, [r7, #8]
 8004c32:	4618      	mov	r0, r3
 8004c34:	f000 fa5c 	bl	80050f0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	699a      	ldr	r2, [r3, #24]
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	f042 0208 	orr.w	r2, r2, #8
 8004c46:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	699a      	ldr	r2, [r3, #24]
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	f022 0204 	bic.w	r2, r2, #4
 8004c56:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	6999      	ldr	r1, [r3, #24]
 8004c5e:	68bb      	ldr	r3, [r7, #8]
 8004c60:	691a      	ldr	r2, [r3, #16]
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	430a      	orrs	r2, r1
 8004c68:	619a      	str	r2, [r3, #24]
      break;
 8004c6a:	e0a5      	b.n	8004db8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	68b9      	ldr	r1, [r7, #8]
 8004c72:	4618      	mov	r0, r3
 8004c74:	f000 faae 	bl	80051d4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	699a      	ldr	r2, [r3, #24]
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004c86:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	699a      	ldr	r2, [r3, #24]
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004c96:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	6999      	ldr	r1, [r3, #24]
 8004c9e:	68bb      	ldr	r3, [r7, #8]
 8004ca0:	691b      	ldr	r3, [r3, #16]
 8004ca2:	021a      	lsls	r2, r3, #8
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	430a      	orrs	r2, r1
 8004caa:	619a      	str	r2, [r3, #24]
      break;
 8004cac:	e084      	b.n	8004db8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	68b9      	ldr	r1, [r7, #8]
 8004cb4:	4618      	mov	r0, r3
 8004cb6:	f000 fb05 	bl	80052c4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	69da      	ldr	r2, [r3, #28]
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	f042 0208 	orr.w	r2, r2, #8
 8004cc8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	69da      	ldr	r2, [r3, #28]
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	f022 0204 	bic.w	r2, r2, #4
 8004cd8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	69d9      	ldr	r1, [r3, #28]
 8004ce0:	68bb      	ldr	r3, [r7, #8]
 8004ce2:	691a      	ldr	r2, [r3, #16]
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	430a      	orrs	r2, r1
 8004cea:	61da      	str	r2, [r3, #28]
      break;
 8004cec:	e064      	b.n	8004db8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	68b9      	ldr	r1, [r7, #8]
 8004cf4:	4618      	mov	r0, r3
 8004cf6:	f000 fb5b 	bl	80053b0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	69da      	ldr	r2, [r3, #28]
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004d08:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	69da      	ldr	r2, [r3, #28]
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004d18:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	69d9      	ldr	r1, [r3, #28]
 8004d20:	68bb      	ldr	r3, [r7, #8]
 8004d22:	691b      	ldr	r3, [r3, #16]
 8004d24:	021a      	lsls	r2, r3, #8
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	430a      	orrs	r2, r1
 8004d2c:	61da      	str	r2, [r3, #28]
      break;
 8004d2e:	e043      	b.n	8004db8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	68b9      	ldr	r1, [r7, #8]
 8004d36:	4618      	mov	r0, r3
 8004d38:	f000 fb92 	bl	8005460 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	f042 0208 	orr.w	r2, r2, #8
 8004d4a:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	f022 0204 	bic.w	r2, r2, #4
 8004d5a:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8004d62:	68bb      	ldr	r3, [r7, #8]
 8004d64:	691a      	ldr	r2, [r3, #16]
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	430a      	orrs	r2, r1
 8004d6c:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8004d6e:	e023      	b.n	8004db8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	68b9      	ldr	r1, [r7, #8]
 8004d76:	4618      	mov	r0, r3
 8004d78:	f000 fbc4 	bl	8005504 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004d8a:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004d9a:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8004da2:	68bb      	ldr	r3, [r7, #8]
 8004da4:	691b      	ldr	r3, [r3, #16]
 8004da6:	021a      	lsls	r2, r3, #8
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	430a      	orrs	r2, r1
 8004dae:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8004db0:	e002      	b.n	8004db8 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8004db2:	2301      	movs	r3, #1
 8004db4:	75fb      	strb	r3, [r7, #23]
      break;
 8004db6:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	2200      	movs	r2, #0
 8004dbc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004dc0:	7dfb      	ldrb	r3, [r7, #23]
}
 8004dc2:	4618      	mov	r0, r3
 8004dc4:	3718      	adds	r7, #24
 8004dc6:	46bd      	mov	sp, r7
 8004dc8:	bd80      	pop	{r7, pc}
 8004dca:	bf00      	nop

08004dcc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004dcc:	b580      	push	{r7, lr}
 8004dce:	b084      	sub	sp, #16
 8004dd0:	af00      	add	r7, sp, #0
 8004dd2:	6078      	str	r0, [r7, #4]
 8004dd4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004dd6:	2300      	movs	r3, #0
 8004dd8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004de0:	2b01      	cmp	r3, #1
 8004de2:	d101      	bne.n	8004de8 <HAL_TIM_ConfigClockSource+0x1c>
 8004de4:	2302      	movs	r3, #2
 8004de6:	e0b4      	b.n	8004f52 <HAL_TIM_ConfigClockSource+0x186>
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	2201      	movs	r2, #1
 8004dec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	2202      	movs	r2, #2
 8004df4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	689b      	ldr	r3, [r3, #8]
 8004dfe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004e00:	68ba      	ldr	r2, [r7, #8]
 8004e02:	4b56      	ldr	r3, [pc, #344]	@ (8004f5c <HAL_TIM_ConfigClockSource+0x190>)
 8004e04:	4013      	ands	r3, r2
 8004e06:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004e08:	68bb      	ldr	r3, [r7, #8]
 8004e0a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004e0e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	68ba      	ldr	r2, [r7, #8]
 8004e16:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004e18:	683b      	ldr	r3, [r7, #0]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004e20:	d03e      	beq.n	8004ea0 <HAL_TIM_ConfigClockSource+0xd4>
 8004e22:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004e26:	f200 8087 	bhi.w	8004f38 <HAL_TIM_ConfigClockSource+0x16c>
 8004e2a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004e2e:	f000 8086 	beq.w	8004f3e <HAL_TIM_ConfigClockSource+0x172>
 8004e32:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004e36:	d87f      	bhi.n	8004f38 <HAL_TIM_ConfigClockSource+0x16c>
 8004e38:	2b70      	cmp	r3, #112	@ 0x70
 8004e3a:	d01a      	beq.n	8004e72 <HAL_TIM_ConfigClockSource+0xa6>
 8004e3c:	2b70      	cmp	r3, #112	@ 0x70
 8004e3e:	d87b      	bhi.n	8004f38 <HAL_TIM_ConfigClockSource+0x16c>
 8004e40:	2b60      	cmp	r3, #96	@ 0x60
 8004e42:	d050      	beq.n	8004ee6 <HAL_TIM_ConfigClockSource+0x11a>
 8004e44:	2b60      	cmp	r3, #96	@ 0x60
 8004e46:	d877      	bhi.n	8004f38 <HAL_TIM_ConfigClockSource+0x16c>
 8004e48:	2b50      	cmp	r3, #80	@ 0x50
 8004e4a:	d03c      	beq.n	8004ec6 <HAL_TIM_ConfigClockSource+0xfa>
 8004e4c:	2b50      	cmp	r3, #80	@ 0x50
 8004e4e:	d873      	bhi.n	8004f38 <HAL_TIM_ConfigClockSource+0x16c>
 8004e50:	2b40      	cmp	r3, #64	@ 0x40
 8004e52:	d058      	beq.n	8004f06 <HAL_TIM_ConfigClockSource+0x13a>
 8004e54:	2b40      	cmp	r3, #64	@ 0x40
 8004e56:	d86f      	bhi.n	8004f38 <HAL_TIM_ConfigClockSource+0x16c>
 8004e58:	2b30      	cmp	r3, #48	@ 0x30
 8004e5a:	d064      	beq.n	8004f26 <HAL_TIM_ConfigClockSource+0x15a>
 8004e5c:	2b30      	cmp	r3, #48	@ 0x30
 8004e5e:	d86b      	bhi.n	8004f38 <HAL_TIM_ConfigClockSource+0x16c>
 8004e60:	2b20      	cmp	r3, #32
 8004e62:	d060      	beq.n	8004f26 <HAL_TIM_ConfigClockSource+0x15a>
 8004e64:	2b20      	cmp	r3, #32
 8004e66:	d867      	bhi.n	8004f38 <HAL_TIM_ConfigClockSource+0x16c>
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d05c      	beq.n	8004f26 <HAL_TIM_ConfigClockSource+0x15a>
 8004e6c:	2b10      	cmp	r3, #16
 8004e6e:	d05a      	beq.n	8004f26 <HAL_TIM_ConfigClockSource+0x15a>
 8004e70:	e062      	b.n	8004f38 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004e76:	683b      	ldr	r3, [r7, #0]
 8004e78:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004e7a:	683b      	ldr	r3, [r7, #0]
 8004e7c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004e7e:	683b      	ldr	r3, [r7, #0]
 8004e80:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004e82:	f000 fc0d 	bl	80056a0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	689b      	ldr	r3, [r3, #8]
 8004e8c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004e8e:	68bb      	ldr	r3, [r7, #8]
 8004e90:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004e94:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	68ba      	ldr	r2, [r7, #8]
 8004e9c:	609a      	str	r2, [r3, #8]
      break;
 8004e9e:	e04f      	b.n	8004f40 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004ea4:	683b      	ldr	r3, [r7, #0]
 8004ea6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004ea8:	683b      	ldr	r3, [r7, #0]
 8004eaa:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004eac:	683b      	ldr	r3, [r7, #0]
 8004eae:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004eb0:	f000 fbf6 	bl	80056a0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	689a      	ldr	r2, [r3, #8]
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004ec2:	609a      	str	r2, [r3, #8]
      break;
 8004ec4:	e03c      	b.n	8004f40 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004eca:	683b      	ldr	r3, [r7, #0]
 8004ecc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004ece:	683b      	ldr	r3, [r7, #0]
 8004ed0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004ed2:	461a      	mov	r2, r3
 8004ed4:	f000 fb6a 	bl	80055ac <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	2150      	movs	r1, #80	@ 0x50
 8004ede:	4618      	mov	r0, r3
 8004ee0:	f000 fbc3 	bl	800566a <TIM_ITRx_SetConfig>
      break;
 8004ee4:	e02c      	b.n	8004f40 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004eea:	683b      	ldr	r3, [r7, #0]
 8004eec:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004eee:	683b      	ldr	r3, [r7, #0]
 8004ef0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004ef2:	461a      	mov	r2, r3
 8004ef4:	f000 fb89 	bl	800560a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	2160      	movs	r1, #96	@ 0x60
 8004efe:	4618      	mov	r0, r3
 8004f00:	f000 fbb3 	bl	800566a <TIM_ITRx_SetConfig>
      break;
 8004f04:	e01c      	b.n	8004f40 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004f0a:	683b      	ldr	r3, [r7, #0]
 8004f0c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004f0e:	683b      	ldr	r3, [r7, #0]
 8004f10:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004f12:	461a      	mov	r2, r3
 8004f14:	f000 fb4a 	bl	80055ac <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	2140      	movs	r1, #64	@ 0x40
 8004f1e:	4618      	mov	r0, r3
 8004f20:	f000 fba3 	bl	800566a <TIM_ITRx_SetConfig>
      break;
 8004f24:	e00c      	b.n	8004f40 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681a      	ldr	r2, [r3, #0]
 8004f2a:	683b      	ldr	r3, [r7, #0]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	4619      	mov	r1, r3
 8004f30:	4610      	mov	r0, r2
 8004f32:	f000 fb9a 	bl	800566a <TIM_ITRx_SetConfig>
      break;
 8004f36:	e003      	b.n	8004f40 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004f38:	2301      	movs	r3, #1
 8004f3a:	73fb      	strb	r3, [r7, #15]
      break;
 8004f3c:	e000      	b.n	8004f40 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004f3e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	2201      	movs	r2, #1
 8004f44:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	2200      	movs	r2, #0
 8004f4c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004f50:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f52:	4618      	mov	r0, r3
 8004f54:	3710      	adds	r7, #16
 8004f56:	46bd      	mov	sp, r7
 8004f58:	bd80      	pop	{r7, pc}
 8004f5a:	bf00      	nop
 8004f5c:	fffeff88 	.word	0xfffeff88

08004f60 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004f60:	b480      	push	{r7}
 8004f62:	b083      	sub	sp, #12
 8004f64:	af00      	add	r7, sp, #0
 8004f66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004f68:	bf00      	nop
 8004f6a:	370c      	adds	r7, #12
 8004f6c:	46bd      	mov	sp, r7
 8004f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f72:	4770      	bx	lr

08004f74 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004f74:	b480      	push	{r7}
 8004f76:	b083      	sub	sp, #12
 8004f78:	af00      	add	r7, sp, #0
 8004f7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004f7c:	bf00      	nop
 8004f7e:	370c      	adds	r7, #12
 8004f80:	46bd      	mov	sp, r7
 8004f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f86:	4770      	bx	lr

08004f88 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004f88:	b480      	push	{r7}
 8004f8a:	b083      	sub	sp, #12
 8004f8c:	af00      	add	r7, sp, #0
 8004f8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004f90:	bf00      	nop
 8004f92:	370c      	adds	r7, #12
 8004f94:	46bd      	mov	sp, r7
 8004f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f9a:	4770      	bx	lr

08004f9c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004f9c:	b480      	push	{r7}
 8004f9e:	b083      	sub	sp, #12
 8004fa0:	af00      	add	r7, sp, #0
 8004fa2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004fa4:	bf00      	nop
 8004fa6:	370c      	adds	r7, #12
 8004fa8:	46bd      	mov	sp, r7
 8004faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fae:	4770      	bx	lr

08004fb0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004fb0:	b480      	push	{r7}
 8004fb2:	b085      	sub	sp, #20
 8004fb4:	af00      	add	r7, sp, #0
 8004fb6:	6078      	str	r0, [r7, #4]
 8004fb8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	4a40      	ldr	r2, [pc, #256]	@ (80050c4 <TIM_Base_SetConfig+0x114>)
 8004fc4:	4293      	cmp	r3, r2
 8004fc6:	d013      	beq.n	8004ff0 <TIM_Base_SetConfig+0x40>
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004fce:	d00f      	beq.n	8004ff0 <TIM_Base_SetConfig+0x40>
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	4a3d      	ldr	r2, [pc, #244]	@ (80050c8 <TIM_Base_SetConfig+0x118>)
 8004fd4:	4293      	cmp	r3, r2
 8004fd6:	d00b      	beq.n	8004ff0 <TIM_Base_SetConfig+0x40>
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	4a3c      	ldr	r2, [pc, #240]	@ (80050cc <TIM_Base_SetConfig+0x11c>)
 8004fdc:	4293      	cmp	r3, r2
 8004fde:	d007      	beq.n	8004ff0 <TIM_Base_SetConfig+0x40>
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	4a3b      	ldr	r2, [pc, #236]	@ (80050d0 <TIM_Base_SetConfig+0x120>)
 8004fe4:	4293      	cmp	r3, r2
 8004fe6:	d003      	beq.n	8004ff0 <TIM_Base_SetConfig+0x40>
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	4a3a      	ldr	r2, [pc, #232]	@ (80050d4 <TIM_Base_SetConfig+0x124>)
 8004fec:	4293      	cmp	r3, r2
 8004fee:	d108      	bne.n	8005002 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004ff6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004ff8:	683b      	ldr	r3, [r7, #0]
 8004ffa:	685b      	ldr	r3, [r3, #4]
 8004ffc:	68fa      	ldr	r2, [r7, #12]
 8004ffe:	4313      	orrs	r3, r2
 8005000:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	4a2f      	ldr	r2, [pc, #188]	@ (80050c4 <TIM_Base_SetConfig+0x114>)
 8005006:	4293      	cmp	r3, r2
 8005008:	d02b      	beq.n	8005062 <TIM_Base_SetConfig+0xb2>
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005010:	d027      	beq.n	8005062 <TIM_Base_SetConfig+0xb2>
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	4a2c      	ldr	r2, [pc, #176]	@ (80050c8 <TIM_Base_SetConfig+0x118>)
 8005016:	4293      	cmp	r3, r2
 8005018:	d023      	beq.n	8005062 <TIM_Base_SetConfig+0xb2>
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	4a2b      	ldr	r2, [pc, #172]	@ (80050cc <TIM_Base_SetConfig+0x11c>)
 800501e:	4293      	cmp	r3, r2
 8005020:	d01f      	beq.n	8005062 <TIM_Base_SetConfig+0xb2>
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	4a2a      	ldr	r2, [pc, #168]	@ (80050d0 <TIM_Base_SetConfig+0x120>)
 8005026:	4293      	cmp	r3, r2
 8005028:	d01b      	beq.n	8005062 <TIM_Base_SetConfig+0xb2>
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	4a29      	ldr	r2, [pc, #164]	@ (80050d4 <TIM_Base_SetConfig+0x124>)
 800502e:	4293      	cmp	r3, r2
 8005030:	d017      	beq.n	8005062 <TIM_Base_SetConfig+0xb2>
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	4a28      	ldr	r2, [pc, #160]	@ (80050d8 <TIM_Base_SetConfig+0x128>)
 8005036:	4293      	cmp	r3, r2
 8005038:	d013      	beq.n	8005062 <TIM_Base_SetConfig+0xb2>
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	4a27      	ldr	r2, [pc, #156]	@ (80050dc <TIM_Base_SetConfig+0x12c>)
 800503e:	4293      	cmp	r3, r2
 8005040:	d00f      	beq.n	8005062 <TIM_Base_SetConfig+0xb2>
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	4a26      	ldr	r2, [pc, #152]	@ (80050e0 <TIM_Base_SetConfig+0x130>)
 8005046:	4293      	cmp	r3, r2
 8005048:	d00b      	beq.n	8005062 <TIM_Base_SetConfig+0xb2>
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	4a25      	ldr	r2, [pc, #148]	@ (80050e4 <TIM_Base_SetConfig+0x134>)
 800504e:	4293      	cmp	r3, r2
 8005050:	d007      	beq.n	8005062 <TIM_Base_SetConfig+0xb2>
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	4a24      	ldr	r2, [pc, #144]	@ (80050e8 <TIM_Base_SetConfig+0x138>)
 8005056:	4293      	cmp	r3, r2
 8005058:	d003      	beq.n	8005062 <TIM_Base_SetConfig+0xb2>
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	4a23      	ldr	r2, [pc, #140]	@ (80050ec <TIM_Base_SetConfig+0x13c>)
 800505e:	4293      	cmp	r3, r2
 8005060:	d108      	bne.n	8005074 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005068:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800506a:	683b      	ldr	r3, [r7, #0]
 800506c:	68db      	ldr	r3, [r3, #12]
 800506e:	68fa      	ldr	r2, [r7, #12]
 8005070:	4313      	orrs	r3, r2
 8005072:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800507a:	683b      	ldr	r3, [r7, #0]
 800507c:	695b      	ldr	r3, [r3, #20]
 800507e:	4313      	orrs	r3, r2
 8005080:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	68fa      	ldr	r2, [r7, #12]
 8005086:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005088:	683b      	ldr	r3, [r7, #0]
 800508a:	689a      	ldr	r2, [r3, #8]
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005090:	683b      	ldr	r3, [r7, #0]
 8005092:	681a      	ldr	r2, [r3, #0]
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	4a0a      	ldr	r2, [pc, #40]	@ (80050c4 <TIM_Base_SetConfig+0x114>)
 800509c:	4293      	cmp	r3, r2
 800509e:	d003      	beq.n	80050a8 <TIM_Base_SetConfig+0xf8>
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	4a0c      	ldr	r2, [pc, #48]	@ (80050d4 <TIM_Base_SetConfig+0x124>)
 80050a4:	4293      	cmp	r3, r2
 80050a6:	d103      	bne.n	80050b0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80050a8:	683b      	ldr	r3, [r7, #0]
 80050aa:	691a      	ldr	r2, [r3, #16]
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	2201      	movs	r2, #1
 80050b4:	615a      	str	r2, [r3, #20]
}
 80050b6:	bf00      	nop
 80050b8:	3714      	adds	r7, #20
 80050ba:	46bd      	mov	sp, r7
 80050bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050c0:	4770      	bx	lr
 80050c2:	bf00      	nop
 80050c4:	40010000 	.word	0x40010000
 80050c8:	40000400 	.word	0x40000400
 80050cc:	40000800 	.word	0x40000800
 80050d0:	40000c00 	.word	0x40000c00
 80050d4:	40010400 	.word	0x40010400
 80050d8:	40014000 	.word	0x40014000
 80050dc:	40014400 	.word	0x40014400
 80050e0:	40014800 	.word	0x40014800
 80050e4:	40001800 	.word	0x40001800
 80050e8:	40001c00 	.word	0x40001c00
 80050ec:	40002000 	.word	0x40002000

080050f0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80050f0:	b480      	push	{r7}
 80050f2:	b087      	sub	sp, #28
 80050f4:	af00      	add	r7, sp, #0
 80050f6:	6078      	str	r0, [r7, #4]
 80050f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	6a1b      	ldr	r3, [r3, #32]
 80050fe:	f023 0201 	bic.w	r2, r3, #1
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	6a1b      	ldr	r3, [r3, #32]
 800510a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	685b      	ldr	r3, [r3, #4]
 8005110:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	699b      	ldr	r3, [r3, #24]
 8005116:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005118:	68fa      	ldr	r2, [r7, #12]
 800511a:	4b2b      	ldr	r3, [pc, #172]	@ (80051c8 <TIM_OC1_SetConfig+0xd8>)
 800511c:	4013      	ands	r3, r2
 800511e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	f023 0303 	bic.w	r3, r3, #3
 8005126:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005128:	683b      	ldr	r3, [r7, #0]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	68fa      	ldr	r2, [r7, #12]
 800512e:	4313      	orrs	r3, r2
 8005130:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005132:	697b      	ldr	r3, [r7, #20]
 8005134:	f023 0302 	bic.w	r3, r3, #2
 8005138:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800513a:	683b      	ldr	r3, [r7, #0]
 800513c:	689b      	ldr	r3, [r3, #8]
 800513e:	697a      	ldr	r2, [r7, #20]
 8005140:	4313      	orrs	r3, r2
 8005142:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	4a21      	ldr	r2, [pc, #132]	@ (80051cc <TIM_OC1_SetConfig+0xdc>)
 8005148:	4293      	cmp	r3, r2
 800514a:	d003      	beq.n	8005154 <TIM_OC1_SetConfig+0x64>
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	4a20      	ldr	r2, [pc, #128]	@ (80051d0 <TIM_OC1_SetConfig+0xe0>)
 8005150:	4293      	cmp	r3, r2
 8005152:	d10c      	bne.n	800516e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005154:	697b      	ldr	r3, [r7, #20]
 8005156:	f023 0308 	bic.w	r3, r3, #8
 800515a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800515c:	683b      	ldr	r3, [r7, #0]
 800515e:	68db      	ldr	r3, [r3, #12]
 8005160:	697a      	ldr	r2, [r7, #20]
 8005162:	4313      	orrs	r3, r2
 8005164:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005166:	697b      	ldr	r3, [r7, #20]
 8005168:	f023 0304 	bic.w	r3, r3, #4
 800516c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	4a16      	ldr	r2, [pc, #88]	@ (80051cc <TIM_OC1_SetConfig+0xdc>)
 8005172:	4293      	cmp	r3, r2
 8005174:	d003      	beq.n	800517e <TIM_OC1_SetConfig+0x8e>
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	4a15      	ldr	r2, [pc, #84]	@ (80051d0 <TIM_OC1_SetConfig+0xe0>)
 800517a:	4293      	cmp	r3, r2
 800517c:	d111      	bne.n	80051a2 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800517e:	693b      	ldr	r3, [r7, #16]
 8005180:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005184:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005186:	693b      	ldr	r3, [r7, #16]
 8005188:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800518c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800518e:	683b      	ldr	r3, [r7, #0]
 8005190:	695b      	ldr	r3, [r3, #20]
 8005192:	693a      	ldr	r2, [r7, #16]
 8005194:	4313      	orrs	r3, r2
 8005196:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005198:	683b      	ldr	r3, [r7, #0]
 800519a:	699b      	ldr	r3, [r3, #24]
 800519c:	693a      	ldr	r2, [r7, #16]
 800519e:	4313      	orrs	r3, r2
 80051a0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	693a      	ldr	r2, [r7, #16]
 80051a6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	68fa      	ldr	r2, [r7, #12]
 80051ac:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80051ae:	683b      	ldr	r3, [r7, #0]
 80051b0:	685a      	ldr	r2, [r3, #4]
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	697a      	ldr	r2, [r7, #20]
 80051ba:	621a      	str	r2, [r3, #32]
}
 80051bc:	bf00      	nop
 80051be:	371c      	adds	r7, #28
 80051c0:	46bd      	mov	sp, r7
 80051c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051c6:	4770      	bx	lr
 80051c8:	fffeff8f 	.word	0xfffeff8f
 80051cc:	40010000 	.word	0x40010000
 80051d0:	40010400 	.word	0x40010400

080051d4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80051d4:	b480      	push	{r7}
 80051d6:	b087      	sub	sp, #28
 80051d8:	af00      	add	r7, sp, #0
 80051da:	6078      	str	r0, [r7, #4]
 80051dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	6a1b      	ldr	r3, [r3, #32]
 80051e2:	f023 0210 	bic.w	r2, r3, #16
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	6a1b      	ldr	r3, [r3, #32]
 80051ee:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	685b      	ldr	r3, [r3, #4]
 80051f4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	699b      	ldr	r3, [r3, #24]
 80051fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80051fc:	68fa      	ldr	r2, [r7, #12]
 80051fe:	4b2e      	ldr	r3, [pc, #184]	@ (80052b8 <TIM_OC2_SetConfig+0xe4>)
 8005200:	4013      	ands	r3, r2
 8005202:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800520a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800520c:	683b      	ldr	r3, [r7, #0]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	021b      	lsls	r3, r3, #8
 8005212:	68fa      	ldr	r2, [r7, #12]
 8005214:	4313      	orrs	r3, r2
 8005216:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005218:	697b      	ldr	r3, [r7, #20]
 800521a:	f023 0320 	bic.w	r3, r3, #32
 800521e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005220:	683b      	ldr	r3, [r7, #0]
 8005222:	689b      	ldr	r3, [r3, #8]
 8005224:	011b      	lsls	r3, r3, #4
 8005226:	697a      	ldr	r2, [r7, #20]
 8005228:	4313      	orrs	r3, r2
 800522a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	4a23      	ldr	r2, [pc, #140]	@ (80052bc <TIM_OC2_SetConfig+0xe8>)
 8005230:	4293      	cmp	r3, r2
 8005232:	d003      	beq.n	800523c <TIM_OC2_SetConfig+0x68>
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	4a22      	ldr	r2, [pc, #136]	@ (80052c0 <TIM_OC2_SetConfig+0xec>)
 8005238:	4293      	cmp	r3, r2
 800523a:	d10d      	bne.n	8005258 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800523c:	697b      	ldr	r3, [r7, #20]
 800523e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005242:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005244:	683b      	ldr	r3, [r7, #0]
 8005246:	68db      	ldr	r3, [r3, #12]
 8005248:	011b      	lsls	r3, r3, #4
 800524a:	697a      	ldr	r2, [r7, #20]
 800524c:	4313      	orrs	r3, r2
 800524e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005250:	697b      	ldr	r3, [r7, #20]
 8005252:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005256:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	4a18      	ldr	r2, [pc, #96]	@ (80052bc <TIM_OC2_SetConfig+0xe8>)
 800525c:	4293      	cmp	r3, r2
 800525e:	d003      	beq.n	8005268 <TIM_OC2_SetConfig+0x94>
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	4a17      	ldr	r2, [pc, #92]	@ (80052c0 <TIM_OC2_SetConfig+0xec>)
 8005264:	4293      	cmp	r3, r2
 8005266:	d113      	bne.n	8005290 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005268:	693b      	ldr	r3, [r7, #16]
 800526a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800526e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005270:	693b      	ldr	r3, [r7, #16]
 8005272:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005276:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005278:	683b      	ldr	r3, [r7, #0]
 800527a:	695b      	ldr	r3, [r3, #20]
 800527c:	009b      	lsls	r3, r3, #2
 800527e:	693a      	ldr	r2, [r7, #16]
 8005280:	4313      	orrs	r3, r2
 8005282:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005284:	683b      	ldr	r3, [r7, #0]
 8005286:	699b      	ldr	r3, [r3, #24]
 8005288:	009b      	lsls	r3, r3, #2
 800528a:	693a      	ldr	r2, [r7, #16]
 800528c:	4313      	orrs	r3, r2
 800528e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	693a      	ldr	r2, [r7, #16]
 8005294:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	68fa      	ldr	r2, [r7, #12]
 800529a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800529c:	683b      	ldr	r3, [r7, #0]
 800529e:	685a      	ldr	r2, [r3, #4]
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	697a      	ldr	r2, [r7, #20]
 80052a8:	621a      	str	r2, [r3, #32]
}
 80052aa:	bf00      	nop
 80052ac:	371c      	adds	r7, #28
 80052ae:	46bd      	mov	sp, r7
 80052b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052b4:	4770      	bx	lr
 80052b6:	bf00      	nop
 80052b8:	feff8fff 	.word	0xfeff8fff
 80052bc:	40010000 	.word	0x40010000
 80052c0:	40010400 	.word	0x40010400

080052c4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80052c4:	b480      	push	{r7}
 80052c6:	b087      	sub	sp, #28
 80052c8:	af00      	add	r7, sp, #0
 80052ca:	6078      	str	r0, [r7, #4]
 80052cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	6a1b      	ldr	r3, [r3, #32]
 80052d2:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	6a1b      	ldr	r3, [r3, #32]
 80052de:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	685b      	ldr	r3, [r3, #4]
 80052e4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	69db      	ldr	r3, [r3, #28]
 80052ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80052ec:	68fa      	ldr	r2, [r7, #12]
 80052ee:	4b2d      	ldr	r3, [pc, #180]	@ (80053a4 <TIM_OC3_SetConfig+0xe0>)
 80052f0:	4013      	ands	r3, r2
 80052f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	f023 0303 	bic.w	r3, r3, #3
 80052fa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80052fc:	683b      	ldr	r3, [r7, #0]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	68fa      	ldr	r2, [r7, #12]
 8005302:	4313      	orrs	r3, r2
 8005304:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005306:	697b      	ldr	r3, [r7, #20]
 8005308:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800530c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800530e:	683b      	ldr	r3, [r7, #0]
 8005310:	689b      	ldr	r3, [r3, #8]
 8005312:	021b      	lsls	r3, r3, #8
 8005314:	697a      	ldr	r2, [r7, #20]
 8005316:	4313      	orrs	r3, r2
 8005318:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	4a22      	ldr	r2, [pc, #136]	@ (80053a8 <TIM_OC3_SetConfig+0xe4>)
 800531e:	4293      	cmp	r3, r2
 8005320:	d003      	beq.n	800532a <TIM_OC3_SetConfig+0x66>
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	4a21      	ldr	r2, [pc, #132]	@ (80053ac <TIM_OC3_SetConfig+0xe8>)
 8005326:	4293      	cmp	r3, r2
 8005328:	d10d      	bne.n	8005346 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800532a:	697b      	ldr	r3, [r7, #20]
 800532c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005330:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005332:	683b      	ldr	r3, [r7, #0]
 8005334:	68db      	ldr	r3, [r3, #12]
 8005336:	021b      	lsls	r3, r3, #8
 8005338:	697a      	ldr	r2, [r7, #20]
 800533a:	4313      	orrs	r3, r2
 800533c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800533e:	697b      	ldr	r3, [r7, #20]
 8005340:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005344:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	4a17      	ldr	r2, [pc, #92]	@ (80053a8 <TIM_OC3_SetConfig+0xe4>)
 800534a:	4293      	cmp	r3, r2
 800534c:	d003      	beq.n	8005356 <TIM_OC3_SetConfig+0x92>
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	4a16      	ldr	r2, [pc, #88]	@ (80053ac <TIM_OC3_SetConfig+0xe8>)
 8005352:	4293      	cmp	r3, r2
 8005354:	d113      	bne.n	800537e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005356:	693b      	ldr	r3, [r7, #16]
 8005358:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800535c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800535e:	693b      	ldr	r3, [r7, #16]
 8005360:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005364:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005366:	683b      	ldr	r3, [r7, #0]
 8005368:	695b      	ldr	r3, [r3, #20]
 800536a:	011b      	lsls	r3, r3, #4
 800536c:	693a      	ldr	r2, [r7, #16]
 800536e:	4313      	orrs	r3, r2
 8005370:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005372:	683b      	ldr	r3, [r7, #0]
 8005374:	699b      	ldr	r3, [r3, #24]
 8005376:	011b      	lsls	r3, r3, #4
 8005378:	693a      	ldr	r2, [r7, #16]
 800537a:	4313      	orrs	r3, r2
 800537c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	693a      	ldr	r2, [r7, #16]
 8005382:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	68fa      	ldr	r2, [r7, #12]
 8005388:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800538a:	683b      	ldr	r3, [r7, #0]
 800538c:	685a      	ldr	r2, [r3, #4]
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	697a      	ldr	r2, [r7, #20]
 8005396:	621a      	str	r2, [r3, #32]
}
 8005398:	bf00      	nop
 800539a:	371c      	adds	r7, #28
 800539c:	46bd      	mov	sp, r7
 800539e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053a2:	4770      	bx	lr
 80053a4:	fffeff8f 	.word	0xfffeff8f
 80053a8:	40010000 	.word	0x40010000
 80053ac:	40010400 	.word	0x40010400

080053b0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80053b0:	b480      	push	{r7}
 80053b2:	b087      	sub	sp, #28
 80053b4:	af00      	add	r7, sp, #0
 80053b6:	6078      	str	r0, [r7, #4]
 80053b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	6a1b      	ldr	r3, [r3, #32]
 80053be:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	6a1b      	ldr	r3, [r3, #32]
 80053ca:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	685b      	ldr	r3, [r3, #4]
 80053d0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	69db      	ldr	r3, [r3, #28]
 80053d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80053d8:	68fa      	ldr	r2, [r7, #12]
 80053da:	4b1e      	ldr	r3, [pc, #120]	@ (8005454 <TIM_OC4_SetConfig+0xa4>)
 80053dc:	4013      	ands	r3, r2
 80053de:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80053e6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80053e8:	683b      	ldr	r3, [r7, #0]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	021b      	lsls	r3, r3, #8
 80053ee:	68fa      	ldr	r2, [r7, #12]
 80053f0:	4313      	orrs	r3, r2
 80053f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80053f4:	693b      	ldr	r3, [r7, #16]
 80053f6:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80053fa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80053fc:	683b      	ldr	r3, [r7, #0]
 80053fe:	689b      	ldr	r3, [r3, #8]
 8005400:	031b      	lsls	r3, r3, #12
 8005402:	693a      	ldr	r2, [r7, #16]
 8005404:	4313      	orrs	r3, r2
 8005406:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	4a13      	ldr	r2, [pc, #76]	@ (8005458 <TIM_OC4_SetConfig+0xa8>)
 800540c:	4293      	cmp	r3, r2
 800540e:	d003      	beq.n	8005418 <TIM_OC4_SetConfig+0x68>
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	4a12      	ldr	r2, [pc, #72]	@ (800545c <TIM_OC4_SetConfig+0xac>)
 8005414:	4293      	cmp	r3, r2
 8005416:	d109      	bne.n	800542c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005418:	697b      	ldr	r3, [r7, #20]
 800541a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800541e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005420:	683b      	ldr	r3, [r7, #0]
 8005422:	695b      	ldr	r3, [r3, #20]
 8005424:	019b      	lsls	r3, r3, #6
 8005426:	697a      	ldr	r2, [r7, #20]
 8005428:	4313      	orrs	r3, r2
 800542a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	697a      	ldr	r2, [r7, #20]
 8005430:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	68fa      	ldr	r2, [r7, #12]
 8005436:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005438:	683b      	ldr	r3, [r7, #0]
 800543a:	685a      	ldr	r2, [r3, #4]
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	693a      	ldr	r2, [r7, #16]
 8005444:	621a      	str	r2, [r3, #32]
}
 8005446:	bf00      	nop
 8005448:	371c      	adds	r7, #28
 800544a:	46bd      	mov	sp, r7
 800544c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005450:	4770      	bx	lr
 8005452:	bf00      	nop
 8005454:	feff8fff 	.word	0xfeff8fff
 8005458:	40010000 	.word	0x40010000
 800545c:	40010400 	.word	0x40010400

08005460 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005460:	b480      	push	{r7}
 8005462:	b087      	sub	sp, #28
 8005464:	af00      	add	r7, sp, #0
 8005466:	6078      	str	r0, [r7, #4]
 8005468:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	6a1b      	ldr	r3, [r3, #32]
 800546e:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	6a1b      	ldr	r3, [r3, #32]
 800547a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	685b      	ldr	r3, [r3, #4]
 8005480:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005486:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005488:	68fa      	ldr	r2, [r7, #12]
 800548a:	4b1b      	ldr	r3, [pc, #108]	@ (80054f8 <TIM_OC5_SetConfig+0x98>)
 800548c:	4013      	ands	r3, r2
 800548e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005490:	683b      	ldr	r3, [r7, #0]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	68fa      	ldr	r2, [r7, #12]
 8005496:	4313      	orrs	r3, r2
 8005498:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800549a:	693b      	ldr	r3, [r7, #16]
 800549c:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 80054a0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80054a2:	683b      	ldr	r3, [r7, #0]
 80054a4:	689b      	ldr	r3, [r3, #8]
 80054a6:	041b      	lsls	r3, r3, #16
 80054a8:	693a      	ldr	r2, [r7, #16]
 80054aa:	4313      	orrs	r3, r2
 80054ac:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	4a12      	ldr	r2, [pc, #72]	@ (80054fc <TIM_OC5_SetConfig+0x9c>)
 80054b2:	4293      	cmp	r3, r2
 80054b4:	d003      	beq.n	80054be <TIM_OC5_SetConfig+0x5e>
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	4a11      	ldr	r2, [pc, #68]	@ (8005500 <TIM_OC5_SetConfig+0xa0>)
 80054ba:	4293      	cmp	r3, r2
 80054bc:	d109      	bne.n	80054d2 <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80054be:	697b      	ldr	r3, [r7, #20]
 80054c0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80054c4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80054c6:	683b      	ldr	r3, [r7, #0]
 80054c8:	695b      	ldr	r3, [r3, #20]
 80054ca:	021b      	lsls	r3, r3, #8
 80054cc:	697a      	ldr	r2, [r7, #20]
 80054ce:	4313      	orrs	r3, r2
 80054d0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	697a      	ldr	r2, [r7, #20]
 80054d6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	68fa      	ldr	r2, [r7, #12]
 80054dc:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80054de:	683b      	ldr	r3, [r7, #0]
 80054e0:	685a      	ldr	r2, [r3, #4]
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	693a      	ldr	r2, [r7, #16]
 80054ea:	621a      	str	r2, [r3, #32]
}
 80054ec:	bf00      	nop
 80054ee:	371c      	adds	r7, #28
 80054f0:	46bd      	mov	sp, r7
 80054f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054f6:	4770      	bx	lr
 80054f8:	fffeff8f 	.word	0xfffeff8f
 80054fc:	40010000 	.word	0x40010000
 8005500:	40010400 	.word	0x40010400

08005504 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005504:	b480      	push	{r7}
 8005506:	b087      	sub	sp, #28
 8005508:	af00      	add	r7, sp, #0
 800550a:	6078      	str	r0, [r7, #4]
 800550c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	6a1b      	ldr	r3, [r3, #32]
 8005512:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	6a1b      	ldr	r3, [r3, #32]
 800551e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	685b      	ldr	r3, [r3, #4]
 8005524:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800552a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800552c:	68fa      	ldr	r2, [r7, #12]
 800552e:	4b1c      	ldr	r3, [pc, #112]	@ (80055a0 <TIM_OC6_SetConfig+0x9c>)
 8005530:	4013      	ands	r3, r2
 8005532:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005534:	683b      	ldr	r3, [r7, #0]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	021b      	lsls	r3, r3, #8
 800553a:	68fa      	ldr	r2, [r7, #12]
 800553c:	4313      	orrs	r3, r2
 800553e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005540:	693b      	ldr	r3, [r7, #16]
 8005542:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8005546:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005548:	683b      	ldr	r3, [r7, #0]
 800554a:	689b      	ldr	r3, [r3, #8]
 800554c:	051b      	lsls	r3, r3, #20
 800554e:	693a      	ldr	r2, [r7, #16]
 8005550:	4313      	orrs	r3, r2
 8005552:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	4a13      	ldr	r2, [pc, #76]	@ (80055a4 <TIM_OC6_SetConfig+0xa0>)
 8005558:	4293      	cmp	r3, r2
 800555a:	d003      	beq.n	8005564 <TIM_OC6_SetConfig+0x60>
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	4a12      	ldr	r2, [pc, #72]	@ (80055a8 <TIM_OC6_SetConfig+0xa4>)
 8005560:	4293      	cmp	r3, r2
 8005562:	d109      	bne.n	8005578 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005564:	697b      	ldr	r3, [r7, #20]
 8005566:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800556a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800556c:	683b      	ldr	r3, [r7, #0]
 800556e:	695b      	ldr	r3, [r3, #20]
 8005570:	029b      	lsls	r3, r3, #10
 8005572:	697a      	ldr	r2, [r7, #20]
 8005574:	4313      	orrs	r3, r2
 8005576:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	697a      	ldr	r2, [r7, #20]
 800557c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	68fa      	ldr	r2, [r7, #12]
 8005582:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005584:	683b      	ldr	r3, [r7, #0]
 8005586:	685a      	ldr	r2, [r3, #4]
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	693a      	ldr	r2, [r7, #16]
 8005590:	621a      	str	r2, [r3, #32]
}
 8005592:	bf00      	nop
 8005594:	371c      	adds	r7, #28
 8005596:	46bd      	mov	sp, r7
 8005598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800559c:	4770      	bx	lr
 800559e:	bf00      	nop
 80055a0:	feff8fff 	.word	0xfeff8fff
 80055a4:	40010000 	.word	0x40010000
 80055a8:	40010400 	.word	0x40010400

080055ac <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80055ac:	b480      	push	{r7}
 80055ae:	b087      	sub	sp, #28
 80055b0:	af00      	add	r7, sp, #0
 80055b2:	60f8      	str	r0, [r7, #12]
 80055b4:	60b9      	str	r1, [r7, #8]
 80055b6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	6a1b      	ldr	r3, [r3, #32]
 80055bc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	6a1b      	ldr	r3, [r3, #32]
 80055c2:	f023 0201 	bic.w	r2, r3, #1
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	699b      	ldr	r3, [r3, #24]
 80055ce:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80055d0:	693b      	ldr	r3, [r7, #16]
 80055d2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80055d6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	011b      	lsls	r3, r3, #4
 80055dc:	693a      	ldr	r2, [r7, #16]
 80055de:	4313      	orrs	r3, r2
 80055e0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80055e2:	697b      	ldr	r3, [r7, #20]
 80055e4:	f023 030a 	bic.w	r3, r3, #10
 80055e8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80055ea:	697a      	ldr	r2, [r7, #20]
 80055ec:	68bb      	ldr	r3, [r7, #8]
 80055ee:	4313      	orrs	r3, r2
 80055f0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	693a      	ldr	r2, [r7, #16]
 80055f6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	697a      	ldr	r2, [r7, #20]
 80055fc:	621a      	str	r2, [r3, #32]
}
 80055fe:	bf00      	nop
 8005600:	371c      	adds	r7, #28
 8005602:	46bd      	mov	sp, r7
 8005604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005608:	4770      	bx	lr

0800560a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800560a:	b480      	push	{r7}
 800560c:	b087      	sub	sp, #28
 800560e:	af00      	add	r7, sp, #0
 8005610:	60f8      	str	r0, [r7, #12]
 8005612:	60b9      	str	r1, [r7, #8]
 8005614:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	6a1b      	ldr	r3, [r3, #32]
 800561a:	f023 0210 	bic.w	r2, r3, #16
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	699b      	ldr	r3, [r3, #24]
 8005626:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	6a1b      	ldr	r3, [r3, #32]
 800562c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800562e:	697b      	ldr	r3, [r7, #20]
 8005630:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005634:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	031b      	lsls	r3, r3, #12
 800563a:	697a      	ldr	r2, [r7, #20]
 800563c:	4313      	orrs	r3, r2
 800563e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005640:	693b      	ldr	r3, [r7, #16]
 8005642:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8005646:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005648:	68bb      	ldr	r3, [r7, #8]
 800564a:	011b      	lsls	r3, r3, #4
 800564c:	693a      	ldr	r2, [r7, #16]
 800564e:	4313      	orrs	r3, r2
 8005650:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	697a      	ldr	r2, [r7, #20]
 8005656:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	693a      	ldr	r2, [r7, #16]
 800565c:	621a      	str	r2, [r3, #32]
}
 800565e:	bf00      	nop
 8005660:	371c      	adds	r7, #28
 8005662:	46bd      	mov	sp, r7
 8005664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005668:	4770      	bx	lr

0800566a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800566a:	b480      	push	{r7}
 800566c:	b085      	sub	sp, #20
 800566e:	af00      	add	r7, sp, #0
 8005670:	6078      	str	r0, [r7, #4]
 8005672:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	689b      	ldr	r3, [r3, #8]
 8005678:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005680:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005682:	683a      	ldr	r2, [r7, #0]
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	4313      	orrs	r3, r2
 8005688:	f043 0307 	orr.w	r3, r3, #7
 800568c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	68fa      	ldr	r2, [r7, #12]
 8005692:	609a      	str	r2, [r3, #8]
}
 8005694:	bf00      	nop
 8005696:	3714      	adds	r7, #20
 8005698:	46bd      	mov	sp, r7
 800569a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800569e:	4770      	bx	lr

080056a0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80056a0:	b480      	push	{r7}
 80056a2:	b087      	sub	sp, #28
 80056a4:	af00      	add	r7, sp, #0
 80056a6:	60f8      	str	r0, [r7, #12]
 80056a8:	60b9      	str	r1, [r7, #8]
 80056aa:	607a      	str	r2, [r7, #4]
 80056ac:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	689b      	ldr	r3, [r3, #8]
 80056b2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80056b4:	697b      	ldr	r3, [r7, #20]
 80056b6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80056ba:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80056bc:	683b      	ldr	r3, [r7, #0]
 80056be:	021a      	lsls	r2, r3, #8
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	431a      	orrs	r2, r3
 80056c4:	68bb      	ldr	r3, [r7, #8]
 80056c6:	4313      	orrs	r3, r2
 80056c8:	697a      	ldr	r2, [r7, #20]
 80056ca:	4313      	orrs	r3, r2
 80056cc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	697a      	ldr	r2, [r7, #20]
 80056d2:	609a      	str	r2, [r3, #8]
}
 80056d4:	bf00      	nop
 80056d6:	371c      	adds	r7, #28
 80056d8:	46bd      	mov	sp, r7
 80056da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056de:	4770      	bx	lr

080056e0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80056e0:	b480      	push	{r7}
 80056e2:	b087      	sub	sp, #28
 80056e4:	af00      	add	r7, sp, #0
 80056e6:	60f8      	str	r0, [r7, #12]
 80056e8:	60b9      	str	r1, [r7, #8]
 80056ea:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80056ec:	68bb      	ldr	r3, [r7, #8]
 80056ee:	f003 031f 	and.w	r3, r3, #31
 80056f2:	2201      	movs	r2, #1
 80056f4:	fa02 f303 	lsl.w	r3, r2, r3
 80056f8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	6a1a      	ldr	r2, [r3, #32]
 80056fe:	697b      	ldr	r3, [r7, #20]
 8005700:	43db      	mvns	r3, r3
 8005702:	401a      	ands	r2, r3
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	6a1a      	ldr	r2, [r3, #32]
 800570c:	68bb      	ldr	r3, [r7, #8]
 800570e:	f003 031f 	and.w	r3, r3, #31
 8005712:	6879      	ldr	r1, [r7, #4]
 8005714:	fa01 f303 	lsl.w	r3, r1, r3
 8005718:	431a      	orrs	r2, r3
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	621a      	str	r2, [r3, #32]
}
 800571e:	bf00      	nop
 8005720:	371c      	adds	r7, #28
 8005722:	46bd      	mov	sp, r7
 8005724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005728:	4770      	bx	lr
	...

0800572c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800572c:	b480      	push	{r7}
 800572e:	b085      	sub	sp, #20
 8005730:	af00      	add	r7, sp, #0
 8005732:	6078      	str	r0, [r7, #4]
 8005734:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800573c:	2b01      	cmp	r3, #1
 800573e:	d101      	bne.n	8005744 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005740:	2302      	movs	r3, #2
 8005742:	e06d      	b.n	8005820 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	2201      	movs	r2, #1
 8005748:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	2202      	movs	r2, #2
 8005750:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	685b      	ldr	r3, [r3, #4]
 800575a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	689b      	ldr	r3, [r3, #8]
 8005762:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	4a30      	ldr	r2, [pc, #192]	@ (800582c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800576a:	4293      	cmp	r3, r2
 800576c:	d004      	beq.n	8005778 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	4a2f      	ldr	r2, [pc, #188]	@ (8005830 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005774:	4293      	cmp	r3, r2
 8005776:	d108      	bne.n	800578a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800577e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005780:	683b      	ldr	r3, [r7, #0]
 8005782:	685b      	ldr	r3, [r3, #4]
 8005784:	68fa      	ldr	r2, [r7, #12]
 8005786:	4313      	orrs	r3, r2
 8005788:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005790:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005792:	683b      	ldr	r3, [r7, #0]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	68fa      	ldr	r2, [r7, #12]
 8005798:	4313      	orrs	r3, r2
 800579a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	68fa      	ldr	r2, [r7, #12]
 80057a2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	4a20      	ldr	r2, [pc, #128]	@ (800582c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80057aa:	4293      	cmp	r3, r2
 80057ac:	d022      	beq.n	80057f4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80057b6:	d01d      	beq.n	80057f4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	4a1d      	ldr	r2, [pc, #116]	@ (8005834 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80057be:	4293      	cmp	r3, r2
 80057c0:	d018      	beq.n	80057f4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	4a1c      	ldr	r2, [pc, #112]	@ (8005838 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80057c8:	4293      	cmp	r3, r2
 80057ca:	d013      	beq.n	80057f4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	4a1a      	ldr	r2, [pc, #104]	@ (800583c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80057d2:	4293      	cmp	r3, r2
 80057d4:	d00e      	beq.n	80057f4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	4a15      	ldr	r2, [pc, #84]	@ (8005830 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80057dc:	4293      	cmp	r3, r2
 80057de:	d009      	beq.n	80057f4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	4a16      	ldr	r2, [pc, #88]	@ (8005840 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80057e6:	4293      	cmp	r3, r2
 80057e8:	d004      	beq.n	80057f4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	4a15      	ldr	r2, [pc, #84]	@ (8005844 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80057f0:	4293      	cmp	r3, r2
 80057f2:	d10c      	bne.n	800580e <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80057f4:	68bb      	ldr	r3, [r7, #8]
 80057f6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80057fa:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80057fc:	683b      	ldr	r3, [r7, #0]
 80057fe:	689b      	ldr	r3, [r3, #8]
 8005800:	68ba      	ldr	r2, [r7, #8]
 8005802:	4313      	orrs	r3, r2
 8005804:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	68ba      	ldr	r2, [r7, #8]
 800580c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	2201      	movs	r2, #1
 8005812:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	2200      	movs	r2, #0
 800581a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800581e:	2300      	movs	r3, #0
}
 8005820:	4618      	mov	r0, r3
 8005822:	3714      	adds	r7, #20
 8005824:	46bd      	mov	sp, r7
 8005826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800582a:	4770      	bx	lr
 800582c:	40010000 	.word	0x40010000
 8005830:	40010400 	.word	0x40010400
 8005834:	40000400 	.word	0x40000400
 8005838:	40000800 	.word	0x40000800
 800583c:	40000c00 	.word	0x40000c00
 8005840:	40014000 	.word	0x40014000
 8005844:	40001800 	.word	0x40001800

08005848 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005848:	b480      	push	{r7}
 800584a:	b083      	sub	sp, #12
 800584c:	af00      	add	r7, sp, #0
 800584e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005850:	bf00      	nop
 8005852:	370c      	adds	r7, #12
 8005854:	46bd      	mov	sp, r7
 8005856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800585a:	4770      	bx	lr

0800585c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800585c:	b480      	push	{r7}
 800585e:	b083      	sub	sp, #12
 8005860:	af00      	add	r7, sp, #0
 8005862:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005864:	bf00      	nop
 8005866:	370c      	adds	r7, #12
 8005868:	46bd      	mov	sp, r7
 800586a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800586e:	4770      	bx	lr

08005870 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005870:	b480      	push	{r7}
 8005872:	b083      	sub	sp, #12
 8005874:	af00      	add	r7, sp, #0
 8005876:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005878:	bf00      	nop
 800587a:	370c      	adds	r7, #12
 800587c:	46bd      	mov	sp, r7
 800587e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005882:	4770      	bx	lr

08005884 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005884:	b580      	push	{r7, lr}
 8005886:	b082      	sub	sp, #8
 8005888:	af00      	add	r7, sp, #0
 800588a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	2b00      	cmp	r3, #0
 8005890:	d101      	bne.n	8005896 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005892:	2301      	movs	r3, #1
 8005894:	e040      	b.n	8005918 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800589a:	2b00      	cmp	r3, #0
 800589c:	d106      	bne.n	80058ac <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	2200      	movs	r2, #0
 80058a2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80058a6:	6878      	ldr	r0, [r7, #4]
 80058a8:	f7fc fcf2 	bl	8002290 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	2224      	movs	r2, #36	@ 0x24
 80058b0:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	681a      	ldr	r2, [r3, #0]
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	f022 0201 	bic.w	r2, r2, #1
 80058c0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80058c2:	6878      	ldr	r0, [r7, #4]
 80058c4:	f000 f8b0 	bl	8005a28 <UART_SetConfig>
 80058c8:	4603      	mov	r3, r0
 80058ca:	2b01      	cmp	r3, #1
 80058cc:	d101      	bne.n	80058d2 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80058ce:	2301      	movs	r3, #1
 80058d0:	e022      	b.n	8005918 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d002      	beq.n	80058e0 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80058da:	6878      	ldr	r0, [r7, #4]
 80058dc:	f000 fb08 	bl	8005ef0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	685a      	ldr	r2, [r3, #4]
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80058ee:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	689a      	ldr	r2, [r3, #8]
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80058fe:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	681a      	ldr	r2, [r3, #0]
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	f042 0201 	orr.w	r2, r2, #1
 800590e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005910:	6878      	ldr	r0, [r7, #4]
 8005912:	f000 fb8f 	bl	8006034 <UART_CheckIdleState>
 8005916:	4603      	mov	r3, r0
}
 8005918:	4618      	mov	r0, r3
 800591a:	3708      	adds	r7, #8
 800591c:	46bd      	mov	sp, r7
 800591e:	bd80      	pop	{r7, pc}

08005920 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005920:	b580      	push	{r7, lr}
 8005922:	b08a      	sub	sp, #40	@ 0x28
 8005924:	af02      	add	r7, sp, #8
 8005926:	60f8      	str	r0, [r7, #12]
 8005928:	60b9      	str	r1, [r7, #8]
 800592a:	603b      	str	r3, [r7, #0]
 800592c:	4613      	mov	r3, r2
 800592e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005934:	2b20      	cmp	r3, #32
 8005936:	d171      	bne.n	8005a1c <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8005938:	68bb      	ldr	r3, [r7, #8]
 800593a:	2b00      	cmp	r3, #0
 800593c:	d002      	beq.n	8005944 <HAL_UART_Transmit+0x24>
 800593e:	88fb      	ldrh	r3, [r7, #6]
 8005940:	2b00      	cmp	r3, #0
 8005942:	d101      	bne.n	8005948 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8005944:	2301      	movs	r3, #1
 8005946:	e06a      	b.n	8005a1e <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	2200      	movs	r2, #0
 800594c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	2221      	movs	r2, #33	@ 0x21
 8005954:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005956:	f7fc fd75 	bl	8002444 <HAL_GetTick>
 800595a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	88fa      	ldrh	r2, [r7, #6]
 8005960:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	88fa      	ldrh	r2, [r7, #6]
 8005968:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	689b      	ldr	r3, [r3, #8]
 8005970:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005974:	d108      	bne.n	8005988 <HAL_UART_Transmit+0x68>
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	691b      	ldr	r3, [r3, #16]
 800597a:	2b00      	cmp	r3, #0
 800597c:	d104      	bne.n	8005988 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800597e:	2300      	movs	r3, #0
 8005980:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005982:	68bb      	ldr	r3, [r7, #8]
 8005984:	61bb      	str	r3, [r7, #24]
 8005986:	e003      	b.n	8005990 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8005988:	68bb      	ldr	r3, [r7, #8]
 800598a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800598c:	2300      	movs	r3, #0
 800598e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005990:	e02c      	b.n	80059ec <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005992:	683b      	ldr	r3, [r7, #0]
 8005994:	9300      	str	r3, [sp, #0]
 8005996:	697b      	ldr	r3, [r7, #20]
 8005998:	2200      	movs	r2, #0
 800599a:	2180      	movs	r1, #128	@ 0x80
 800599c:	68f8      	ldr	r0, [r7, #12]
 800599e:	f000 fb96 	bl	80060ce <UART_WaitOnFlagUntilTimeout>
 80059a2:	4603      	mov	r3, r0
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d001      	beq.n	80059ac <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 80059a8:	2303      	movs	r3, #3
 80059aa:	e038      	b.n	8005a1e <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 80059ac:	69fb      	ldr	r3, [r7, #28]
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d10b      	bne.n	80059ca <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80059b2:	69bb      	ldr	r3, [r7, #24]
 80059b4:	881b      	ldrh	r3, [r3, #0]
 80059b6:	461a      	mov	r2, r3
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80059c0:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80059c2:	69bb      	ldr	r3, [r7, #24]
 80059c4:	3302      	adds	r3, #2
 80059c6:	61bb      	str	r3, [r7, #24]
 80059c8:	e007      	b.n	80059da <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80059ca:	69fb      	ldr	r3, [r7, #28]
 80059cc:	781a      	ldrb	r2, [r3, #0]
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80059d4:	69fb      	ldr	r3, [r7, #28]
 80059d6:	3301      	adds	r3, #1
 80059d8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80059e0:	b29b      	uxth	r3, r3
 80059e2:	3b01      	subs	r3, #1
 80059e4:	b29a      	uxth	r2, r3
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80059f2:	b29b      	uxth	r3, r3
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d1cc      	bne.n	8005992 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80059f8:	683b      	ldr	r3, [r7, #0]
 80059fa:	9300      	str	r3, [sp, #0]
 80059fc:	697b      	ldr	r3, [r7, #20]
 80059fe:	2200      	movs	r2, #0
 8005a00:	2140      	movs	r1, #64	@ 0x40
 8005a02:	68f8      	ldr	r0, [r7, #12]
 8005a04:	f000 fb63 	bl	80060ce <UART_WaitOnFlagUntilTimeout>
 8005a08:	4603      	mov	r3, r0
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d001      	beq.n	8005a12 <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 8005a0e:	2303      	movs	r3, #3
 8005a10:	e005      	b.n	8005a1e <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	2220      	movs	r2, #32
 8005a16:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8005a18:	2300      	movs	r3, #0
 8005a1a:	e000      	b.n	8005a1e <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8005a1c:	2302      	movs	r3, #2
  }
}
 8005a1e:	4618      	mov	r0, r3
 8005a20:	3720      	adds	r7, #32
 8005a22:	46bd      	mov	sp, r7
 8005a24:	bd80      	pop	{r7, pc}
	...

08005a28 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005a28:	b580      	push	{r7, lr}
 8005a2a:	b088      	sub	sp, #32
 8005a2c:	af00      	add	r7, sp, #0
 8005a2e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005a30:	2300      	movs	r3, #0
 8005a32:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	689a      	ldr	r2, [r3, #8]
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	691b      	ldr	r3, [r3, #16]
 8005a3c:	431a      	orrs	r2, r3
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	695b      	ldr	r3, [r3, #20]
 8005a42:	431a      	orrs	r2, r3
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	69db      	ldr	r3, [r3, #28]
 8005a48:	4313      	orrs	r3, r2
 8005a4a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	681a      	ldr	r2, [r3, #0]
 8005a52:	4ba6      	ldr	r3, [pc, #664]	@ (8005cec <UART_SetConfig+0x2c4>)
 8005a54:	4013      	ands	r3, r2
 8005a56:	687a      	ldr	r2, [r7, #4]
 8005a58:	6812      	ldr	r2, [r2, #0]
 8005a5a:	6979      	ldr	r1, [r7, #20]
 8005a5c:	430b      	orrs	r3, r1
 8005a5e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	685b      	ldr	r3, [r3, #4]
 8005a66:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	68da      	ldr	r2, [r3, #12]
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	430a      	orrs	r2, r1
 8005a74:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	699b      	ldr	r3, [r3, #24]
 8005a7a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	6a1b      	ldr	r3, [r3, #32]
 8005a80:	697a      	ldr	r2, [r7, #20]
 8005a82:	4313      	orrs	r3, r2
 8005a84:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	689b      	ldr	r3, [r3, #8]
 8005a8c:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	697a      	ldr	r2, [r7, #20]
 8005a96:	430a      	orrs	r2, r1
 8005a98:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	4a94      	ldr	r2, [pc, #592]	@ (8005cf0 <UART_SetConfig+0x2c8>)
 8005aa0:	4293      	cmp	r3, r2
 8005aa2:	d120      	bne.n	8005ae6 <UART_SetConfig+0xbe>
 8005aa4:	4b93      	ldr	r3, [pc, #588]	@ (8005cf4 <UART_SetConfig+0x2cc>)
 8005aa6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005aaa:	f003 0303 	and.w	r3, r3, #3
 8005aae:	2b03      	cmp	r3, #3
 8005ab0:	d816      	bhi.n	8005ae0 <UART_SetConfig+0xb8>
 8005ab2:	a201      	add	r2, pc, #4	@ (adr r2, 8005ab8 <UART_SetConfig+0x90>)
 8005ab4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ab8:	08005ac9 	.word	0x08005ac9
 8005abc:	08005ad5 	.word	0x08005ad5
 8005ac0:	08005acf 	.word	0x08005acf
 8005ac4:	08005adb 	.word	0x08005adb
 8005ac8:	2301      	movs	r3, #1
 8005aca:	77fb      	strb	r3, [r7, #31]
 8005acc:	e150      	b.n	8005d70 <UART_SetConfig+0x348>
 8005ace:	2302      	movs	r3, #2
 8005ad0:	77fb      	strb	r3, [r7, #31]
 8005ad2:	e14d      	b.n	8005d70 <UART_SetConfig+0x348>
 8005ad4:	2304      	movs	r3, #4
 8005ad6:	77fb      	strb	r3, [r7, #31]
 8005ad8:	e14a      	b.n	8005d70 <UART_SetConfig+0x348>
 8005ada:	2308      	movs	r3, #8
 8005adc:	77fb      	strb	r3, [r7, #31]
 8005ade:	e147      	b.n	8005d70 <UART_SetConfig+0x348>
 8005ae0:	2310      	movs	r3, #16
 8005ae2:	77fb      	strb	r3, [r7, #31]
 8005ae4:	e144      	b.n	8005d70 <UART_SetConfig+0x348>
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	4a83      	ldr	r2, [pc, #524]	@ (8005cf8 <UART_SetConfig+0x2d0>)
 8005aec:	4293      	cmp	r3, r2
 8005aee:	d132      	bne.n	8005b56 <UART_SetConfig+0x12e>
 8005af0:	4b80      	ldr	r3, [pc, #512]	@ (8005cf4 <UART_SetConfig+0x2cc>)
 8005af2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005af6:	f003 030c 	and.w	r3, r3, #12
 8005afa:	2b0c      	cmp	r3, #12
 8005afc:	d828      	bhi.n	8005b50 <UART_SetConfig+0x128>
 8005afe:	a201      	add	r2, pc, #4	@ (adr r2, 8005b04 <UART_SetConfig+0xdc>)
 8005b00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b04:	08005b39 	.word	0x08005b39
 8005b08:	08005b51 	.word	0x08005b51
 8005b0c:	08005b51 	.word	0x08005b51
 8005b10:	08005b51 	.word	0x08005b51
 8005b14:	08005b45 	.word	0x08005b45
 8005b18:	08005b51 	.word	0x08005b51
 8005b1c:	08005b51 	.word	0x08005b51
 8005b20:	08005b51 	.word	0x08005b51
 8005b24:	08005b3f 	.word	0x08005b3f
 8005b28:	08005b51 	.word	0x08005b51
 8005b2c:	08005b51 	.word	0x08005b51
 8005b30:	08005b51 	.word	0x08005b51
 8005b34:	08005b4b 	.word	0x08005b4b
 8005b38:	2300      	movs	r3, #0
 8005b3a:	77fb      	strb	r3, [r7, #31]
 8005b3c:	e118      	b.n	8005d70 <UART_SetConfig+0x348>
 8005b3e:	2302      	movs	r3, #2
 8005b40:	77fb      	strb	r3, [r7, #31]
 8005b42:	e115      	b.n	8005d70 <UART_SetConfig+0x348>
 8005b44:	2304      	movs	r3, #4
 8005b46:	77fb      	strb	r3, [r7, #31]
 8005b48:	e112      	b.n	8005d70 <UART_SetConfig+0x348>
 8005b4a:	2308      	movs	r3, #8
 8005b4c:	77fb      	strb	r3, [r7, #31]
 8005b4e:	e10f      	b.n	8005d70 <UART_SetConfig+0x348>
 8005b50:	2310      	movs	r3, #16
 8005b52:	77fb      	strb	r3, [r7, #31]
 8005b54:	e10c      	b.n	8005d70 <UART_SetConfig+0x348>
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	4a68      	ldr	r2, [pc, #416]	@ (8005cfc <UART_SetConfig+0x2d4>)
 8005b5c:	4293      	cmp	r3, r2
 8005b5e:	d120      	bne.n	8005ba2 <UART_SetConfig+0x17a>
 8005b60:	4b64      	ldr	r3, [pc, #400]	@ (8005cf4 <UART_SetConfig+0x2cc>)
 8005b62:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005b66:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8005b6a:	2b30      	cmp	r3, #48	@ 0x30
 8005b6c:	d013      	beq.n	8005b96 <UART_SetConfig+0x16e>
 8005b6e:	2b30      	cmp	r3, #48	@ 0x30
 8005b70:	d814      	bhi.n	8005b9c <UART_SetConfig+0x174>
 8005b72:	2b20      	cmp	r3, #32
 8005b74:	d009      	beq.n	8005b8a <UART_SetConfig+0x162>
 8005b76:	2b20      	cmp	r3, #32
 8005b78:	d810      	bhi.n	8005b9c <UART_SetConfig+0x174>
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d002      	beq.n	8005b84 <UART_SetConfig+0x15c>
 8005b7e:	2b10      	cmp	r3, #16
 8005b80:	d006      	beq.n	8005b90 <UART_SetConfig+0x168>
 8005b82:	e00b      	b.n	8005b9c <UART_SetConfig+0x174>
 8005b84:	2300      	movs	r3, #0
 8005b86:	77fb      	strb	r3, [r7, #31]
 8005b88:	e0f2      	b.n	8005d70 <UART_SetConfig+0x348>
 8005b8a:	2302      	movs	r3, #2
 8005b8c:	77fb      	strb	r3, [r7, #31]
 8005b8e:	e0ef      	b.n	8005d70 <UART_SetConfig+0x348>
 8005b90:	2304      	movs	r3, #4
 8005b92:	77fb      	strb	r3, [r7, #31]
 8005b94:	e0ec      	b.n	8005d70 <UART_SetConfig+0x348>
 8005b96:	2308      	movs	r3, #8
 8005b98:	77fb      	strb	r3, [r7, #31]
 8005b9a:	e0e9      	b.n	8005d70 <UART_SetConfig+0x348>
 8005b9c:	2310      	movs	r3, #16
 8005b9e:	77fb      	strb	r3, [r7, #31]
 8005ba0:	e0e6      	b.n	8005d70 <UART_SetConfig+0x348>
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	4a56      	ldr	r2, [pc, #344]	@ (8005d00 <UART_SetConfig+0x2d8>)
 8005ba8:	4293      	cmp	r3, r2
 8005baa:	d120      	bne.n	8005bee <UART_SetConfig+0x1c6>
 8005bac:	4b51      	ldr	r3, [pc, #324]	@ (8005cf4 <UART_SetConfig+0x2cc>)
 8005bae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005bb2:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8005bb6:	2bc0      	cmp	r3, #192	@ 0xc0
 8005bb8:	d013      	beq.n	8005be2 <UART_SetConfig+0x1ba>
 8005bba:	2bc0      	cmp	r3, #192	@ 0xc0
 8005bbc:	d814      	bhi.n	8005be8 <UART_SetConfig+0x1c0>
 8005bbe:	2b80      	cmp	r3, #128	@ 0x80
 8005bc0:	d009      	beq.n	8005bd6 <UART_SetConfig+0x1ae>
 8005bc2:	2b80      	cmp	r3, #128	@ 0x80
 8005bc4:	d810      	bhi.n	8005be8 <UART_SetConfig+0x1c0>
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d002      	beq.n	8005bd0 <UART_SetConfig+0x1a8>
 8005bca:	2b40      	cmp	r3, #64	@ 0x40
 8005bcc:	d006      	beq.n	8005bdc <UART_SetConfig+0x1b4>
 8005bce:	e00b      	b.n	8005be8 <UART_SetConfig+0x1c0>
 8005bd0:	2300      	movs	r3, #0
 8005bd2:	77fb      	strb	r3, [r7, #31]
 8005bd4:	e0cc      	b.n	8005d70 <UART_SetConfig+0x348>
 8005bd6:	2302      	movs	r3, #2
 8005bd8:	77fb      	strb	r3, [r7, #31]
 8005bda:	e0c9      	b.n	8005d70 <UART_SetConfig+0x348>
 8005bdc:	2304      	movs	r3, #4
 8005bde:	77fb      	strb	r3, [r7, #31]
 8005be0:	e0c6      	b.n	8005d70 <UART_SetConfig+0x348>
 8005be2:	2308      	movs	r3, #8
 8005be4:	77fb      	strb	r3, [r7, #31]
 8005be6:	e0c3      	b.n	8005d70 <UART_SetConfig+0x348>
 8005be8:	2310      	movs	r3, #16
 8005bea:	77fb      	strb	r3, [r7, #31]
 8005bec:	e0c0      	b.n	8005d70 <UART_SetConfig+0x348>
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	4a44      	ldr	r2, [pc, #272]	@ (8005d04 <UART_SetConfig+0x2dc>)
 8005bf4:	4293      	cmp	r3, r2
 8005bf6:	d125      	bne.n	8005c44 <UART_SetConfig+0x21c>
 8005bf8:	4b3e      	ldr	r3, [pc, #248]	@ (8005cf4 <UART_SetConfig+0x2cc>)
 8005bfa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005bfe:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005c02:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005c06:	d017      	beq.n	8005c38 <UART_SetConfig+0x210>
 8005c08:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005c0c:	d817      	bhi.n	8005c3e <UART_SetConfig+0x216>
 8005c0e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005c12:	d00b      	beq.n	8005c2c <UART_SetConfig+0x204>
 8005c14:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005c18:	d811      	bhi.n	8005c3e <UART_SetConfig+0x216>
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d003      	beq.n	8005c26 <UART_SetConfig+0x1fe>
 8005c1e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005c22:	d006      	beq.n	8005c32 <UART_SetConfig+0x20a>
 8005c24:	e00b      	b.n	8005c3e <UART_SetConfig+0x216>
 8005c26:	2300      	movs	r3, #0
 8005c28:	77fb      	strb	r3, [r7, #31]
 8005c2a:	e0a1      	b.n	8005d70 <UART_SetConfig+0x348>
 8005c2c:	2302      	movs	r3, #2
 8005c2e:	77fb      	strb	r3, [r7, #31]
 8005c30:	e09e      	b.n	8005d70 <UART_SetConfig+0x348>
 8005c32:	2304      	movs	r3, #4
 8005c34:	77fb      	strb	r3, [r7, #31]
 8005c36:	e09b      	b.n	8005d70 <UART_SetConfig+0x348>
 8005c38:	2308      	movs	r3, #8
 8005c3a:	77fb      	strb	r3, [r7, #31]
 8005c3c:	e098      	b.n	8005d70 <UART_SetConfig+0x348>
 8005c3e:	2310      	movs	r3, #16
 8005c40:	77fb      	strb	r3, [r7, #31]
 8005c42:	e095      	b.n	8005d70 <UART_SetConfig+0x348>
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	4a2f      	ldr	r2, [pc, #188]	@ (8005d08 <UART_SetConfig+0x2e0>)
 8005c4a:	4293      	cmp	r3, r2
 8005c4c:	d125      	bne.n	8005c9a <UART_SetConfig+0x272>
 8005c4e:	4b29      	ldr	r3, [pc, #164]	@ (8005cf4 <UART_SetConfig+0x2cc>)
 8005c50:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005c54:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8005c58:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005c5c:	d017      	beq.n	8005c8e <UART_SetConfig+0x266>
 8005c5e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005c62:	d817      	bhi.n	8005c94 <UART_SetConfig+0x26c>
 8005c64:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005c68:	d00b      	beq.n	8005c82 <UART_SetConfig+0x25a>
 8005c6a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005c6e:	d811      	bhi.n	8005c94 <UART_SetConfig+0x26c>
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d003      	beq.n	8005c7c <UART_SetConfig+0x254>
 8005c74:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005c78:	d006      	beq.n	8005c88 <UART_SetConfig+0x260>
 8005c7a:	e00b      	b.n	8005c94 <UART_SetConfig+0x26c>
 8005c7c:	2301      	movs	r3, #1
 8005c7e:	77fb      	strb	r3, [r7, #31]
 8005c80:	e076      	b.n	8005d70 <UART_SetConfig+0x348>
 8005c82:	2302      	movs	r3, #2
 8005c84:	77fb      	strb	r3, [r7, #31]
 8005c86:	e073      	b.n	8005d70 <UART_SetConfig+0x348>
 8005c88:	2304      	movs	r3, #4
 8005c8a:	77fb      	strb	r3, [r7, #31]
 8005c8c:	e070      	b.n	8005d70 <UART_SetConfig+0x348>
 8005c8e:	2308      	movs	r3, #8
 8005c90:	77fb      	strb	r3, [r7, #31]
 8005c92:	e06d      	b.n	8005d70 <UART_SetConfig+0x348>
 8005c94:	2310      	movs	r3, #16
 8005c96:	77fb      	strb	r3, [r7, #31]
 8005c98:	e06a      	b.n	8005d70 <UART_SetConfig+0x348>
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	4a1b      	ldr	r2, [pc, #108]	@ (8005d0c <UART_SetConfig+0x2e4>)
 8005ca0:	4293      	cmp	r3, r2
 8005ca2:	d138      	bne.n	8005d16 <UART_SetConfig+0x2ee>
 8005ca4:	4b13      	ldr	r3, [pc, #76]	@ (8005cf4 <UART_SetConfig+0x2cc>)
 8005ca6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005caa:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8005cae:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005cb2:	d017      	beq.n	8005ce4 <UART_SetConfig+0x2bc>
 8005cb4:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005cb8:	d82a      	bhi.n	8005d10 <UART_SetConfig+0x2e8>
 8005cba:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005cbe:	d00b      	beq.n	8005cd8 <UART_SetConfig+0x2b0>
 8005cc0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005cc4:	d824      	bhi.n	8005d10 <UART_SetConfig+0x2e8>
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d003      	beq.n	8005cd2 <UART_SetConfig+0x2aa>
 8005cca:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005cce:	d006      	beq.n	8005cde <UART_SetConfig+0x2b6>
 8005cd0:	e01e      	b.n	8005d10 <UART_SetConfig+0x2e8>
 8005cd2:	2300      	movs	r3, #0
 8005cd4:	77fb      	strb	r3, [r7, #31]
 8005cd6:	e04b      	b.n	8005d70 <UART_SetConfig+0x348>
 8005cd8:	2302      	movs	r3, #2
 8005cda:	77fb      	strb	r3, [r7, #31]
 8005cdc:	e048      	b.n	8005d70 <UART_SetConfig+0x348>
 8005cde:	2304      	movs	r3, #4
 8005ce0:	77fb      	strb	r3, [r7, #31]
 8005ce2:	e045      	b.n	8005d70 <UART_SetConfig+0x348>
 8005ce4:	2308      	movs	r3, #8
 8005ce6:	77fb      	strb	r3, [r7, #31]
 8005ce8:	e042      	b.n	8005d70 <UART_SetConfig+0x348>
 8005cea:	bf00      	nop
 8005cec:	efff69f3 	.word	0xefff69f3
 8005cf0:	40011000 	.word	0x40011000
 8005cf4:	40023800 	.word	0x40023800
 8005cf8:	40004400 	.word	0x40004400
 8005cfc:	40004800 	.word	0x40004800
 8005d00:	40004c00 	.word	0x40004c00
 8005d04:	40005000 	.word	0x40005000
 8005d08:	40011400 	.word	0x40011400
 8005d0c:	40007800 	.word	0x40007800
 8005d10:	2310      	movs	r3, #16
 8005d12:	77fb      	strb	r3, [r7, #31]
 8005d14:	e02c      	b.n	8005d70 <UART_SetConfig+0x348>
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	4a72      	ldr	r2, [pc, #456]	@ (8005ee4 <UART_SetConfig+0x4bc>)
 8005d1c:	4293      	cmp	r3, r2
 8005d1e:	d125      	bne.n	8005d6c <UART_SetConfig+0x344>
 8005d20:	4b71      	ldr	r3, [pc, #452]	@ (8005ee8 <UART_SetConfig+0x4c0>)
 8005d22:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005d26:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8005d2a:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8005d2e:	d017      	beq.n	8005d60 <UART_SetConfig+0x338>
 8005d30:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8005d34:	d817      	bhi.n	8005d66 <UART_SetConfig+0x33e>
 8005d36:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005d3a:	d00b      	beq.n	8005d54 <UART_SetConfig+0x32c>
 8005d3c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005d40:	d811      	bhi.n	8005d66 <UART_SetConfig+0x33e>
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d003      	beq.n	8005d4e <UART_SetConfig+0x326>
 8005d46:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005d4a:	d006      	beq.n	8005d5a <UART_SetConfig+0x332>
 8005d4c:	e00b      	b.n	8005d66 <UART_SetConfig+0x33e>
 8005d4e:	2300      	movs	r3, #0
 8005d50:	77fb      	strb	r3, [r7, #31]
 8005d52:	e00d      	b.n	8005d70 <UART_SetConfig+0x348>
 8005d54:	2302      	movs	r3, #2
 8005d56:	77fb      	strb	r3, [r7, #31]
 8005d58:	e00a      	b.n	8005d70 <UART_SetConfig+0x348>
 8005d5a:	2304      	movs	r3, #4
 8005d5c:	77fb      	strb	r3, [r7, #31]
 8005d5e:	e007      	b.n	8005d70 <UART_SetConfig+0x348>
 8005d60:	2308      	movs	r3, #8
 8005d62:	77fb      	strb	r3, [r7, #31]
 8005d64:	e004      	b.n	8005d70 <UART_SetConfig+0x348>
 8005d66:	2310      	movs	r3, #16
 8005d68:	77fb      	strb	r3, [r7, #31]
 8005d6a:	e001      	b.n	8005d70 <UART_SetConfig+0x348>
 8005d6c:	2310      	movs	r3, #16
 8005d6e:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	69db      	ldr	r3, [r3, #28]
 8005d74:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005d78:	d15b      	bne.n	8005e32 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8005d7a:	7ffb      	ldrb	r3, [r7, #31]
 8005d7c:	2b08      	cmp	r3, #8
 8005d7e:	d828      	bhi.n	8005dd2 <UART_SetConfig+0x3aa>
 8005d80:	a201      	add	r2, pc, #4	@ (adr r2, 8005d88 <UART_SetConfig+0x360>)
 8005d82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d86:	bf00      	nop
 8005d88:	08005dad 	.word	0x08005dad
 8005d8c:	08005db5 	.word	0x08005db5
 8005d90:	08005dbd 	.word	0x08005dbd
 8005d94:	08005dd3 	.word	0x08005dd3
 8005d98:	08005dc3 	.word	0x08005dc3
 8005d9c:	08005dd3 	.word	0x08005dd3
 8005da0:	08005dd3 	.word	0x08005dd3
 8005da4:	08005dd3 	.word	0x08005dd3
 8005da8:	08005dcb 	.word	0x08005dcb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005dac:	f7fd fb8e 	bl	80034cc <HAL_RCC_GetPCLK1Freq>
 8005db0:	61b8      	str	r0, [r7, #24]
        break;
 8005db2:	e013      	b.n	8005ddc <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005db4:	f7fd fb9e 	bl	80034f4 <HAL_RCC_GetPCLK2Freq>
 8005db8:	61b8      	str	r0, [r7, #24]
        break;
 8005dba:	e00f      	b.n	8005ddc <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005dbc:	4b4b      	ldr	r3, [pc, #300]	@ (8005eec <UART_SetConfig+0x4c4>)
 8005dbe:	61bb      	str	r3, [r7, #24]
        break;
 8005dc0:	e00c      	b.n	8005ddc <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005dc2:	f7fd fa71 	bl	80032a8 <HAL_RCC_GetSysClockFreq>
 8005dc6:	61b8      	str	r0, [r7, #24]
        break;
 8005dc8:	e008      	b.n	8005ddc <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005dca:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005dce:	61bb      	str	r3, [r7, #24]
        break;
 8005dd0:	e004      	b.n	8005ddc <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8005dd2:	2300      	movs	r3, #0
 8005dd4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005dd6:	2301      	movs	r3, #1
 8005dd8:	77bb      	strb	r3, [r7, #30]
        break;
 8005dda:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005ddc:	69bb      	ldr	r3, [r7, #24]
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d074      	beq.n	8005ecc <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005de2:	69bb      	ldr	r3, [r7, #24]
 8005de4:	005a      	lsls	r2, r3, #1
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	685b      	ldr	r3, [r3, #4]
 8005dea:	085b      	lsrs	r3, r3, #1
 8005dec:	441a      	add	r2, r3
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	685b      	ldr	r3, [r3, #4]
 8005df2:	fbb2 f3f3 	udiv	r3, r2, r3
 8005df6:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005df8:	693b      	ldr	r3, [r7, #16]
 8005dfa:	2b0f      	cmp	r3, #15
 8005dfc:	d916      	bls.n	8005e2c <UART_SetConfig+0x404>
 8005dfe:	693b      	ldr	r3, [r7, #16]
 8005e00:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005e04:	d212      	bcs.n	8005e2c <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005e06:	693b      	ldr	r3, [r7, #16]
 8005e08:	b29b      	uxth	r3, r3
 8005e0a:	f023 030f 	bic.w	r3, r3, #15
 8005e0e:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005e10:	693b      	ldr	r3, [r7, #16]
 8005e12:	085b      	lsrs	r3, r3, #1
 8005e14:	b29b      	uxth	r3, r3
 8005e16:	f003 0307 	and.w	r3, r3, #7
 8005e1a:	b29a      	uxth	r2, r3
 8005e1c:	89fb      	ldrh	r3, [r7, #14]
 8005e1e:	4313      	orrs	r3, r2
 8005e20:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	89fa      	ldrh	r2, [r7, #14]
 8005e28:	60da      	str	r2, [r3, #12]
 8005e2a:	e04f      	b.n	8005ecc <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8005e2c:	2301      	movs	r3, #1
 8005e2e:	77bb      	strb	r3, [r7, #30]
 8005e30:	e04c      	b.n	8005ecc <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005e32:	7ffb      	ldrb	r3, [r7, #31]
 8005e34:	2b08      	cmp	r3, #8
 8005e36:	d828      	bhi.n	8005e8a <UART_SetConfig+0x462>
 8005e38:	a201      	add	r2, pc, #4	@ (adr r2, 8005e40 <UART_SetConfig+0x418>)
 8005e3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e3e:	bf00      	nop
 8005e40:	08005e65 	.word	0x08005e65
 8005e44:	08005e6d 	.word	0x08005e6d
 8005e48:	08005e75 	.word	0x08005e75
 8005e4c:	08005e8b 	.word	0x08005e8b
 8005e50:	08005e7b 	.word	0x08005e7b
 8005e54:	08005e8b 	.word	0x08005e8b
 8005e58:	08005e8b 	.word	0x08005e8b
 8005e5c:	08005e8b 	.word	0x08005e8b
 8005e60:	08005e83 	.word	0x08005e83
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005e64:	f7fd fb32 	bl	80034cc <HAL_RCC_GetPCLK1Freq>
 8005e68:	61b8      	str	r0, [r7, #24]
        break;
 8005e6a:	e013      	b.n	8005e94 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005e6c:	f7fd fb42 	bl	80034f4 <HAL_RCC_GetPCLK2Freq>
 8005e70:	61b8      	str	r0, [r7, #24]
        break;
 8005e72:	e00f      	b.n	8005e94 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005e74:	4b1d      	ldr	r3, [pc, #116]	@ (8005eec <UART_SetConfig+0x4c4>)
 8005e76:	61bb      	str	r3, [r7, #24]
        break;
 8005e78:	e00c      	b.n	8005e94 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005e7a:	f7fd fa15 	bl	80032a8 <HAL_RCC_GetSysClockFreq>
 8005e7e:	61b8      	str	r0, [r7, #24]
        break;
 8005e80:	e008      	b.n	8005e94 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005e82:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005e86:	61bb      	str	r3, [r7, #24]
        break;
 8005e88:	e004      	b.n	8005e94 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8005e8a:	2300      	movs	r3, #0
 8005e8c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005e8e:	2301      	movs	r3, #1
 8005e90:	77bb      	strb	r3, [r7, #30]
        break;
 8005e92:	bf00      	nop
    }

    if (pclk != 0U)
 8005e94:	69bb      	ldr	r3, [r7, #24]
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d018      	beq.n	8005ecc <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	685b      	ldr	r3, [r3, #4]
 8005e9e:	085a      	lsrs	r2, r3, #1
 8005ea0:	69bb      	ldr	r3, [r7, #24]
 8005ea2:	441a      	add	r2, r3
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	685b      	ldr	r3, [r3, #4]
 8005ea8:	fbb2 f3f3 	udiv	r3, r2, r3
 8005eac:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005eae:	693b      	ldr	r3, [r7, #16]
 8005eb0:	2b0f      	cmp	r3, #15
 8005eb2:	d909      	bls.n	8005ec8 <UART_SetConfig+0x4a0>
 8005eb4:	693b      	ldr	r3, [r7, #16]
 8005eb6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005eba:	d205      	bcs.n	8005ec8 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005ebc:	693b      	ldr	r3, [r7, #16]
 8005ebe:	b29a      	uxth	r2, r3
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	60da      	str	r2, [r3, #12]
 8005ec6:	e001      	b.n	8005ecc <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8005ec8:	2301      	movs	r3, #1
 8005eca:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	2200      	movs	r2, #0
 8005ed0:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	2200      	movs	r2, #0
 8005ed6:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8005ed8:	7fbb      	ldrb	r3, [r7, #30]
}
 8005eda:	4618      	mov	r0, r3
 8005edc:	3720      	adds	r7, #32
 8005ede:	46bd      	mov	sp, r7
 8005ee0:	bd80      	pop	{r7, pc}
 8005ee2:	bf00      	nop
 8005ee4:	40007c00 	.word	0x40007c00
 8005ee8:	40023800 	.word	0x40023800
 8005eec:	00f42400 	.word	0x00f42400

08005ef0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005ef0:	b480      	push	{r7}
 8005ef2:	b083      	sub	sp, #12
 8005ef4:	af00      	add	r7, sp, #0
 8005ef6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005efc:	f003 0301 	and.w	r3, r3, #1
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d00a      	beq.n	8005f1a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	685b      	ldr	r3, [r3, #4]
 8005f0a:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	430a      	orrs	r2, r1
 8005f18:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f1e:	f003 0302 	and.w	r3, r3, #2
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d00a      	beq.n	8005f3c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	685b      	ldr	r3, [r3, #4]
 8005f2c:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	430a      	orrs	r2, r1
 8005f3a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f40:	f003 0304 	and.w	r3, r3, #4
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d00a      	beq.n	8005f5e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	685b      	ldr	r3, [r3, #4]
 8005f4e:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	430a      	orrs	r2, r1
 8005f5c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f62:	f003 0308 	and.w	r3, r3, #8
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d00a      	beq.n	8005f80 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	685b      	ldr	r3, [r3, #4]
 8005f70:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	430a      	orrs	r2, r1
 8005f7e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f84:	f003 0310 	and.w	r3, r3, #16
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d00a      	beq.n	8005fa2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	689b      	ldr	r3, [r3, #8]
 8005f92:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	430a      	orrs	r2, r1
 8005fa0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005fa6:	f003 0320 	and.w	r3, r3, #32
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d00a      	beq.n	8005fc4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	689b      	ldr	r3, [r3, #8]
 8005fb4:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	430a      	orrs	r2, r1
 8005fc2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005fc8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d01a      	beq.n	8006006 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	685b      	ldr	r3, [r3, #4]
 8005fd6:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	430a      	orrs	r2, r1
 8005fe4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005fea:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005fee:	d10a      	bne.n	8006006 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	685b      	ldr	r3, [r3, #4]
 8005ff6:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	430a      	orrs	r2, r1
 8006004:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800600a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800600e:	2b00      	cmp	r3, #0
 8006010:	d00a      	beq.n	8006028 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	685b      	ldr	r3, [r3, #4]
 8006018:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	430a      	orrs	r2, r1
 8006026:	605a      	str	r2, [r3, #4]
  }
}
 8006028:	bf00      	nop
 800602a:	370c      	adds	r7, #12
 800602c:	46bd      	mov	sp, r7
 800602e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006032:	4770      	bx	lr

08006034 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006034:	b580      	push	{r7, lr}
 8006036:	b086      	sub	sp, #24
 8006038:	af02      	add	r7, sp, #8
 800603a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	2200      	movs	r2, #0
 8006040:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006044:	f7fc f9fe 	bl	8002444 <HAL_GetTick>
 8006048:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	f003 0308 	and.w	r3, r3, #8
 8006054:	2b08      	cmp	r3, #8
 8006056:	d10e      	bne.n	8006076 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006058:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800605c:	9300      	str	r3, [sp, #0]
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	2200      	movs	r2, #0
 8006062:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8006066:	6878      	ldr	r0, [r7, #4]
 8006068:	f000 f831 	bl	80060ce <UART_WaitOnFlagUntilTimeout>
 800606c:	4603      	mov	r3, r0
 800606e:	2b00      	cmp	r3, #0
 8006070:	d001      	beq.n	8006076 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006072:	2303      	movs	r3, #3
 8006074:	e027      	b.n	80060c6 <UART_CheckIdleState+0x92>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	f003 0304 	and.w	r3, r3, #4
 8006080:	2b04      	cmp	r3, #4
 8006082:	d10e      	bne.n	80060a2 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006084:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006088:	9300      	str	r3, [sp, #0]
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	2200      	movs	r2, #0
 800608e:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8006092:	6878      	ldr	r0, [r7, #4]
 8006094:	f000 f81b 	bl	80060ce <UART_WaitOnFlagUntilTimeout>
 8006098:	4603      	mov	r3, r0
 800609a:	2b00      	cmp	r3, #0
 800609c:	d001      	beq.n	80060a2 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800609e:	2303      	movs	r3, #3
 80060a0:	e011      	b.n	80060c6 <UART_CheckIdleState+0x92>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	2220      	movs	r2, #32
 80060a6:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	2220      	movs	r2, #32
 80060ac:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	2200      	movs	r2, #0
 80060b4:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	2200      	movs	r2, #0
 80060ba:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	2200      	movs	r2, #0
 80060c0:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 80060c4:	2300      	movs	r3, #0
}
 80060c6:	4618      	mov	r0, r3
 80060c8:	3710      	adds	r7, #16
 80060ca:	46bd      	mov	sp, r7
 80060cc:	bd80      	pop	{r7, pc}

080060ce <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80060ce:	b580      	push	{r7, lr}
 80060d0:	b09c      	sub	sp, #112	@ 0x70
 80060d2:	af00      	add	r7, sp, #0
 80060d4:	60f8      	str	r0, [r7, #12]
 80060d6:	60b9      	str	r1, [r7, #8]
 80060d8:	603b      	str	r3, [r7, #0]
 80060da:	4613      	mov	r3, r2
 80060dc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80060de:	e0a7      	b.n	8006230 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80060e0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80060e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80060e6:	f000 80a3 	beq.w	8006230 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80060ea:	f7fc f9ab 	bl	8002444 <HAL_GetTick>
 80060ee:	4602      	mov	r2, r0
 80060f0:	683b      	ldr	r3, [r7, #0]
 80060f2:	1ad3      	subs	r3, r2, r3
 80060f4:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 80060f6:	429a      	cmp	r2, r3
 80060f8:	d302      	bcc.n	8006100 <UART_WaitOnFlagUntilTimeout+0x32>
 80060fa:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	d13f      	bne.n	8006180 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	653b      	str	r3, [r7, #80]	@ 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006106:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006108:	e853 3f00 	ldrex	r3, [r3]
 800610c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800610e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006110:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 8006114:	667b      	str	r3, [r7, #100]	@ 0x64
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	461a      	mov	r2, r3
 800611c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800611e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006120:	65ba      	str	r2, [r7, #88]	@ 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006122:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8006124:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8006126:	e841 2300 	strex	r3, r2, [r1]
 800612a:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 800612c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800612e:	2b00      	cmp	r3, #0
 8006130:	d1e6      	bne.n	8006100 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	3308      	adds	r3, #8
 8006138:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800613a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800613c:	e853 3f00 	ldrex	r3, [r3]
 8006140:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006142:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006144:	f023 0301 	bic.w	r3, r3, #1
 8006148:	663b      	str	r3, [r7, #96]	@ 0x60
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	3308      	adds	r3, #8
 8006150:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8006152:	64ba      	str	r2, [r7, #72]	@ 0x48
 8006154:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006156:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8006158:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800615a:	e841 2300 	strex	r3, r2, [r1]
 800615e:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8006160:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006162:	2b00      	cmp	r3, #0
 8006164:	d1e5      	bne.n	8006132 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	2220      	movs	r2, #32
 800616a:	67da      	str	r2, [r3, #124]	@ 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	2220      	movs	r2, #32
 8006170:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

        __HAL_UNLOCK(huart);
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	2200      	movs	r2, #0
 8006178:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

        return HAL_TIMEOUT;
 800617c:	2303      	movs	r3, #3
 800617e:	e068      	b.n	8006252 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	f003 0304 	and.w	r3, r3, #4
 800618a:	2b00      	cmp	r3, #0
 800618c:	d050      	beq.n	8006230 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	69db      	ldr	r3, [r3, #28]
 8006194:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006198:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800619c:	d148      	bne.n	8006230 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80061a6:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80061b0:	e853 3f00 	ldrex	r3, [r3]
 80061b4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80061b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061b8:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 80061bc:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	461a      	mov	r2, r3
 80061c4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80061c6:	637b      	str	r3, [r7, #52]	@ 0x34
 80061c8:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061ca:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80061cc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80061ce:	e841 2300 	strex	r3, r2, [r1]
 80061d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 80061d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d1e6      	bne.n	80061a8 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	3308      	adds	r3, #8
 80061e0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061e2:	697b      	ldr	r3, [r7, #20]
 80061e4:	e853 3f00 	ldrex	r3, [r3]
 80061e8:	613b      	str	r3, [r7, #16]
   return(result);
 80061ea:	693b      	ldr	r3, [r7, #16]
 80061ec:	f023 0301 	bic.w	r3, r3, #1
 80061f0:	66bb      	str	r3, [r7, #104]	@ 0x68
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	3308      	adds	r3, #8
 80061f8:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 80061fa:	623a      	str	r2, [r7, #32]
 80061fc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061fe:	69f9      	ldr	r1, [r7, #28]
 8006200:	6a3a      	ldr	r2, [r7, #32]
 8006202:	e841 2300 	strex	r3, r2, [r1]
 8006206:	61bb      	str	r3, [r7, #24]
   return(result);
 8006208:	69bb      	ldr	r3, [r7, #24]
 800620a:	2b00      	cmp	r3, #0
 800620c:	d1e5      	bne.n	80061da <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	2220      	movs	r2, #32
 8006212:	67da      	str	r2, [r3, #124]	@ 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	2220      	movs	r2, #32
 8006218:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	2220      	movs	r2, #32
 8006220:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	2200      	movs	r2, #0
 8006228:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 800622c:	2303      	movs	r3, #3
 800622e:	e010      	b.n	8006252 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	69da      	ldr	r2, [r3, #28]
 8006236:	68bb      	ldr	r3, [r7, #8]
 8006238:	4013      	ands	r3, r2
 800623a:	68ba      	ldr	r2, [r7, #8]
 800623c:	429a      	cmp	r2, r3
 800623e:	bf0c      	ite	eq
 8006240:	2301      	moveq	r3, #1
 8006242:	2300      	movne	r3, #0
 8006244:	b2db      	uxtb	r3, r3
 8006246:	461a      	mov	r2, r3
 8006248:	79fb      	ldrb	r3, [r7, #7]
 800624a:	429a      	cmp	r2, r3
 800624c:	f43f af48 	beq.w	80060e0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006250:	2300      	movs	r3, #0
}
 8006252:	4618      	mov	r0, r3
 8006254:	3770      	adds	r7, #112	@ 0x70
 8006256:	46bd      	mov	sp, r7
 8006258:	bd80      	pop	{r7, pc}

0800625a <_vsniprintf_r>:
 800625a:	b530      	push	{r4, r5, lr}
 800625c:	4614      	mov	r4, r2
 800625e:	2c00      	cmp	r4, #0
 8006260:	b09b      	sub	sp, #108	@ 0x6c
 8006262:	4605      	mov	r5, r0
 8006264:	461a      	mov	r2, r3
 8006266:	da05      	bge.n	8006274 <_vsniprintf_r+0x1a>
 8006268:	238b      	movs	r3, #139	@ 0x8b
 800626a:	6003      	str	r3, [r0, #0]
 800626c:	f04f 30ff 	mov.w	r0, #4294967295
 8006270:	b01b      	add	sp, #108	@ 0x6c
 8006272:	bd30      	pop	{r4, r5, pc}
 8006274:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8006278:	f8ad 300c 	strh.w	r3, [sp, #12]
 800627c:	f04f 0300 	mov.w	r3, #0
 8006280:	9319      	str	r3, [sp, #100]	@ 0x64
 8006282:	bf14      	ite	ne
 8006284:	f104 33ff 	addne.w	r3, r4, #4294967295
 8006288:	4623      	moveq	r3, r4
 800628a:	9302      	str	r3, [sp, #8]
 800628c:	9305      	str	r3, [sp, #20]
 800628e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8006292:	9100      	str	r1, [sp, #0]
 8006294:	9104      	str	r1, [sp, #16]
 8006296:	f8ad 300e 	strh.w	r3, [sp, #14]
 800629a:	4669      	mov	r1, sp
 800629c:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 800629e:	f000 f9a1 	bl	80065e4 <_svfiprintf_r>
 80062a2:	1c43      	adds	r3, r0, #1
 80062a4:	bfbc      	itt	lt
 80062a6:	238b      	movlt	r3, #139	@ 0x8b
 80062a8:	602b      	strlt	r3, [r5, #0]
 80062aa:	2c00      	cmp	r4, #0
 80062ac:	d0e0      	beq.n	8006270 <_vsniprintf_r+0x16>
 80062ae:	9b00      	ldr	r3, [sp, #0]
 80062b0:	2200      	movs	r2, #0
 80062b2:	701a      	strb	r2, [r3, #0]
 80062b4:	e7dc      	b.n	8006270 <_vsniprintf_r+0x16>
	...

080062b8 <vsniprintf>:
 80062b8:	b507      	push	{r0, r1, r2, lr}
 80062ba:	9300      	str	r3, [sp, #0]
 80062bc:	4613      	mov	r3, r2
 80062be:	460a      	mov	r2, r1
 80062c0:	4601      	mov	r1, r0
 80062c2:	4803      	ldr	r0, [pc, #12]	@ (80062d0 <vsniprintf+0x18>)
 80062c4:	6800      	ldr	r0, [r0, #0]
 80062c6:	f7ff ffc8 	bl	800625a <_vsniprintf_r>
 80062ca:	b003      	add	sp, #12
 80062cc:	f85d fb04 	ldr.w	pc, [sp], #4
 80062d0:	20000024 	.word	0x20000024

080062d4 <memset>:
 80062d4:	4402      	add	r2, r0
 80062d6:	4603      	mov	r3, r0
 80062d8:	4293      	cmp	r3, r2
 80062da:	d100      	bne.n	80062de <memset+0xa>
 80062dc:	4770      	bx	lr
 80062de:	f803 1b01 	strb.w	r1, [r3], #1
 80062e2:	e7f9      	b.n	80062d8 <memset+0x4>

080062e4 <__errno>:
 80062e4:	4b01      	ldr	r3, [pc, #4]	@ (80062ec <__errno+0x8>)
 80062e6:	6818      	ldr	r0, [r3, #0]
 80062e8:	4770      	bx	lr
 80062ea:	bf00      	nop
 80062ec:	20000024 	.word	0x20000024

080062f0 <__libc_init_array>:
 80062f0:	b570      	push	{r4, r5, r6, lr}
 80062f2:	4d0d      	ldr	r5, [pc, #52]	@ (8006328 <__libc_init_array+0x38>)
 80062f4:	4c0d      	ldr	r4, [pc, #52]	@ (800632c <__libc_init_array+0x3c>)
 80062f6:	1b64      	subs	r4, r4, r5
 80062f8:	10a4      	asrs	r4, r4, #2
 80062fa:	2600      	movs	r6, #0
 80062fc:	42a6      	cmp	r6, r4
 80062fe:	d109      	bne.n	8006314 <__libc_init_array+0x24>
 8006300:	4d0b      	ldr	r5, [pc, #44]	@ (8006330 <__libc_init_array+0x40>)
 8006302:	4c0c      	ldr	r4, [pc, #48]	@ (8006334 <__libc_init_array+0x44>)
 8006304:	f000 fc64 	bl	8006bd0 <_init>
 8006308:	1b64      	subs	r4, r4, r5
 800630a:	10a4      	asrs	r4, r4, #2
 800630c:	2600      	movs	r6, #0
 800630e:	42a6      	cmp	r6, r4
 8006310:	d105      	bne.n	800631e <__libc_init_array+0x2e>
 8006312:	bd70      	pop	{r4, r5, r6, pc}
 8006314:	f855 3b04 	ldr.w	r3, [r5], #4
 8006318:	4798      	blx	r3
 800631a:	3601      	adds	r6, #1
 800631c:	e7ee      	b.n	80062fc <__libc_init_array+0xc>
 800631e:	f855 3b04 	ldr.w	r3, [r5], #4
 8006322:	4798      	blx	r3
 8006324:	3601      	adds	r6, #1
 8006326:	e7f2      	b.n	800630e <__libc_init_array+0x1e>
 8006328:	08007bf8 	.word	0x08007bf8
 800632c:	08007bf8 	.word	0x08007bf8
 8006330:	08007bf8 	.word	0x08007bf8
 8006334:	08007bfc 	.word	0x08007bfc

08006338 <__retarget_lock_acquire_recursive>:
 8006338:	4770      	bx	lr

0800633a <__retarget_lock_release_recursive>:
 800633a:	4770      	bx	lr

0800633c <_free_r>:
 800633c:	b538      	push	{r3, r4, r5, lr}
 800633e:	4605      	mov	r5, r0
 8006340:	2900      	cmp	r1, #0
 8006342:	d041      	beq.n	80063c8 <_free_r+0x8c>
 8006344:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006348:	1f0c      	subs	r4, r1, #4
 800634a:	2b00      	cmp	r3, #0
 800634c:	bfb8      	it	lt
 800634e:	18e4      	addlt	r4, r4, r3
 8006350:	f000 f8e0 	bl	8006514 <__malloc_lock>
 8006354:	4a1d      	ldr	r2, [pc, #116]	@ (80063cc <_free_r+0x90>)
 8006356:	6813      	ldr	r3, [r2, #0]
 8006358:	b933      	cbnz	r3, 8006368 <_free_r+0x2c>
 800635a:	6063      	str	r3, [r4, #4]
 800635c:	6014      	str	r4, [r2, #0]
 800635e:	4628      	mov	r0, r5
 8006360:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006364:	f000 b8dc 	b.w	8006520 <__malloc_unlock>
 8006368:	42a3      	cmp	r3, r4
 800636a:	d908      	bls.n	800637e <_free_r+0x42>
 800636c:	6820      	ldr	r0, [r4, #0]
 800636e:	1821      	adds	r1, r4, r0
 8006370:	428b      	cmp	r3, r1
 8006372:	bf01      	itttt	eq
 8006374:	6819      	ldreq	r1, [r3, #0]
 8006376:	685b      	ldreq	r3, [r3, #4]
 8006378:	1809      	addeq	r1, r1, r0
 800637a:	6021      	streq	r1, [r4, #0]
 800637c:	e7ed      	b.n	800635a <_free_r+0x1e>
 800637e:	461a      	mov	r2, r3
 8006380:	685b      	ldr	r3, [r3, #4]
 8006382:	b10b      	cbz	r3, 8006388 <_free_r+0x4c>
 8006384:	42a3      	cmp	r3, r4
 8006386:	d9fa      	bls.n	800637e <_free_r+0x42>
 8006388:	6811      	ldr	r1, [r2, #0]
 800638a:	1850      	adds	r0, r2, r1
 800638c:	42a0      	cmp	r0, r4
 800638e:	d10b      	bne.n	80063a8 <_free_r+0x6c>
 8006390:	6820      	ldr	r0, [r4, #0]
 8006392:	4401      	add	r1, r0
 8006394:	1850      	adds	r0, r2, r1
 8006396:	4283      	cmp	r3, r0
 8006398:	6011      	str	r1, [r2, #0]
 800639a:	d1e0      	bne.n	800635e <_free_r+0x22>
 800639c:	6818      	ldr	r0, [r3, #0]
 800639e:	685b      	ldr	r3, [r3, #4]
 80063a0:	6053      	str	r3, [r2, #4]
 80063a2:	4408      	add	r0, r1
 80063a4:	6010      	str	r0, [r2, #0]
 80063a6:	e7da      	b.n	800635e <_free_r+0x22>
 80063a8:	d902      	bls.n	80063b0 <_free_r+0x74>
 80063aa:	230c      	movs	r3, #12
 80063ac:	602b      	str	r3, [r5, #0]
 80063ae:	e7d6      	b.n	800635e <_free_r+0x22>
 80063b0:	6820      	ldr	r0, [r4, #0]
 80063b2:	1821      	adds	r1, r4, r0
 80063b4:	428b      	cmp	r3, r1
 80063b6:	bf04      	itt	eq
 80063b8:	6819      	ldreq	r1, [r3, #0]
 80063ba:	685b      	ldreq	r3, [r3, #4]
 80063bc:	6063      	str	r3, [r4, #4]
 80063be:	bf04      	itt	eq
 80063c0:	1809      	addeq	r1, r1, r0
 80063c2:	6021      	streq	r1, [r4, #0]
 80063c4:	6054      	str	r4, [r2, #4]
 80063c6:	e7ca      	b.n	800635e <_free_r+0x22>
 80063c8:	bd38      	pop	{r3, r4, r5, pc}
 80063ca:	bf00      	nop
 80063cc:	20000390 	.word	0x20000390

080063d0 <sbrk_aligned>:
 80063d0:	b570      	push	{r4, r5, r6, lr}
 80063d2:	4e0f      	ldr	r6, [pc, #60]	@ (8006410 <sbrk_aligned+0x40>)
 80063d4:	460c      	mov	r4, r1
 80063d6:	6831      	ldr	r1, [r6, #0]
 80063d8:	4605      	mov	r5, r0
 80063da:	b911      	cbnz	r1, 80063e2 <sbrk_aligned+0x12>
 80063dc:	f000 fba4 	bl	8006b28 <_sbrk_r>
 80063e0:	6030      	str	r0, [r6, #0]
 80063e2:	4621      	mov	r1, r4
 80063e4:	4628      	mov	r0, r5
 80063e6:	f000 fb9f 	bl	8006b28 <_sbrk_r>
 80063ea:	1c43      	adds	r3, r0, #1
 80063ec:	d103      	bne.n	80063f6 <sbrk_aligned+0x26>
 80063ee:	f04f 34ff 	mov.w	r4, #4294967295
 80063f2:	4620      	mov	r0, r4
 80063f4:	bd70      	pop	{r4, r5, r6, pc}
 80063f6:	1cc4      	adds	r4, r0, #3
 80063f8:	f024 0403 	bic.w	r4, r4, #3
 80063fc:	42a0      	cmp	r0, r4
 80063fe:	d0f8      	beq.n	80063f2 <sbrk_aligned+0x22>
 8006400:	1a21      	subs	r1, r4, r0
 8006402:	4628      	mov	r0, r5
 8006404:	f000 fb90 	bl	8006b28 <_sbrk_r>
 8006408:	3001      	adds	r0, #1
 800640a:	d1f2      	bne.n	80063f2 <sbrk_aligned+0x22>
 800640c:	e7ef      	b.n	80063ee <sbrk_aligned+0x1e>
 800640e:	bf00      	nop
 8006410:	2000038c 	.word	0x2000038c

08006414 <_malloc_r>:
 8006414:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006418:	1ccd      	adds	r5, r1, #3
 800641a:	f025 0503 	bic.w	r5, r5, #3
 800641e:	3508      	adds	r5, #8
 8006420:	2d0c      	cmp	r5, #12
 8006422:	bf38      	it	cc
 8006424:	250c      	movcc	r5, #12
 8006426:	2d00      	cmp	r5, #0
 8006428:	4606      	mov	r6, r0
 800642a:	db01      	blt.n	8006430 <_malloc_r+0x1c>
 800642c:	42a9      	cmp	r1, r5
 800642e:	d904      	bls.n	800643a <_malloc_r+0x26>
 8006430:	230c      	movs	r3, #12
 8006432:	6033      	str	r3, [r6, #0]
 8006434:	2000      	movs	r0, #0
 8006436:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800643a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006510 <_malloc_r+0xfc>
 800643e:	f000 f869 	bl	8006514 <__malloc_lock>
 8006442:	f8d8 3000 	ldr.w	r3, [r8]
 8006446:	461c      	mov	r4, r3
 8006448:	bb44      	cbnz	r4, 800649c <_malloc_r+0x88>
 800644a:	4629      	mov	r1, r5
 800644c:	4630      	mov	r0, r6
 800644e:	f7ff ffbf 	bl	80063d0 <sbrk_aligned>
 8006452:	1c43      	adds	r3, r0, #1
 8006454:	4604      	mov	r4, r0
 8006456:	d158      	bne.n	800650a <_malloc_r+0xf6>
 8006458:	f8d8 4000 	ldr.w	r4, [r8]
 800645c:	4627      	mov	r7, r4
 800645e:	2f00      	cmp	r7, #0
 8006460:	d143      	bne.n	80064ea <_malloc_r+0xd6>
 8006462:	2c00      	cmp	r4, #0
 8006464:	d04b      	beq.n	80064fe <_malloc_r+0xea>
 8006466:	6823      	ldr	r3, [r4, #0]
 8006468:	4639      	mov	r1, r7
 800646a:	4630      	mov	r0, r6
 800646c:	eb04 0903 	add.w	r9, r4, r3
 8006470:	f000 fb5a 	bl	8006b28 <_sbrk_r>
 8006474:	4581      	cmp	r9, r0
 8006476:	d142      	bne.n	80064fe <_malloc_r+0xea>
 8006478:	6821      	ldr	r1, [r4, #0]
 800647a:	1a6d      	subs	r5, r5, r1
 800647c:	4629      	mov	r1, r5
 800647e:	4630      	mov	r0, r6
 8006480:	f7ff ffa6 	bl	80063d0 <sbrk_aligned>
 8006484:	3001      	adds	r0, #1
 8006486:	d03a      	beq.n	80064fe <_malloc_r+0xea>
 8006488:	6823      	ldr	r3, [r4, #0]
 800648a:	442b      	add	r3, r5
 800648c:	6023      	str	r3, [r4, #0]
 800648e:	f8d8 3000 	ldr.w	r3, [r8]
 8006492:	685a      	ldr	r2, [r3, #4]
 8006494:	bb62      	cbnz	r2, 80064f0 <_malloc_r+0xdc>
 8006496:	f8c8 7000 	str.w	r7, [r8]
 800649a:	e00f      	b.n	80064bc <_malloc_r+0xa8>
 800649c:	6822      	ldr	r2, [r4, #0]
 800649e:	1b52      	subs	r2, r2, r5
 80064a0:	d420      	bmi.n	80064e4 <_malloc_r+0xd0>
 80064a2:	2a0b      	cmp	r2, #11
 80064a4:	d917      	bls.n	80064d6 <_malloc_r+0xc2>
 80064a6:	1961      	adds	r1, r4, r5
 80064a8:	42a3      	cmp	r3, r4
 80064aa:	6025      	str	r5, [r4, #0]
 80064ac:	bf18      	it	ne
 80064ae:	6059      	strne	r1, [r3, #4]
 80064b0:	6863      	ldr	r3, [r4, #4]
 80064b2:	bf08      	it	eq
 80064b4:	f8c8 1000 	streq.w	r1, [r8]
 80064b8:	5162      	str	r2, [r4, r5]
 80064ba:	604b      	str	r3, [r1, #4]
 80064bc:	4630      	mov	r0, r6
 80064be:	f000 f82f 	bl	8006520 <__malloc_unlock>
 80064c2:	f104 000b 	add.w	r0, r4, #11
 80064c6:	1d23      	adds	r3, r4, #4
 80064c8:	f020 0007 	bic.w	r0, r0, #7
 80064cc:	1ac2      	subs	r2, r0, r3
 80064ce:	bf1c      	itt	ne
 80064d0:	1a1b      	subne	r3, r3, r0
 80064d2:	50a3      	strne	r3, [r4, r2]
 80064d4:	e7af      	b.n	8006436 <_malloc_r+0x22>
 80064d6:	6862      	ldr	r2, [r4, #4]
 80064d8:	42a3      	cmp	r3, r4
 80064da:	bf0c      	ite	eq
 80064dc:	f8c8 2000 	streq.w	r2, [r8]
 80064e0:	605a      	strne	r2, [r3, #4]
 80064e2:	e7eb      	b.n	80064bc <_malloc_r+0xa8>
 80064e4:	4623      	mov	r3, r4
 80064e6:	6864      	ldr	r4, [r4, #4]
 80064e8:	e7ae      	b.n	8006448 <_malloc_r+0x34>
 80064ea:	463c      	mov	r4, r7
 80064ec:	687f      	ldr	r7, [r7, #4]
 80064ee:	e7b6      	b.n	800645e <_malloc_r+0x4a>
 80064f0:	461a      	mov	r2, r3
 80064f2:	685b      	ldr	r3, [r3, #4]
 80064f4:	42a3      	cmp	r3, r4
 80064f6:	d1fb      	bne.n	80064f0 <_malloc_r+0xdc>
 80064f8:	2300      	movs	r3, #0
 80064fa:	6053      	str	r3, [r2, #4]
 80064fc:	e7de      	b.n	80064bc <_malloc_r+0xa8>
 80064fe:	230c      	movs	r3, #12
 8006500:	6033      	str	r3, [r6, #0]
 8006502:	4630      	mov	r0, r6
 8006504:	f000 f80c 	bl	8006520 <__malloc_unlock>
 8006508:	e794      	b.n	8006434 <_malloc_r+0x20>
 800650a:	6005      	str	r5, [r0, #0]
 800650c:	e7d6      	b.n	80064bc <_malloc_r+0xa8>
 800650e:	bf00      	nop
 8006510:	20000390 	.word	0x20000390

08006514 <__malloc_lock>:
 8006514:	4801      	ldr	r0, [pc, #4]	@ (800651c <__malloc_lock+0x8>)
 8006516:	f7ff bf0f 	b.w	8006338 <__retarget_lock_acquire_recursive>
 800651a:	bf00      	nop
 800651c:	20000388 	.word	0x20000388

08006520 <__malloc_unlock>:
 8006520:	4801      	ldr	r0, [pc, #4]	@ (8006528 <__malloc_unlock+0x8>)
 8006522:	f7ff bf0a 	b.w	800633a <__retarget_lock_release_recursive>
 8006526:	bf00      	nop
 8006528:	20000388 	.word	0x20000388

0800652c <__ssputs_r>:
 800652c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006530:	688e      	ldr	r6, [r1, #8]
 8006532:	461f      	mov	r7, r3
 8006534:	42be      	cmp	r6, r7
 8006536:	680b      	ldr	r3, [r1, #0]
 8006538:	4682      	mov	sl, r0
 800653a:	460c      	mov	r4, r1
 800653c:	4690      	mov	r8, r2
 800653e:	d82d      	bhi.n	800659c <__ssputs_r+0x70>
 8006540:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006544:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8006548:	d026      	beq.n	8006598 <__ssputs_r+0x6c>
 800654a:	6965      	ldr	r5, [r4, #20]
 800654c:	6909      	ldr	r1, [r1, #16]
 800654e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006552:	eba3 0901 	sub.w	r9, r3, r1
 8006556:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800655a:	1c7b      	adds	r3, r7, #1
 800655c:	444b      	add	r3, r9
 800655e:	106d      	asrs	r5, r5, #1
 8006560:	429d      	cmp	r5, r3
 8006562:	bf38      	it	cc
 8006564:	461d      	movcc	r5, r3
 8006566:	0553      	lsls	r3, r2, #21
 8006568:	d527      	bpl.n	80065ba <__ssputs_r+0x8e>
 800656a:	4629      	mov	r1, r5
 800656c:	f7ff ff52 	bl	8006414 <_malloc_r>
 8006570:	4606      	mov	r6, r0
 8006572:	b360      	cbz	r0, 80065ce <__ssputs_r+0xa2>
 8006574:	6921      	ldr	r1, [r4, #16]
 8006576:	464a      	mov	r2, r9
 8006578:	f000 fae6 	bl	8006b48 <memcpy>
 800657c:	89a3      	ldrh	r3, [r4, #12]
 800657e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8006582:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006586:	81a3      	strh	r3, [r4, #12]
 8006588:	6126      	str	r6, [r4, #16]
 800658a:	6165      	str	r5, [r4, #20]
 800658c:	444e      	add	r6, r9
 800658e:	eba5 0509 	sub.w	r5, r5, r9
 8006592:	6026      	str	r6, [r4, #0]
 8006594:	60a5      	str	r5, [r4, #8]
 8006596:	463e      	mov	r6, r7
 8006598:	42be      	cmp	r6, r7
 800659a:	d900      	bls.n	800659e <__ssputs_r+0x72>
 800659c:	463e      	mov	r6, r7
 800659e:	6820      	ldr	r0, [r4, #0]
 80065a0:	4632      	mov	r2, r6
 80065a2:	4641      	mov	r1, r8
 80065a4:	f000 faa6 	bl	8006af4 <memmove>
 80065a8:	68a3      	ldr	r3, [r4, #8]
 80065aa:	1b9b      	subs	r3, r3, r6
 80065ac:	60a3      	str	r3, [r4, #8]
 80065ae:	6823      	ldr	r3, [r4, #0]
 80065b0:	4433      	add	r3, r6
 80065b2:	6023      	str	r3, [r4, #0]
 80065b4:	2000      	movs	r0, #0
 80065b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80065ba:	462a      	mov	r2, r5
 80065bc:	f000 fad2 	bl	8006b64 <_realloc_r>
 80065c0:	4606      	mov	r6, r0
 80065c2:	2800      	cmp	r0, #0
 80065c4:	d1e0      	bne.n	8006588 <__ssputs_r+0x5c>
 80065c6:	6921      	ldr	r1, [r4, #16]
 80065c8:	4650      	mov	r0, sl
 80065ca:	f7ff feb7 	bl	800633c <_free_r>
 80065ce:	230c      	movs	r3, #12
 80065d0:	f8ca 3000 	str.w	r3, [sl]
 80065d4:	89a3      	ldrh	r3, [r4, #12]
 80065d6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80065da:	81a3      	strh	r3, [r4, #12]
 80065dc:	f04f 30ff 	mov.w	r0, #4294967295
 80065e0:	e7e9      	b.n	80065b6 <__ssputs_r+0x8a>
	...

080065e4 <_svfiprintf_r>:
 80065e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80065e8:	4698      	mov	r8, r3
 80065ea:	898b      	ldrh	r3, [r1, #12]
 80065ec:	061b      	lsls	r3, r3, #24
 80065ee:	b09d      	sub	sp, #116	@ 0x74
 80065f0:	4607      	mov	r7, r0
 80065f2:	460d      	mov	r5, r1
 80065f4:	4614      	mov	r4, r2
 80065f6:	d510      	bpl.n	800661a <_svfiprintf_r+0x36>
 80065f8:	690b      	ldr	r3, [r1, #16]
 80065fa:	b973      	cbnz	r3, 800661a <_svfiprintf_r+0x36>
 80065fc:	2140      	movs	r1, #64	@ 0x40
 80065fe:	f7ff ff09 	bl	8006414 <_malloc_r>
 8006602:	6028      	str	r0, [r5, #0]
 8006604:	6128      	str	r0, [r5, #16]
 8006606:	b930      	cbnz	r0, 8006616 <_svfiprintf_r+0x32>
 8006608:	230c      	movs	r3, #12
 800660a:	603b      	str	r3, [r7, #0]
 800660c:	f04f 30ff 	mov.w	r0, #4294967295
 8006610:	b01d      	add	sp, #116	@ 0x74
 8006612:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006616:	2340      	movs	r3, #64	@ 0x40
 8006618:	616b      	str	r3, [r5, #20]
 800661a:	2300      	movs	r3, #0
 800661c:	9309      	str	r3, [sp, #36]	@ 0x24
 800661e:	2320      	movs	r3, #32
 8006620:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8006624:	f8cd 800c 	str.w	r8, [sp, #12]
 8006628:	2330      	movs	r3, #48	@ 0x30
 800662a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80067c8 <_svfiprintf_r+0x1e4>
 800662e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8006632:	f04f 0901 	mov.w	r9, #1
 8006636:	4623      	mov	r3, r4
 8006638:	469a      	mov	sl, r3
 800663a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800663e:	b10a      	cbz	r2, 8006644 <_svfiprintf_r+0x60>
 8006640:	2a25      	cmp	r2, #37	@ 0x25
 8006642:	d1f9      	bne.n	8006638 <_svfiprintf_r+0x54>
 8006644:	ebba 0b04 	subs.w	fp, sl, r4
 8006648:	d00b      	beq.n	8006662 <_svfiprintf_r+0x7e>
 800664a:	465b      	mov	r3, fp
 800664c:	4622      	mov	r2, r4
 800664e:	4629      	mov	r1, r5
 8006650:	4638      	mov	r0, r7
 8006652:	f7ff ff6b 	bl	800652c <__ssputs_r>
 8006656:	3001      	adds	r0, #1
 8006658:	f000 80a7 	beq.w	80067aa <_svfiprintf_r+0x1c6>
 800665c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800665e:	445a      	add	r2, fp
 8006660:	9209      	str	r2, [sp, #36]	@ 0x24
 8006662:	f89a 3000 	ldrb.w	r3, [sl]
 8006666:	2b00      	cmp	r3, #0
 8006668:	f000 809f 	beq.w	80067aa <_svfiprintf_r+0x1c6>
 800666c:	2300      	movs	r3, #0
 800666e:	f04f 32ff 	mov.w	r2, #4294967295
 8006672:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006676:	f10a 0a01 	add.w	sl, sl, #1
 800667a:	9304      	str	r3, [sp, #16]
 800667c:	9307      	str	r3, [sp, #28]
 800667e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8006682:	931a      	str	r3, [sp, #104]	@ 0x68
 8006684:	4654      	mov	r4, sl
 8006686:	2205      	movs	r2, #5
 8006688:	f814 1b01 	ldrb.w	r1, [r4], #1
 800668c:	484e      	ldr	r0, [pc, #312]	@ (80067c8 <_svfiprintf_r+0x1e4>)
 800668e:	f7f9 fddf 	bl	8000250 <memchr>
 8006692:	9a04      	ldr	r2, [sp, #16]
 8006694:	b9d8      	cbnz	r0, 80066ce <_svfiprintf_r+0xea>
 8006696:	06d0      	lsls	r0, r2, #27
 8006698:	bf44      	itt	mi
 800669a:	2320      	movmi	r3, #32
 800669c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80066a0:	0711      	lsls	r1, r2, #28
 80066a2:	bf44      	itt	mi
 80066a4:	232b      	movmi	r3, #43	@ 0x2b
 80066a6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80066aa:	f89a 3000 	ldrb.w	r3, [sl]
 80066ae:	2b2a      	cmp	r3, #42	@ 0x2a
 80066b0:	d015      	beq.n	80066de <_svfiprintf_r+0xfa>
 80066b2:	9a07      	ldr	r2, [sp, #28]
 80066b4:	4654      	mov	r4, sl
 80066b6:	2000      	movs	r0, #0
 80066b8:	f04f 0c0a 	mov.w	ip, #10
 80066bc:	4621      	mov	r1, r4
 80066be:	f811 3b01 	ldrb.w	r3, [r1], #1
 80066c2:	3b30      	subs	r3, #48	@ 0x30
 80066c4:	2b09      	cmp	r3, #9
 80066c6:	d94b      	bls.n	8006760 <_svfiprintf_r+0x17c>
 80066c8:	b1b0      	cbz	r0, 80066f8 <_svfiprintf_r+0x114>
 80066ca:	9207      	str	r2, [sp, #28]
 80066cc:	e014      	b.n	80066f8 <_svfiprintf_r+0x114>
 80066ce:	eba0 0308 	sub.w	r3, r0, r8
 80066d2:	fa09 f303 	lsl.w	r3, r9, r3
 80066d6:	4313      	orrs	r3, r2
 80066d8:	9304      	str	r3, [sp, #16]
 80066da:	46a2      	mov	sl, r4
 80066dc:	e7d2      	b.n	8006684 <_svfiprintf_r+0xa0>
 80066de:	9b03      	ldr	r3, [sp, #12]
 80066e0:	1d19      	adds	r1, r3, #4
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	9103      	str	r1, [sp, #12]
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	bfbb      	ittet	lt
 80066ea:	425b      	neglt	r3, r3
 80066ec:	f042 0202 	orrlt.w	r2, r2, #2
 80066f0:	9307      	strge	r3, [sp, #28]
 80066f2:	9307      	strlt	r3, [sp, #28]
 80066f4:	bfb8      	it	lt
 80066f6:	9204      	strlt	r2, [sp, #16]
 80066f8:	7823      	ldrb	r3, [r4, #0]
 80066fa:	2b2e      	cmp	r3, #46	@ 0x2e
 80066fc:	d10a      	bne.n	8006714 <_svfiprintf_r+0x130>
 80066fe:	7863      	ldrb	r3, [r4, #1]
 8006700:	2b2a      	cmp	r3, #42	@ 0x2a
 8006702:	d132      	bne.n	800676a <_svfiprintf_r+0x186>
 8006704:	9b03      	ldr	r3, [sp, #12]
 8006706:	1d1a      	adds	r2, r3, #4
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	9203      	str	r2, [sp, #12]
 800670c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8006710:	3402      	adds	r4, #2
 8006712:	9305      	str	r3, [sp, #20]
 8006714:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80067d8 <_svfiprintf_r+0x1f4>
 8006718:	7821      	ldrb	r1, [r4, #0]
 800671a:	2203      	movs	r2, #3
 800671c:	4650      	mov	r0, sl
 800671e:	f7f9 fd97 	bl	8000250 <memchr>
 8006722:	b138      	cbz	r0, 8006734 <_svfiprintf_r+0x150>
 8006724:	9b04      	ldr	r3, [sp, #16]
 8006726:	eba0 000a 	sub.w	r0, r0, sl
 800672a:	2240      	movs	r2, #64	@ 0x40
 800672c:	4082      	lsls	r2, r0
 800672e:	4313      	orrs	r3, r2
 8006730:	3401      	adds	r4, #1
 8006732:	9304      	str	r3, [sp, #16]
 8006734:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006738:	4824      	ldr	r0, [pc, #144]	@ (80067cc <_svfiprintf_r+0x1e8>)
 800673a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800673e:	2206      	movs	r2, #6
 8006740:	f7f9 fd86 	bl	8000250 <memchr>
 8006744:	2800      	cmp	r0, #0
 8006746:	d036      	beq.n	80067b6 <_svfiprintf_r+0x1d2>
 8006748:	4b21      	ldr	r3, [pc, #132]	@ (80067d0 <_svfiprintf_r+0x1ec>)
 800674a:	bb1b      	cbnz	r3, 8006794 <_svfiprintf_r+0x1b0>
 800674c:	9b03      	ldr	r3, [sp, #12]
 800674e:	3307      	adds	r3, #7
 8006750:	f023 0307 	bic.w	r3, r3, #7
 8006754:	3308      	adds	r3, #8
 8006756:	9303      	str	r3, [sp, #12]
 8006758:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800675a:	4433      	add	r3, r6
 800675c:	9309      	str	r3, [sp, #36]	@ 0x24
 800675e:	e76a      	b.n	8006636 <_svfiprintf_r+0x52>
 8006760:	fb0c 3202 	mla	r2, ip, r2, r3
 8006764:	460c      	mov	r4, r1
 8006766:	2001      	movs	r0, #1
 8006768:	e7a8      	b.n	80066bc <_svfiprintf_r+0xd8>
 800676a:	2300      	movs	r3, #0
 800676c:	3401      	adds	r4, #1
 800676e:	9305      	str	r3, [sp, #20]
 8006770:	4619      	mov	r1, r3
 8006772:	f04f 0c0a 	mov.w	ip, #10
 8006776:	4620      	mov	r0, r4
 8006778:	f810 2b01 	ldrb.w	r2, [r0], #1
 800677c:	3a30      	subs	r2, #48	@ 0x30
 800677e:	2a09      	cmp	r2, #9
 8006780:	d903      	bls.n	800678a <_svfiprintf_r+0x1a6>
 8006782:	2b00      	cmp	r3, #0
 8006784:	d0c6      	beq.n	8006714 <_svfiprintf_r+0x130>
 8006786:	9105      	str	r1, [sp, #20]
 8006788:	e7c4      	b.n	8006714 <_svfiprintf_r+0x130>
 800678a:	fb0c 2101 	mla	r1, ip, r1, r2
 800678e:	4604      	mov	r4, r0
 8006790:	2301      	movs	r3, #1
 8006792:	e7f0      	b.n	8006776 <_svfiprintf_r+0x192>
 8006794:	ab03      	add	r3, sp, #12
 8006796:	9300      	str	r3, [sp, #0]
 8006798:	462a      	mov	r2, r5
 800679a:	4b0e      	ldr	r3, [pc, #56]	@ (80067d4 <_svfiprintf_r+0x1f0>)
 800679c:	a904      	add	r1, sp, #16
 800679e:	4638      	mov	r0, r7
 80067a0:	f3af 8000 	nop.w
 80067a4:	1c42      	adds	r2, r0, #1
 80067a6:	4606      	mov	r6, r0
 80067a8:	d1d6      	bne.n	8006758 <_svfiprintf_r+0x174>
 80067aa:	89ab      	ldrh	r3, [r5, #12]
 80067ac:	065b      	lsls	r3, r3, #25
 80067ae:	f53f af2d 	bmi.w	800660c <_svfiprintf_r+0x28>
 80067b2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80067b4:	e72c      	b.n	8006610 <_svfiprintf_r+0x2c>
 80067b6:	ab03      	add	r3, sp, #12
 80067b8:	9300      	str	r3, [sp, #0]
 80067ba:	462a      	mov	r2, r5
 80067bc:	4b05      	ldr	r3, [pc, #20]	@ (80067d4 <_svfiprintf_r+0x1f0>)
 80067be:	a904      	add	r1, sp, #16
 80067c0:	4638      	mov	r0, r7
 80067c2:	f000 f879 	bl	80068b8 <_printf_i>
 80067c6:	e7ed      	b.n	80067a4 <_svfiprintf_r+0x1c0>
 80067c8:	08007bbc 	.word	0x08007bbc
 80067cc:	08007bc6 	.word	0x08007bc6
 80067d0:	00000000 	.word	0x00000000
 80067d4:	0800652d 	.word	0x0800652d
 80067d8:	08007bc2 	.word	0x08007bc2

080067dc <_printf_common>:
 80067dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80067e0:	4616      	mov	r6, r2
 80067e2:	4698      	mov	r8, r3
 80067e4:	688a      	ldr	r2, [r1, #8]
 80067e6:	690b      	ldr	r3, [r1, #16]
 80067e8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80067ec:	4293      	cmp	r3, r2
 80067ee:	bfb8      	it	lt
 80067f0:	4613      	movlt	r3, r2
 80067f2:	6033      	str	r3, [r6, #0]
 80067f4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80067f8:	4607      	mov	r7, r0
 80067fa:	460c      	mov	r4, r1
 80067fc:	b10a      	cbz	r2, 8006802 <_printf_common+0x26>
 80067fe:	3301      	adds	r3, #1
 8006800:	6033      	str	r3, [r6, #0]
 8006802:	6823      	ldr	r3, [r4, #0]
 8006804:	0699      	lsls	r1, r3, #26
 8006806:	bf42      	ittt	mi
 8006808:	6833      	ldrmi	r3, [r6, #0]
 800680a:	3302      	addmi	r3, #2
 800680c:	6033      	strmi	r3, [r6, #0]
 800680e:	6825      	ldr	r5, [r4, #0]
 8006810:	f015 0506 	ands.w	r5, r5, #6
 8006814:	d106      	bne.n	8006824 <_printf_common+0x48>
 8006816:	f104 0a19 	add.w	sl, r4, #25
 800681a:	68e3      	ldr	r3, [r4, #12]
 800681c:	6832      	ldr	r2, [r6, #0]
 800681e:	1a9b      	subs	r3, r3, r2
 8006820:	42ab      	cmp	r3, r5
 8006822:	dc26      	bgt.n	8006872 <_printf_common+0x96>
 8006824:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006828:	6822      	ldr	r2, [r4, #0]
 800682a:	3b00      	subs	r3, #0
 800682c:	bf18      	it	ne
 800682e:	2301      	movne	r3, #1
 8006830:	0692      	lsls	r2, r2, #26
 8006832:	d42b      	bmi.n	800688c <_printf_common+0xb0>
 8006834:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006838:	4641      	mov	r1, r8
 800683a:	4638      	mov	r0, r7
 800683c:	47c8      	blx	r9
 800683e:	3001      	adds	r0, #1
 8006840:	d01e      	beq.n	8006880 <_printf_common+0xa4>
 8006842:	6823      	ldr	r3, [r4, #0]
 8006844:	6922      	ldr	r2, [r4, #16]
 8006846:	f003 0306 	and.w	r3, r3, #6
 800684a:	2b04      	cmp	r3, #4
 800684c:	bf02      	ittt	eq
 800684e:	68e5      	ldreq	r5, [r4, #12]
 8006850:	6833      	ldreq	r3, [r6, #0]
 8006852:	1aed      	subeq	r5, r5, r3
 8006854:	68a3      	ldr	r3, [r4, #8]
 8006856:	bf0c      	ite	eq
 8006858:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800685c:	2500      	movne	r5, #0
 800685e:	4293      	cmp	r3, r2
 8006860:	bfc4      	itt	gt
 8006862:	1a9b      	subgt	r3, r3, r2
 8006864:	18ed      	addgt	r5, r5, r3
 8006866:	2600      	movs	r6, #0
 8006868:	341a      	adds	r4, #26
 800686a:	42b5      	cmp	r5, r6
 800686c:	d11a      	bne.n	80068a4 <_printf_common+0xc8>
 800686e:	2000      	movs	r0, #0
 8006870:	e008      	b.n	8006884 <_printf_common+0xa8>
 8006872:	2301      	movs	r3, #1
 8006874:	4652      	mov	r2, sl
 8006876:	4641      	mov	r1, r8
 8006878:	4638      	mov	r0, r7
 800687a:	47c8      	blx	r9
 800687c:	3001      	adds	r0, #1
 800687e:	d103      	bne.n	8006888 <_printf_common+0xac>
 8006880:	f04f 30ff 	mov.w	r0, #4294967295
 8006884:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006888:	3501      	adds	r5, #1
 800688a:	e7c6      	b.n	800681a <_printf_common+0x3e>
 800688c:	18e1      	adds	r1, r4, r3
 800688e:	1c5a      	adds	r2, r3, #1
 8006890:	2030      	movs	r0, #48	@ 0x30
 8006892:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8006896:	4422      	add	r2, r4
 8006898:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800689c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80068a0:	3302      	adds	r3, #2
 80068a2:	e7c7      	b.n	8006834 <_printf_common+0x58>
 80068a4:	2301      	movs	r3, #1
 80068a6:	4622      	mov	r2, r4
 80068a8:	4641      	mov	r1, r8
 80068aa:	4638      	mov	r0, r7
 80068ac:	47c8      	blx	r9
 80068ae:	3001      	adds	r0, #1
 80068b0:	d0e6      	beq.n	8006880 <_printf_common+0xa4>
 80068b2:	3601      	adds	r6, #1
 80068b4:	e7d9      	b.n	800686a <_printf_common+0x8e>
	...

080068b8 <_printf_i>:
 80068b8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80068bc:	7e0f      	ldrb	r7, [r1, #24]
 80068be:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80068c0:	2f78      	cmp	r7, #120	@ 0x78
 80068c2:	4691      	mov	r9, r2
 80068c4:	4680      	mov	r8, r0
 80068c6:	460c      	mov	r4, r1
 80068c8:	469a      	mov	sl, r3
 80068ca:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80068ce:	d807      	bhi.n	80068e0 <_printf_i+0x28>
 80068d0:	2f62      	cmp	r7, #98	@ 0x62
 80068d2:	d80a      	bhi.n	80068ea <_printf_i+0x32>
 80068d4:	2f00      	cmp	r7, #0
 80068d6:	f000 80d1 	beq.w	8006a7c <_printf_i+0x1c4>
 80068da:	2f58      	cmp	r7, #88	@ 0x58
 80068dc:	f000 80b8 	beq.w	8006a50 <_printf_i+0x198>
 80068e0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80068e4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80068e8:	e03a      	b.n	8006960 <_printf_i+0xa8>
 80068ea:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80068ee:	2b15      	cmp	r3, #21
 80068f0:	d8f6      	bhi.n	80068e0 <_printf_i+0x28>
 80068f2:	a101      	add	r1, pc, #4	@ (adr r1, 80068f8 <_printf_i+0x40>)
 80068f4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80068f8:	08006951 	.word	0x08006951
 80068fc:	08006965 	.word	0x08006965
 8006900:	080068e1 	.word	0x080068e1
 8006904:	080068e1 	.word	0x080068e1
 8006908:	080068e1 	.word	0x080068e1
 800690c:	080068e1 	.word	0x080068e1
 8006910:	08006965 	.word	0x08006965
 8006914:	080068e1 	.word	0x080068e1
 8006918:	080068e1 	.word	0x080068e1
 800691c:	080068e1 	.word	0x080068e1
 8006920:	080068e1 	.word	0x080068e1
 8006924:	08006a63 	.word	0x08006a63
 8006928:	0800698f 	.word	0x0800698f
 800692c:	08006a1d 	.word	0x08006a1d
 8006930:	080068e1 	.word	0x080068e1
 8006934:	080068e1 	.word	0x080068e1
 8006938:	08006a85 	.word	0x08006a85
 800693c:	080068e1 	.word	0x080068e1
 8006940:	0800698f 	.word	0x0800698f
 8006944:	080068e1 	.word	0x080068e1
 8006948:	080068e1 	.word	0x080068e1
 800694c:	08006a25 	.word	0x08006a25
 8006950:	6833      	ldr	r3, [r6, #0]
 8006952:	1d1a      	adds	r2, r3, #4
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	6032      	str	r2, [r6, #0]
 8006958:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800695c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006960:	2301      	movs	r3, #1
 8006962:	e09c      	b.n	8006a9e <_printf_i+0x1e6>
 8006964:	6833      	ldr	r3, [r6, #0]
 8006966:	6820      	ldr	r0, [r4, #0]
 8006968:	1d19      	adds	r1, r3, #4
 800696a:	6031      	str	r1, [r6, #0]
 800696c:	0606      	lsls	r6, r0, #24
 800696e:	d501      	bpl.n	8006974 <_printf_i+0xbc>
 8006970:	681d      	ldr	r5, [r3, #0]
 8006972:	e003      	b.n	800697c <_printf_i+0xc4>
 8006974:	0645      	lsls	r5, r0, #25
 8006976:	d5fb      	bpl.n	8006970 <_printf_i+0xb8>
 8006978:	f9b3 5000 	ldrsh.w	r5, [r3]
 800697c:	2d00      	cmp	r5, #0
 800697e:	da03      	bge.n	8006988 <_printf_i+0xd0>
 8006980:	232d      	movs	r3, #45	@ 0x2d
 8006982:	426d      	negs	r5, r5
 8006984:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006988:	4858      	ldr	r0, [pc, #352]	@ (8006aec <_printf_i+0x234>)
 800698a:	230a      	movs	r3, #10
 800698c:	e011      	b.n	80069b2 <_printf_i+0xfa>
 800698e:	6821      	ldr	r1, [r4, #0]
 8006990:	6833      	ldr	r3, [r6, #0]
 8006992:	0608      	lsls	r0, r1, #24
 8006994:	f853 5b04 	ldr.w	r5, [r3], #4
 8006998:	d402      	bmi.n	80069a0 <_printf_i+0xe8>
 800699a:	0649      	lsls	r1, r1, #25
 800699c:	bf48      	it	mi
 800699e:	b2ad      	uxthmi	r5, r5
 80069a0:	2f6f      	cmp	r7, #111	@ 0x6f
 80069a2:	4852      	ldr	r0, [pc, #328]	@ (8006aec <_printf_i+0x234>)
 80069a4:	6033      	str	r3, [r6, #0]
 80069a6:	bf14      	ite	ne
 80069a8:	230a      	movne	r3, #10
 80069aa:	2308      	moveq	r3, #8
 80069ac:	2100      	movs	r1, #0
 80069ae:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80069b2:	6866      	ldr	r6, [r4, #4]
 80069b4:	60a6      	str	r6, [r4, #8]
 80069b6:	2e00      	cmp	r6, #0
 80069b8:	db05      	blt.n	80069c6 <_printf_i+0x10e>
 80069ba:	6821      	ldr	r1, [r4, #0]
 80069bc:	432e      	orrs	r6, r5
 80069be:	f021 0104 	bic.w	r1, r1, #4
 80069c2:	6021      	str	r1, [r4, #0]
 80069c4:	d04b      	beq.n	8006a5e <_printf_i+0x1a6>
 80069c6:	4616      	mov	r6, r2
 80069c8:	fbb5 f1f3 	udiv	r1, r5, r3
 80069cc:	fb03 5711 	mls	r7, r3, r1, r5
 80069d0:	5dc7      	ldrb	r7, [r0, r7]
 80069d2:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80069d6:	462f      	mov	r7, r5
 80069d8:	42bb      	cmp	r3, r7
 80069da:	460d      	mov	r5, r1
 80069dc:	d9f4      	bls.n	80069c8 <_printf_i+0x110>
 80069de:	2b08      	cmp	r3, #8
 80069e0:	d10b      	bne.n	80069fa <_printf_i+0x142>
 80069e2:	6823      	ldr	r3, [r4, #0]
 80069e4:	07df      	lsls	r7, r3, #31
 80069e6:	d508      	bpl.n	80069fa <_printf_i+0x142>
 80069e8:	6923      	ldr	r3, [r4, #16]
 80069ea:	6861      	ldr	r1, [r4, #4]
 80069ec:	4299      	cmp	r1, r3
 80069ee:	bfde      	ittt	le
 80069f0:	2330      	movle	r3, #48	@ 0x30
 80069f2:	f806 3c01 	strble.w	r3, [r6, #-1]
 80069f6:	f106 36ff 	addle.w	r6, r6, #4294967295
 80069fa:	1b92      	subs	r2, r2, r6
 80069fc:	6122      	str	r2, [r4, #16]
 80069fe:	f8cd a000 	str.w	sl, [sp]
 8006a02:	464b      	mov	r3, r9
 8006a04:	aa03      	add	r2, sp, #12
 8006a06:	4621      	mov	r1, r4
 8006a08:	4640      	mov	r0, r8
 8006a0a:	f7ff fee7 	bl	80067dc <_printf_common>
 8006a0e:	3001      	adds	r0, #1
 8006a10:	d14a      	bne.n	8006aa8 <_printf_i+0x1f0>
 8006a12:	f04f 30ff 	mov.w	r0, #4294967295
 8006a16:	b004      	add	sp, #16
 8006a18:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006a1c:	6823      	ldr	r3, [r4, #0]
 8006a1e:	f043 0320 	orr.w	r3, r3, #32
 8006a22:	6023      	str	r3, [r4, #0]
 8006a24:	4832      	ldr	r0, [pc, #200]	@ (8006af0 <_printf_i+0x238>)
 8006a26:	2778      	movs	r7, #120	@ 0x78
 8006a28:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006a2c:	6823      	ldr	r3, [r4, #0]
 8006a2e:	6831      	ldr	r1, [r6, #0]
 8006a30:	061f      	lsls	r7, r3, #24
 8006a32:	f851 5b04 	ldr.w	r5, [r1], #4
 8006a36:	d402      	bmi.n	8006a3e <_printf_i+0x186>
 8006a38:	065f      	lsls	r7, r3, #25
 8006a3a:	bf48      	it	mi
 8006a3c:	b2ad      	uxthmi	r5, r5
 8006a3e:	6031      	str	r1, [r6, #0]
 8006a40:	07d9      	lsls	r1, r3, #31
 8006a42:	bf44      	itt	mi
 8006a44:	f043 0320 	orrmi.w	r3, r3, #32
 8006a48:	6023      	strmi	r3, [r4, #0]
 8006a4a:	b11d      	cbz	r5, 8006a54 <_printf_i+0x19c>
 8006a4c:	2310      	movs	r3, #16
 8006a4e:	e7ad      	b.n	80069ac <_printf_i+0xf4>
 8006a50:	4826      	ldr	r0, [pc, #152]	@ (8006aec <_printf_i+0x234>)
 8006a52:	e7e9      	b.n	8006a28 <_printf_i+0x170>
 8006a54:	6823      	ldr	r3, [r4, #0]
 8006a56:	f023 0320 	bic.w	r3, r3, #32
 8006a5a:	6023      	str	r3, [r4, #0]
 8006a5c:	e7f6      	b.n	8006a4c <_printf_i+0x194>
 8006a5e:	4616      	mov	r6, r2
 8006a60:	e7bd      	b.n	80069de <_printf_i+0x126>
 8006a62:	6833      	ldr	r3, [r6, #0]
 8006a64:	6825      	ldr	r5, [r4, #0]
 8006a66:	6961      	ldr	r1, [r4, #20]
 8006a68:	1d18      	adds	r0, r3, #4
 8006a6a:	6030      	str	r0, [r6, #0]
 8006a6c:	062e      	lsls	r6, r5, #24
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	d501      	bpl.n	8006a76 <_printf_i+0x1be>
 8006a72:	6019      	str	r1, [r3, #0]
 8006a74:	e002      	b.n	8006a7c <_printf_i+0x1c4>
 8006a76:	0668      	lsls	r0, r5, #25
 8006a78:	d5fb      	bpl.n	8006a72 <_printf_i+0x1ba>
 8006a7a:	8019      	strh	r1, [r3, #0]
 8006a7c:	2300      	movs	r3, #0
 8006a7e:	6123      	str	r3, [r4, #16]
 8006a80:	4616      	mov	r6, r2
 8006a82:	e7bc      	b.n	80069fe <_printf_i+0x146>
 8006a84:	6833      	ldr	r3, [r6, #0]
 8006a86:	1d1a      	adds	r2, r3, #4
 8006a88:	6032      	str	r2, [r6, #0]
 8006a8a:	681e      	ldr	r6, [r3, #0]
 8006a8c:	6862      	ldr	r2, [r4, #4]
 8006a8e:	2100      	movs	r1, #0
 8006a90:	4630      	mov	r0, r6
 8006a92:	f7f9 fbdd 	bl	8000250 <memchr>
 8006a96:	b108      	cbz	r0, 8006a9c <_printf_i+0x1e4>
 8006a98:	1b80      	subs	r0, r0, r6
 8006a9a:	6060      	str	r0, [r4, #4]
 8006a9c:	6863      	ldr	r3, [r4, #4]
 8006a9e:	6123      	str	r3, [r4, #16]
 8006aa0:	2300      	movs	r3, #0
 8006aa2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006aa6:	e7aa      	b.n	80069fe <_printf_i+0x146>
 8006aa8:	6923      	ldr	r3, [r4, #16]
 8006aaa:	4632      	mov	r2, r6
 8006aac:	4649      	mov	r1, r9
 8006aae:	4640      	mov	r0, r8
 8006ab0:	47d0      	blx	sl
 8006ab2:	3001      	adds	r0, #1
 8006ab4:	d0ad      	beq.n	8006a12 <_printf_i+0x15a>
 8006ab6:	6823      	ldr	r3, [r4, #0]
 8006ab8:	079b      	lsls	r3, r3, #30
 8006aba:	d413      	bmi.n	8006ae4 <_printf_i+0x22c>
 8006abc:	68e0      	ldr	r0, [r4, #12]
 8006abe:	9b03      	ldr	r3, [sp, #12]
 8006ac0:	4298      	cmp	r0, r3
 8006ac2:	bfb8      	it	lt
 8006ac4:	4618      	movlt	r0, r3
 8006ac6:	e7a6      	b.n	8006a16 <_printf_i+0x15e>
 8006ac8:	2301      	movs	r3, #1
 8006aca:	4632      	mov	r2, r6
 8006acc:	4649      	mov	r1, r9
 8006ace:	4640      	mov	r0, r8
 8006ad0:	47d0      	blx	sl
 8006ad2:	3001      	adds	r0, #1
 8006ad4:	d09d      	beq.n	8006a12 <_printf_i+0x15a>
 8006ad6:	3501      	adds	r5, #1
 8006ad8:	68e3      	ldr	r3, [r4, #12]
 8006ada:	9903      	ldr	r1, [sp, #12]
 8006adc:	1a5b      	subs	r3, r3, r1
 8006ade:	42ab      	cmp	r3, r5
 8006ae0:	dcf2      	bgt.n	8006ac8 <_printf_i+0x210>
 8006ae2:	e7eb      	b.n	8006abc <_printf_i+0x204>
 8006ae4:	2500      	movs	r5, #0
 8006ae6:	f104 0619 	add.w	r6, r4, #25
 8006aea:	e7f5      	b.n	8006ad8 <_printf_i+0x220>
 8006aec:	08007bcd 	.word	0x08007bcd
 8006af0:	08007bde 	.word	0x08007bde

08006af4 <memmove>:
 8006af4:	4288      	cmp	r0, r1
 8006af6:	b510      	push	{r4, lr}
 8006af8:	eb01 0402 	add.w	r4, r1, r2
 8006afc:	d902      	bls.n	8006b04 <memmove+0x10>
 8006afe:	4284      	cmp	r4, r0
 8006b00:	4623      	mov	r3, r4
 8006b02:	d807      	bhi.n	8006b14 <memmove+0x20>
 8006b04:	1e43      	subs	r3, r0, #1
 8006b06:	42a1      	cmp	r1, r4
 8006b08:	d008      	beq.n	8006b1c <memmove+0x28>
 8006b0a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006b0e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006b12:	e7f8      	b.n	8006b06 <memmove+0x12>
 8006b14:	4402      	add	r2, r0
 8006b16:	4601      	mov	r1, r0
 8006b18:	428a      	cmp	r2, r1
 8006b1a:	d100      	bne.n	8006b1e <memmove+0x2a>
 8006b1c:	bd10      	pop	{r4, pc}
 8006b1e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006b22:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006b26:	e7f7      	b.n	8006b18 <memmove+0x24>

08006b28 <_sbrk_r>:
 8006b28:	b538      	push	{r3, r4, r5, lr}
 8006b2a:	4d06      	ldr	r5, [pc, #24]	@ (8006b44 <_sbrk_r+0x1c>)
 8006b2c:	2300      	movs	r3, #0
 8006b2e:	4604      	mov	r4, r0
 8006b30:	4608      	mov	r0, r1
 8006b32:	602b      	str	r3, [r5, #0]
 8006b34:	f7fb f9f0 	bl	8001f18 <_sbrk>
 8006b38:	1c43      	adds	r3, r0, #1
 8006b3a:	d102      	bne.n	8006b42 <_sbrk_r+0x1a>
 8006b3c:	682b      	ldr	r3, [r5, #0]
 8006b3e:	b103      	cbz	r3, 8006b42 <_sbrk_r+0x1a>
 8006b40:	6023      	str	r3, [r4, #0]
 8006b42:	bd38      	pop	{r3, r4, r5, pc}
 8006b44:	20000384 	.word	0x20000384

08006b48 <memcpy>:
 8006b48:	440a      	add	r2, r1
 8006b4a:	4291      	cmp	r1, r2
 8006b4c:	f100 33ff 	add.w	r3, r0, #4294967295
 8006b50:	d100      	bne.n	8006b54 <memcpy+0xc>
 8006b52:	4770      	bx	lr
 8006b54:	b510      	push	{r4, lr}
 8006b56:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006b5a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006b5e:	4291      	cmp	r1, r2
 8006b60:	d1f9      	bne.n	8006b56 <memcpy+0xe>
 8006b62:	bd10      	pop	{r4, pc}

08006b64 <_realloc_r>:
 8006b64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006b68:	4607      	mov	r7, r0
 8006b6a:	4614      	mov	r4, r2
 8006b6c:	460d      	mov	r5, r1
 8006b6e:	b921      	cbnz	r1, 8006b7a <_realloc_r+0x16>
 8006b70:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006b74:	4611      	mov	r1, r2
 8006b76:	f7ff bc4d 	b.w	8006414 <_malloc_r>
 8006b7a:	b92a      	cbnz	r2, 8006b88 <_realloc_r+0x24>
 8006b7c:	f7ff fbde 	bl	800633c <_free_r>
 8006b80:	4625      	mov	r5, r4
 8006b82:	4628      	mov	r0, r5
 8006b84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006b88:	f000 f81a 	bl	8006bc0 <_malloc_usable_size_r>
 8006b8c:	4284      	cmp	r4, r0
 8006b8e:	4606      	mov	r6, r0
 8006b90:	d802      	bhi.n	8006b98 <_realloc_r+0x34>
 8006b92:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8006b96:	d8f4      	bhi.n	8006b82 <_realloc_r+0x1e>
 8006b98:	4621      	mov	r1, r4
 8006b9a:	4638      	mov	r0, r7
 8006b9c:	f7ff fc3a 	bl	8006414 <_malloc_r>
 8006ba0:	4680      	mov	r8, r0
 8006ba2:	b908      	cbnz	r0, 8006ba8 <_realloc_r+0x44>
 8006ba4:	4645      	mov	r5, r8
 8006ba6:	e7ec      	b.n	8006b82 <_realloc_r+0x1e>
 8006ba8:	42b4      	cmp	r4, r6
 8006baa:	4622      	mov	r2, r4
 8006bac:	4629      	mov	r1, r5
 8006bae:	bf28      	it	cs
 8006bb0:	4632      	movcs	r2, r6
 8006bb2:	f7ff ffc9 	bl	8006b48 <memcpy>
 8006bb6:	4629      	mov	r1, r5
 8006bb8:	4638      	mov	r0, r7
 8006bba:	f7ff fbbf 	bl	800633c <_free_r>
 8006bbe:	e7f1      	b.n	8006ba4 <_realloc_r+0x40>

08006bc0 <_malloc_usable_size_r>:
 8006bc0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006bc4:	1f18      	subs	r0, r3, #4
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	bfbc      	itt	lt
 8006bca:	580b      	ldrlt	r3, [r1, r0]
 8006bcc:	18c0      	addlt	r0, r0, r3
 8006bce:	4770      	bx	lr

08006bd0 <_init>:
 8006bd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006bd2:	bf00      	nop
 8006bd4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006bd6:	bc08      	pop	{r3}
 8006bd8:	469e      	mov	lr, r3
 8006bda:	4770      	bx	lr

08006bdc <_fini>:
 8006bdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006bde:	bf00      	nop
 8006be0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006be2:	bc08      	pop	{r3}
 8006be4:	469e      	mov	lr, r3
 8006be6:	4770      	bx	lr
